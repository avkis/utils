1
00:00:00,000 --> 00:00:02,000
ever wondered how to build figma a collaborative design tool with real world and realtime features like cursors

2
00:00:07,000 --> 00:00:09,000
chat and common bubbles well today's your chance to learn and build all of these features with me hi there and

3
00:00:14,000 --> 00:00:16,000
welcome to a brand new project-based video that isn't just another CR up

4
00:00:19,000 --> 00:00:21,000
today we'll build and deploy a figma clone with live collaboration features

5
00:00:25,000 --> 00:00:27,000
like multic cursors cursor chat and reactions active us users common bubbles

6
00:00:32,000 --> 00:00:34,000
creating different shapes uploading images modifying properties to any value

7
00:00:37,000 --> 00:00:39,000
free form drawing undo redo checking history deleting scaling moving clearing

8
00:00:44,000 --> 00:00:46,000
exporting canvas and much more that's a lot right but the most important part is

9
00:00:51,000 --> 00:00:53,000
that all of this works in real time and the sessions are stored which means that anything you do here will also appear to

10
00:00:58,000 --> 00:01:00,000
whoever else is in the same file we'll build this cool application using everyone's favorite next4 in Tailwind

11
00:01:06,000 --> 00:01:08,000
CSS before we start coding let me show you how the app works up in the top

12
00:01:11,000 --> 00:01:13,000
right you'll see active users who's here and what they're doing with their cursor

13
00:01:16,000 --> 00:01:18,000
unlike typical online whiteboards like Meo and fig Jam where you can create fixed specific shapes on click and then

14
00:01:24,000 --> 00:01:26,000
modify the size by dragging it or change fewer to non properties like color

15
00:01:29,000 --> 00:01:31,000
dimensions and stroke without any proper user collaboration our app is different

16
00:01:35,000 --> 00:01:37,000
just like figma we do all this including creating different shapes like

17
00:01:41,000 --> 00:01:43,000
rectangles circles and triangles and even adding text and uploading images

18
00:01:46,000 --> 00:01:48,000
with custom sizes by dragging your cursor with complete customization over color Dimensions export and for the

19
00:01:54,000 --> 00:01:56,000
artist in you there's a free drawing mode where you can let your creativity flow you might notice something on the

20
00:02:01,000 --> 00:02:03,000
left side every time I create an element it pops up in the left sidebar that's

21
00:02:06,000 --> 00:02:08,000
our realtime history or layers watch as I click this icon to clear the canvas

22
00:02:12,000 --> 00:02:14,000
and create something new to see how they Stack Up based on the shapes we create

23
00:02:17,000 --> 00:02:19,000
pretty cool right now check this out if I open up another browser Every Move I

24
00:02:23,000 --> 00:02:25,000
Make creating moving or deleting instantly shows on the right side and

25
00:02:29,000 --> 00:02:31,000
yes we've got the custom rightclick menu and keyboard shortcuts too like contrl C and V for copy pasting and contrl z and

26
00:02:36,000 --> 00:02:38,000
y to undo redo just like in our everyday developer routine now if you want to

27
00:02:42,000 --> 00:02:44,000
collaborate with someone in real time I can press forward slash or right click to chat with them and say hi to add some

28
00:02:49,000 --> 00:02:51,000
reactions I can press the letter e or open the rightclick menu and then click anywhere on the canvas and everyone will

29
00:02:55,000 --> 00:02:57,000
know how I feel about their design to make this application packed with even more useful features we can use the

30
00:03:02,000 --> 00:03:04,000
comments icon inside the Navar to add a comment bubble similar to figma for

31
00:03:08,000 --> 00:03:10,000
suggestions or to leave a happy note about the design I can reply and even send emojis if everything looks good I

32
00:03:16,000 --> 00:03:18,000
can click on the right icon to mark this thread as complete exciting isn't it I'm

33
00:03:21,000 --> 00:03:23,000
sure I heard you say yes all of this is possible thanks to live blocks The Talk of the Town bringing collaborative

34
00:03:28,000 --> 00:03:30,000
experiences to your apps in days and not months it's so user friendly that even for sale utilize their features in their

35
00:03:35,000 --> 00:03:37,000
ship live stream in this video I'll teach you how to integrate live collaboration not just into this figma

36
00:03:42,000 --> 00:03:44,000
clone project but into any app you'll ever build you don't have to learn any

37
00:03:47,000 --> 00:03:49,000
special framework or anything but you will add an exciting technology to your skill resume now you may wonder about

38
00:03:54,000 --> 00:03:56,000
the prerequisites for this tutorial all you need is a good grasp of JavaScript and rea act and if you don't have it yet

39
00:04:01,000 --> 00:04:03,000
don't fret check out the crash courses on YouTube to get up to speed finally if you want to dive deep into NEX js14 and

40
00:04:10,000 --> 00:04:12,000
really understand how the internet works while also learning by far the most used

41
00:04:15,000 --> 00:04:17,000
react framework learning All The Cutting Edge features like server actions routing and serers side rendering but

42
00:04:22,000 --> 00:04:24,000
also how to properly manage state in nextjs then check out our ultimate

43
00:04:27,000 --> 00:04:29,000
nextjs course which I'll link in the description 3,000 developers have already joined and they love it so if

44
00:04:35,000 --> 00:04:37,000
you're ready to get started let's dive right into the code to get started Setup

45
00:04:40,000 --> 00:04:42,000
building our one-of-a-kind figma clone you can create a new empty folder on

46
00:04:45,000 --> 00:04:47,000
your desktop and drag and drop it into your empty Visual Studio code window

47
00:04:50,000 --> 00:04:52,000
that should leave you with something like this where you can open up the terminal and we are ready to get

48
00:04:56,000 --> 00:04:58,000
started and of course we'll start by using the none other than the react

49
00:05:02,000 --> 00:05:04,000
framework for the web nextjs so go to next js. org and copy

50
00:05:09,000 --> 00:05:11,000
the installation command once you're back simply paste it and add the slash

51
00:05:15,000 --> 00:05:17,000
at the end to initialize the repository right within our current folder it'll

52
00:05:21,000 --> 00:05:23,000
prompt you to install the next GS CLI to which you can say why of course and then

53
00:05:27,000 --> 00:05:29,000
it's going to ask you a couple of questions to set our project up first of all are we going to use tabs script for

54
00:05:33,000 --> 00:05:35,000
this project the answer is definitely yes and you don't need to have any

55
00:05:39,000 --> 00:05:41,000
prerequisites of typescript to be able to follow along I'm going to teach you how to approach it from scratch this

56
00:05:46,000 --> 00:05:48,000
time we're going to pair typescript with eslint to follow all the best practices

57
00:05:52,000 --> 00:05:54,000
of building modern and scalable web applications so say yes to that as well

58
00:05:58,000 --> 00:06:00,000
Tailwind of course of course we're going to say yes as it almost became the default way of styling our nextjs

59
00:06:04,000 --> 00:06:06,000
applications we don't need to use the source directory but we will use the app router and we don't need to customize

60
00:06:11,000 --> 00:06:13,000
the default import Alias and right away the next GS CLI will set up our starter

61
00:06:17,000 --> 00:06:19,000
nextjs application so we can dive right into the development there we go everything has been installed

62
00:06:23,000 --> 00:06:25,000
successfully so if we open up our file explorer you can see that we have the app folder inside of which we have the

63
00:06:30,000 --> 00:06:32,000
layout and the page now since we're building a figma clone we need a canvas

64
00:06:36,000 --> 00:06:38,000
on top of which we can do all the work and there is a package called fabricjs

65
00:06:42,000 --> 00:06:44,000
which is an entire framework that makes it easy to work with the HTML 5 canvas

66
00:06:48,000 --> 00:06:50,000
elements it is essentially an interactive object model on top of canvas elements it is designed for HTML

67
00:06:56,000 --> 00:06:58,000
5 canvis manipulation allowing you to create and manipulate a lot of interactive graphical content on the

68
00:07:03,000 --> 00:07:05,000
website today we'll explore one of the best fabricjs use cases which is

69
00:07:09,000 --> 00:07:11,000
implementing Custom Design tool in this case that's our figma clone so we can

70
00:07:15,000 --> 00:07:17,000
write mpm install and get started with installing our first package or dependency called fabric alongside

71
00:07:23,000 --> 00:07:25,000
fabric will also install a package called uuid which is just a package that allows

72
00:07:29,000 --> 00:07:31,000
to create unique IDs which we'll need many of because each one of our elements

73
00:07:35,000 --> 00:07:37,000
in figma has to have its own unique ID but before we go ahead and install this

74
00:07:40,000 --> 00:07:42,000
packages let me tell you a bit more about the second most important package

75
00:07:45,000 --> 00:07:47,000
which we'll use to make the building of our figma clone possible while fabric will allow us to create a canvas and

76
00:07:52,000 --> 00:07:54,000
manipulate elements on it a package called live blocks will enable you to implement real-time collaboration

77
00:07:59,000 --> 00:08:01,000
features into any app You're Building as soon as you scroll down you can immediately see what building blocks

78
00:08:06,000 --> 00:08:08,000
they give you for enabling collaboration within your apps you have things like presents where you can see what people

79
00:08:13,000 --> 00:08:15,000
are doing broadcasting real-time events adding comments for discussions on the

80
00:08:18,000 --> 00:08:20,000
website even sharing in permission documents and more and the best thing is

81
00:08:24,000 --> 00:08:26,000
it integrates directly into our next GS ecosystem and the best of all is in this

82
00:08:30,000 --> 00:08:32,000
single video while you're building your own figma clone you'll learn how to implement most of fly Block's features

83
00:08:37,000 --> 00:08:39,000
such as the Avatar stack cursors comments and even our entire whiteboard

84
00:08:43,000 --> 00:08:45,000
feature built from scratch so exciting stuff ahead and best of all is that it's

85
00:08:49,000 --> 00:08:51,000
a developer Centric tool which allows you to really easily use it within your codebase and sync your application with

86
00:08:57,000 --> 00:08:59,000
other users so to get started with using it click the special link down in the description that will allow you to

87
00:09:04,000 --> 00:09:06,000
follow along and see exactly what I see then go to sign up sign up with GitHub

88
00:09:11,000 --> 00:09:13,000
or Google this will redirect you to your dashboard where you can see some Liveblocks

89
00:09:16,000 --> 00:09:18,000
starting information in this case I closed it because I'm going to teach you everything and we can get started with

90
00:09:22,000 --> 00:09:24,000
creating a new project let's name our project figma clone and we can choose

91
00:09:28,000 --> 00:09:30,000
the development environment for now immediately you'll be able to track all of your users and some new items will

92
00:09:34,000 --> 00:09:36,000
appear on the left such as rooms here you'll be able to create rooms that people can use within your

93
00:09:41,000 --> 00:09:43,000
application as well as schemas which allow you to Define what kind of data you'll be storing in live blocks and the

94
00:09:49,000 --> 00:09:51,000
next thing we have to do is go to API keys and just copy the public key this

95
00:09:54,000 --> 00:09:56,000
allows us to go back within our app and immediately create a new file file

96
00:09:59,000 --> 00:10:01,000
called env. looc where we can store our nextore Public Live

97
00:10:08,000 --> 00:10:10,000
blocks corpore key there we go and then simply

98
00:10:13,000 --> 00:10:15,000
paste it right here now we can proceed with the installation process live

99
00:10:18,000 --> 00:10:20,000
blocks has super slick docs that allow you to get started off of an example by

100
00:10:23,000 --> 00:10:25,000
choosing what kind of collaborative features you want to include within your app such as whiteboard comments and more

101
00:10:30,000 --> 00:10:32,000
in this case of course we're going to begin with a custom multiplayer experience you can even choose a

102
00:10:36,000 --> 00:10:38,000
framework and you can get started right away so let's copy these two additional

103
00:10:41,000 --> 00:10:43,000
packages which we need to install and paste them within our Command so now we have mpm install fabric uid at liveblock

104
00:10:50,000 --> 00:10:52,000
client and at live blocks for/ react I think that's going to be enough for now

105
00:10:56,000 --> 00:10:58,000
so let's go ahead and press enter the packages have installed and we can

106
00:11:01,000 --> 00:11:03,000
proceed to move forward we can just follow the steps from the docs so here

107
00:11:06,000 --> 00:11:08,000
we need to initialize the live blocks config TS file so let's copy this command go back to our code and just

108
00:11:14,000 --> 00:11:16,000
paste it right here it's going to ask us if we want to install the create liveblock CLI so let's say yes and it's

109
00:11:21,000 --> 00:11:23,000
going to ask us a couple of questions in this case we do want to use react suspense hooks we are using typescript

110
00:11:28,000 --> 00:11:30,000
and and that's it a life blocks config TS file has been initialized and we can

111
00:11:33,000 --> 00:11:35,000
see it right here it's asking us to add a couple of things such as our public

112
00:11:39,000 --> 00:11:41,000
API key so we can do that first for now we can remove everything from the create

113
00:11:44,000 --> 00:11:46,000
client besides the public API key uncommented and set it to nextore Public

114
00:11:53,000 --> 00:11:55,000
uncore Live blocks undoru uncore key and

115
00:11:58,000 --> 00:12:00,000
of course this is coming from process. EnV now just to satisfy tab script we

116
00:12:03,000 --> 00:12:05,000
can add an exclamation mark at the end because it doesn't yet know if it's actually there or not and with this we

117
00:12:10,000 --> 00:12:12,000
have successfully created a liveblock client that now allows us to use it

118
00:12:16,000 --> 00:12:18,000
within a live blocks room live blocks uses the concept of rooms separating

119
00:12:22,000 --> 00:12:24,000
virtual spaces where people collaborate and to create a real-time experience

120
00:12:27,000 --> 00:12:29,000
multiple users must must be connected to the same room when using next GS we

121
00:12:33,000 --> 00:12:35,000
recommend creating a room in a room. TSX file with the same directory as your

122
00:12:38,000 --> 00:12:40,000
current route so that is the app room TSX let's copy this entire file go back

123
00:12:44,000 --> 00:12:46,000
to code and create a new file within our app folder called room. TSX and paste

124
00:12:52,000 --> 00:12:54,000
what we copied from the docs now here it's trying to find live blocks config

125
00:12:57,000 --> 00:12:59,000
but I do believe we have to say dot do slash to get to the correct path and there we have it we have our first room

126
00:13:05,000 --> 00:13:07,000
next we have to use this room within our page so we can use it within our homepage which is just app page DSX so

127
00:13:13,000 --> 00:13:15,000
let's copy this block of code now go to page TSX within the app folder and

128
00:13:19,000 --> 00:13:21,000
override everything that we currently have in there we're simply importing a room from that/ room and we're importing

129
00:13:26,000 --> 00:13:28,000
this collaborative app from the collaborative app but the question is what is the collaborative app and it's

130
00:13:32,000 --> 00:13:34,000
essentially any feature that uses collaborative functionalities so in this case we can use the live blocks hook

131
00:13:40,000 --> 00:13:42,000
that figures out if there are any other users with us in a room right now called

132
00:13:45,000 --> 00:13:47,000
use others so let's copy it and then create a new file called collaborative

133
00:13:50,000 --> 00:13:52,000
app I'm just going to copy the title to ensure I spelled it correctly go here and create it within the app finally

134
00:13:57,000 --> 00:13:59,000
copy the code and paste it right here once again we're going to modify the

135
00:14:03,000 --> 00:14:05,000
config to come from the root of the directory so now within the page we are referring to our collaborative app which

136
00:14:10,000 --> 00:14:12,000
is coming from the same directory so I believe it should get it correctly if I say/ collaborative app.

137
00:14:19,000 --> 00:14:21,000
TSX and if I start typing TSX and remove it looks like now intellisense figures

138
00:14:25,000 --> 00:14:27,000
out that we actually do have a component there and it no longer complaints so now

139
00:14:30,000 --> 00:14:32,000
let's see what is the next step if you look at the next steps you can see that by default live blocks is configured to

140
00:14:35,000 --> 00:14:37,000
work without an authentication endpoint where everyone automatically has access to room we're going to use this approach

141
00:14:42,000 --> 00:14:44,000
for prototyping and our entire figma clone so with that said we have now set

142
00:14:48,000 --> 00:14:50,000
up the foundation to start our collaborative figma experience so going back to our app the only thing we have

143
00:14:55,000 --> 00:14:57,000
to do is clear our terminal and run m mpm runev to for the first time ever

144
00:15:02,000 --> 00:15:04,000
start our application on Local Host 3000 hold control or command and click the

145
00:15:07,000 --> 00:15:09,000
link you'll see a quick loading and then immediately after a piece of text that

146
00:15:13,000 --> 00:15:15,000
says there are zero other users online that's because only we are online but

147
00:15:19,000 --> 00:15:21,000
what happens if I split this View and try to open up Local Host 3000 in another tab once I do that you can see

148
00:15:27,000 --> 00:15:29,000
that there is one other user online as well and if I try it once again you'll

149
00:15:32,000 --> 00:15:34,000
see that now there are two users three users and so on you get the point our

150
00:15:38,000 --> 00:15:40,000
live functionalities are working so now is the time that we start developing the primary features of our figma

151
00:15:44,000 --> 00:15:46,000
application and then continue building collaborative functionalities on top of them so I closed all the other tabs so

152
00:15:52,000 --> 00:15:54,000
that we only have one and that means that we can get started with developing our application but before before we

153
00:15:58,000 --> 00:16:00,000
proceed there's just a tiny bit of setup that we have to do to make our further development experience much easier so File Structure & Shadcn

154
00:16:07,000 --> 00:16:09,000
one thing that we definitely have to do is install and set up shaten which is

155
00:16:12,000 --> 00:16:14,000
going to be our UI Library you can visit ui. shen.com and click get started then

156
00:16:21,000 --> 00:16:23,000
navigate to installation and choose nextjs here it's going to give you step-by-step instruction and we can skip

157
00:16:28,000 --> 00:16:30,000
step one because we have already initialized our nextjs application so we just have to run the shaten UI CLI to

158
00:16:35,000 --> 00:16:37,000
set up our project so let's copy it open up a new terminal and then paste it

159
00:16:41,000 --> 00:16:43,000
right here MPX shaten UI add latest in it we can choose the style we'd like to

160
00:16:48,000 --> 00:16:50,000
use here and we're going to go with default we can use slate we will use CSS

161
00:16:55,000 --> 00:16:57,000
variables and just like that the majority of the project set set up is automatically done now alongside chaten

162
00:17:02,000 --> 00:17:04,000
we also have Tailwind CSS installed here and tailin CSS has its own specific

163
00:17:08,000 --> 00:17:10,000
config where shaten overr the theme to provide some specific colors in this

164
00:17:14,000 --> 00:17:16,000
case we want to override that config to our custom figma theme so in the read me

165
00:17:20,000 --> 00:17:22,000
down below you can find and copy the full tailb config file and then simply override this one right here alongside

166
00:17:28,000 --> 00:17:30,000
with the tailin config we'll also have to update our global. CSS file so in the

167
00:17:34,000 --> 00:17:36,000
same read me copy the code and paste it right here you'll hear me mention the

168
00:17:40,000 --> 00:17:42,000
read me file many times throughout this video and that's because I want us to focus on what matters implementing the

169
00:17:47,000 --> 00:17:49,000
canvas and collaboration functionalities rather than focusing on implementing CSS

170
00:17:53,000 --> 00:17:55,000
or styling I want to teach you how to do the stuff that truly matters so now

171
00:17:59,000 --> 00:18:01,000
let's go back to our app let's remove this collaborative app experience because we just use that to test it out

172
00:18:05,000 --> 00:18:07,000
go back to our pH DSX and here within our room let's simply render an H1 and

173
00:18:12,000 --> 00:18:14,000
we can give it a class name of something like font DXL and just before we check out our app

174
00:18:19,000 --> 00:18:21,000
let me show you one thing and that is that within the globals we're using some special styles from live blocks and we

175
00:18:26,000 --> 00:18:28,000
have to install that to be able to use it so simply copy this part run mpm

176
00:18:32,000 --> 00:18:34,000
install and then install at live blocks react comments we're going to use it

177
00:18:37,000 --> 00:18:39,000
later on to implement the live comments functionality but for now we're going to Simply use their Styles once that is

178
00:18:45,000 --> 00:18:47,000
installed we can go back to our Local Host 3000 and there we go we have our huge title meaning that shaten and

179
00:18:53,000 --> 00:18:55,000
Tailwind CSS works as well and while we're doing this setup why don't we focus on fixing up the favicon which is

180
00:19:00,000 --> 00:19:02,000
this little icon that you can see to the left of your tab and the title as well nextjs makes it so easy so let's go to

181
00:19:08,000 --> 00:19:10,000
our file explorer and go to layout. DSX inside of here we're exporting the

182
00:19:14,000 --> 00:19:16,000
metadata so we can give it a title of figma Clone and we can give it a

183
00:19:20,000 --> 00:19:22,000
description of something like a minimalist figma

184
00:19:26,000 --> 00:19:28,000
clone using fabric.js and live

185
00:19:31,000 --> 00:19:33,000
blocks for Real Time

186
00:19:36,000 --> 00:19:38,000
collaboration there we go that's looking good keep in mind inside of here we're importing the global CSS and instead of

187
00:19:44,000 --> 00:19:46,000
using the inter font we can use the workor Sans font and we need to modify it right here

188
00:19:51,000 --> 00:19:53,000
by saying work sense is going to be equal to a call of

189
00:19:56,000 --> 00:19:58,000
workor sense and we can expand it a bit by using the

190
00:20:01,000 --> 00:20:03,000
Latin subset and also a variable of- Das font DW work- s so it's going to be

191
00:20:09,000 --> 00:20:11,000
activated once we use that class we can also get specific weights by saying weight is an array of

192
00:20:17,000 --> 00:20:19,000
400 as well as 600 and we can also get a bold of 700

193
00:20:24,000 --> 00:20:26,000
now scrolling down we can use this font right here within the body that's going to be work Sans that class

194
00:20:31,000 --> 00:20:33,000
name and we can also further style our class Name by modifying the Border Coler

195
00:20:37,000 --> 00:20:39,000
so let's make this a template string where we call the work Sans as a

196
00:20:43,000 --> 00:20:45,000
variable and then also provide a string of BG primary gray 200 and here's a key part we won't

197
00:20:52,000 --> 00:20:54,000
be using the room just within the page anymore we'll actually be using it within the layout so right here where we

198
00:20:59,000 --> 00:21:01,000
have the body we can wrap our children with the room so we can call it a room coming

199
00:21:07,000 --> 00:21:09,000
from that/ room where we put the children right inside it now we can go back to the page

200
00:21:15,000 --> 00:21:17,000
and we can remove the room from here as we're using it within the layout that's going to leave us with an empty slate

201
00:21:22,000 --> 00:21:24,000
where we have just an H1 and we can also change the color by saying text- White as now we have a dark

202
00:21:29,000 --> 00:21:31,000
background and before we check out our live website let's also modify the favicon and gather all the necessary

203
00:21:37,000 --> 00:21:39,000
assets will need throughout the build of this project and to get those assets go

204
00:21:42,000 --> 00:21:44,000
to the description of this video find the readme within it find the zipped

205
00:21:47,000 --> 00:21:49,000
assets folder download it unzip it and then simply drag and drop it to the root

206
00:21:53,000 --> 00:21:55,000
of our directory it's going to ask you whether you want to add it or copy it simply simp let say copy and you'll

207
00:22:00,000 --> 00:22:02,000
notice that now we have this new assets folder within our directory now the assets contains a couple of folders We

208
00:22:06,000 --> 00:22:08,000
already have such as the public as well as the lib folder so delete both of

209
00:22:12,000 --> 00:22:14,000
those folders from the root of our directory and then we can simply drag and drop all of these folders to the

210
00:22:18,000 --> 00:22:20,000
root of our directory constants we're going to repeat the process with our lib

211
00:22:23,000 --> 00:22:25,000
make sure to delete the old one first there we go lib as well we have

212
00:22:32,000 --> 00:22:34,000
public and finally we have types the last thing we have right here

213
00:22:38,000 --> 00:22:40,000
is going to be the favicon so delete the old one and then drag and drop the new one into the app folder and delete all

214
00:22:45,000 --> 00:22:47,000
of the assets that I provided now it might seem like there's a lot of files and folders right here but don't worry

215
00:22:53,000 --> 00:22:55,000
the only reason why I provided all of these to you is if either they are just some static code as you can see right

216
00:23:00,000 --> 00:23:02,000
here we're exporting some colors some shapes with their icons names and values

217
00:23:05,000 --> 00:23:07,000
nothing logic related all just simple values or if it's being picked from

218
00:23:10,000 --> 00:23:12,000
somewhere else like this hook right here use interval from danab brov's blog we just copy and pasted that or if I wanted

219
00:23:18,000 --> 00:23:20,000
to really document everything for you so in this case we have something like use

220
00:23:23,000 --> 00:23:25,000
max Z index which is a utility function and I went ahead and provid Ed thorough

221
00:23:28,000 --> 00:23:30,000
comments on exactly what this function does so we can explore it in more detail

222
00:23:34,000 --> 00:23:36,000
later on there's also this canvas file that does all the logic related to the canvas here I provided in-depth comments

223
00:23:42,000 --> 00:23:44,000
on literally everything that is happening and we're going to go through it later on once we consume some of the

224
00:23:48,000 --> 00:23:50,000
parts of this larger file so more in that soon but for now we have everything

225
00:23:53,000 --> 00:23:55,000
we need within our app we have our fabicon so let's check how our current APP looks like we have the same old

226
00:24:01,000 --> 00:24:03,000
title and dark background as before but now it says figma clone and we have the

227
00:24:06,000 --> 00:24:08,000
figma favicon right here which means that now we have everything we need to get started with developing it I'm going

228
00:24:12,000 --> 00:24:14,000
to put my browser side by side by our editor so we can see the changes that we make live there we go that's better

229
00:24:20,000 --> 00:24:22,000
while we're working on this I want to ensure that this text is nicely centered so I'm going to go back to app and then

230
00:24:26,000 --> 00:24:28,000
page and here we can nicely Center this H1 by putting it within a div and that

231
00:24:32,000 --> 00:24:34,000
div will have a class name equal to h-o

232
00:24:38,000 --> 00:24:40,000
w-o flex justify content of Center and items Center as well and to fully Center

233
00:24:45,000 --> 00:24:47,000
it I think we'll need to change this to height of 100 VH there we go and also

234
00:24:52,000 --> 00:24:54,000
give it a text Center as well alongside item Center and maybe we'll make it just

235
00:24:57,000 --> 00:24:59,000
a a tiny bit smaller like 2XL there we go that's looking great now

236
00:25:04,000 --> 00:25:06,000
before we implement the actual canvas and turn this into a real figma board first I want to teach you how to add

237
00:25:11,000 --> 00:25:13,000
live collaborative functionalities to any app and then we're going to upgrade them to match our figma and the first Live Cursors

238
00:25:17,000 --> 00:25:19,000
feature we'll start implementing is called live cursors it allows us to very quickly figure out if somebody else is

239
00:25:25,000 --> 00:25:27,000
in our app right now and what exactly they're doing so these two boxes present

240
00:25:31,000 --> 00:25:33,000
two different sessions within the same room and you can see the only thing you have to do is move your cursor and in

241
00:25:38,000 --> 00:25:40,000
real time in the other browsers you'll be able to see exactly what the other person does exactly like it is in real

242
00:25:45,000 --> 00:25:47,000
figma to make that happen first we have to create our live environment by going

243
00:25:50,000 --> 00:25:52,000
to or creating the components folder in the root of our directory and creating a

244
00:25:56,000 --> 00:25:58,000
new file called live . TSX here we can run rce which will immediately create

245
00:26:03,000 --> 00:26:05,000
just a basic react Arrow function component within here we can do a quick

246
00:26:09,000 --> 00:26:11,000
setup and by implementing the setup I simply mean calling those live cursor component which we also have to create

247
00:26:16,000 --> 00:26:18,000
so let's create a new folder within the components folder called cursor within

248
00:26:22,000 --> 00:26:24,000
the cursor we can create three additional files cursor

249
00:26:28,000 --> 00:26:30,000
TSX which is a singular cursor that you can see on the screen where you can also run rafc just to quickly get a started

250
00:26:36,000 --> 00:26:38,000
we can then create another component called live cursors TSX which is going to be a

251
00:26:43,000 --> 00:26:45,000
collection of all cursors showing up live on the screen and finally we can create something known as a cursor chat.

252
00:26:51,000 --> 00:26:53,000
TSX where you can also run rafc and we're going to see that in action very soon but for now let's focus just on

253
00:26:59,000 --> 00:27:01,000
consuming the live cursor within the live component our live component is going to

254
00:27:05,000 --> 00:27:07,000
be like a collection of all of the live functionalities we'll Implement live cursors cursor chat reactions and more

255
00:27:13,000 --> 00:27:15,000
so let's simply call the live cursors right here as a self-closing component and if we actually run our fce

256
00:27:21,000 --> 00:27:23,000
within live cursors we'll also be able to automatically import it I did that by

257
00:27:27,000 --> 00:27:29,000
pressing control or command space to give me this Auto Import possibility now

258
00:27:32,000 --> 00:27:34,000
we can figure out what live functionalities we need within live to then be able to pass it to live cursors

259
00:27:39,000 --> 00:27:41,000
and the first thing we need is something called others so we can see cons others is equal to use others coming from add

260
00:27:48,000 --> 00:27:50,000
live blogs config like this it is a simple hook and this hooks remember we

261
00:27:55,000 --> 00:27:57,000
used before in the demo example it Returns the list of all the other users

262
00:28:00,000 --> 00:28:02,000
in the room we can also quickly see what's happening within their docs where it says that it extracts data from the

263
00:28:06,000 --> 00:28:08,000
list of other users currently in the same room so it's not just showing the number of users it also extracts data

264
00:28:13,000 --> 00:28:15,000
from them and in this case we'll need the data about the positioning of their cursor so now we can pass others into

265
00:28:21,000 --> 00:28:23,000
live cursors as others as a simple prop you can see tab complaining already

266
00:28:28,000 --> 00:28:30,000
saying that it's not accepting it but now we can move into live cursors and accept it as our first prop of day

267
00:28:36,000 --> 00:28:38,000
others is equal to and we can say live cursor props coming from at types for/

268
00:28:44,000 --> 00:28:46,000
type like so this is a predefined type that we have created before where I

269
00:28:49,000 --> 00:28:51,000
simply spend some time figuring out exactly which type it has to be in this case it is others which is a readon

270
00:28:56,000 --> 00:28:58,000
property of of user presence and base user metadata if you don't specify it I believe it will be specified either by

271
00:29:03,000 --> 00:29:05,000
tab script automatically if I didn't write it like here I believe it would have been specified by the liveblock

272
00:29:09,000 --> 00:29:11,000
steam itself because it's going to figure out the result is coming directly from this use others hook so now that we

273
00:29:16,000 --> 00:29:18,000
have the others the question is how to use them well first we can map over them and show a cursor for each new user so

274
00:29:24,000 --> 00:29:26,000
instead of returning something automatically here rather we're going to say others. map by mapping over every

275
00:29:32,000 --> 00:29:34,000
other person so we can say other and then for each one of these other people we're going to open up a new block like

276
00:29:39,000 --> 00:29:41,000
this instead of Simply getting other we can destructure some of the property so

277
00:29:45,000 --> 00:29:47,000
we can destructure the connection ID as well as presence which will give

278
00:29:50,000 --> 00:29:52,000
us some additional information such as their cursor position so now that we're mapping over

279
00:29:56,000 --> 00:29:58,000
them first we can check if there is no presence in which case we can simply

280
00:30:02,000 --> 00:30:04,000
return or exit out of the function by returning null if we do have the presence on the other hand we can return

281
00:30:09,000 --> 00:30:11,000
something else return a new cursor and

282
00:30:14,000 --> 00:30:16,000
this is the cursor component we have created not that long ago which looks like this so we simply call it cursor

283
00:30:22,000 --> 00:30:24,000
coming from that/ cursor and of course since we're mapping overhead we also need to provide it a key

284
00:30:27,000 --> 00:30:29,000
which is going to be a connection ID because one connection ID is paired with

285
00:30:32,000 --> 00:30:34,000
every single cursor or the user that joins our app now to this cursor we'll also have to pass some additional

286
00:30:39,000 --> 00:30:41,000
properties such as the color of that cursor and in this case I've made some

287
00:30:44,000 --> 00:30:46,000
predefined colors which you can get by saying colors all uppercased and you can import them from ad SL constants if you

288
00:30:52,000 --> 00:30:54,000
go into it you're going to notice that this is simply an array of a few colors then we can randomize it by accessing a

289
00:31:00,000 --> 00:31:02,000
specific property using the square brackets notation and then choosing a number with a connection ID and then

290
00:31:07,000 --> 00:31:09,000
using a modu operator and saying colors. length this is going to pick up

291
00:31:13,000 --> 00:31:15,000
a random color based off of the connection ID we can also give it the exposition by saying

292
00:31:20,000 --> 00:31:22,000
presence do cursor dox as well as y by

293
00:31:25,000 --> 00:31:27,000
saying presence. cursor .y and then also a message in case we are typing something by saying presence.

294
00:31:33,000 --> 00:31:35,000
message these are all the necessary properties that we need to pass to now actually show our cursor on this screen

295
00:31:40,000 --> 00:31:42,000
we need to know the position on the x-axis and the position on the y-axis to be able to cover this 2D plane so moving

296
00:31:48,000 --> 00:31:50,000
into our individual cursor we can now accept some props we can accept the color the X the Y and the message and

297
00:31:56,000 --> 00:31:58,000
say that that all of these are equal to type of props so at the top we can

298
00:32:02,000 --> 00:32:04,000
Define these props by saying type props is equal to and we can give it a color

299
00:32:08,000 --> 00:32:10,000
of a type string X of a type number y of a type number and now let's turn this

300
00:32:14,000 --> 00:32:16,000
text that just says cursor into an actual cursor we can do that by giving

301
00:32:19,000 --> 00:32:21,000
this div a class name equal to pointer-events

302
00:32:26,000 --> 00:32:28,000
dnone and if sometimes you're not sure what a specific Tailwind class does simply hover over it and you can see the

303
00:32:32,000 --> 00:32:34,000
full info and if this didn't show up for you just go to extensions search for

304
00:32:38,000 --> 00:32:40,000
Tailwind CSS intellisense and you should be able to install this package Tailwind

305
00:32:45,000 --> 00:32:47,000
CSS intelligence and then it will show up now next to this one we also want to

306
00:32:50,000 --> 00:32:52,000
give it a position absolute and top zero as well as left zero so first want to

307
00:32:57,000 --> 00:32:59,000
reset its position to be able to dynamically modify it using the style

308
00:33:02,000 --> 00:33:04,000
property so we can say style of transform and then we want to use the dynamic template string to call the

309
00:33:10,000 --> 00:33:12,000
translate X property and translated by X pixels to the xaxis like this and also

310
00:33:19,000 --> 00:33:21,000
provide the Translate Y property and we want to translate it by y pixels on the

311
00:33:27,000 --> 00:33:29,000
Y AIS now if we save it nothing's going to show up yet but we're working towards

312
00:33:32,000 --> 00:33:34,000
something and that something is just an SVG image that changes colors that acts like the cursor that

313
00:33:39,000 --> 00:33:41,000
you can see on the screen right now but it's going to be the cursor from the other people and I already gave you

314
00:33:44,000 --> 00:33:46,000
access to that cursor under assets so if you simply start typing cursor SVG

315
00:33:49,000 --> 00:33:51,000
you'll be able to see that it's coming from public assets cursor SVG and we can just self close it like

316
00:33:56,000 --> 00:33:58,000
this and provided a prop of color is equal to color now later on we're going

317
00:34:02,000 --> 00:34:04,000
to also implement the message part of this component where a cursor can actually display a message but for now

318
00:34:09,000 --> 00:34:11,000
we just need to be able to see it on the screen so now if we open up another browser and go to Local Host

319
00:34:16,000 --> 00:34:18,000
3000 like I have done right here we hopefully should be able to see something happening but not yet nothing

320
00:34:24,000 --> 00:34:26,000
is happening I believe that's because we haven't even used or called the live

321
00:34:29,000 --> 00:34:31,000
component anywhere so of course it's not going to show but before that we have to resolve this typescript issue with the

322
00:34:35,000 --> 00:34:37,000
live cursors and the way we're calling them and the reason we're seeing this is because typescript is saving our ass if

323
00:34:42,000 --> 00:34:44,000
we go into this file there's one small mistake that we've made that is

324
00:34:47,000 --> 00:34:49,000
incredibly hard to notice and that is that this component is not actually

325
00:34:53,000 --> 00:34:55,000
returning anything if you think about about it we're just opening a function block

326
00:34:58,000 --> 00:35:00,000
right here and defining some kind of a map but we're never doing anything with that map so what we have to do is we

327
00:35:05,000 --> 00:35:07,000
have to return the output of the map for this component to work at all so now if

328
00:35:11,000 --> 00:35:13,000
we do that you can see that this is no longer complaining and finally we can go

329
00:35:16,000 --> 00:35:18,000
back to our original homepage which is within the app and then page and here

330
00:35:22,000 --> 00:35:24,000
right below the H1 we can call our live component which has the live cursors

331
00:35:27,000 --> 00:35:29,000
implemented so we can import it from components live now the reason we're having this error is because live blocks

332
00:35:35,000 --> 00:35:37,000
is having trouble creating the room context as context is a react and

333
00:35:40,000 --> 00:35:42,000
therefore browser feature we cannot call it in the server and if you know

334
00:35:45,000 --> 00:35:47,000
something about nextjs you know that by default all pages are service side rendered so since we'll be using live

335
00:35:52,000 --> 00:35:54,000
blocks as well as canvas most of these things will be client side rendered so

336
00:35:58,000 --> 00:36:00,000
we can just say use client right here at the Top If we save it you can see that

337
00:36:04,000 --> 00:36:06,000
now it goes away but now we have another issue saying that it cannot read properties of undefined reading x here

338
00:36:12,000 --> 00:36:14,000
referring to the cursor which means that the cursor is undefined which we definitely don't want so let's go to

339
00:36:18,000 --> 00:36:20,000
live live cursors and here alongside giving the check for the presence if the

340
00:36:24,000 --> 00:36:26,000
presence exists we also can can ensure that the cursor also exists by saying if

341
00:36:30,000 --> 00:36:32,000
no presence dot or rather question mark dot cursor that way we'll only show the

342
00:36:37,000 --> 00:36:39,000
cursor if the cursor information exists with that the error is gone and what we

343
00:36:42,000 --> 00:36:44,000
need to do before we can see the other cursor is update the presence of all of those cursors and we can do that by

344
00:36:50,000 --> 00:36:52,000
moving to the live. TSX file this is the file that will handle absolutely

345
00:36:55,000 --> 00:36:57,000
everything that has to do something with live blocks functionality so in this case we're going to use a second hook of

346
00:37:01,000 --> 00:37:03,000
the day const D structure and then that's going to be equal to use my

347
00:37:09,000 --> 00:37:11,000
presence and that's coming from live blocks config now this use my presence

348
00:37:15,000 --> 00:37:17,000
if you hover over it again this is very useful with a lot of different types of libraries and packages especially if

349
00:37:22,000 --> 00:37:24,000
they're well documented as soon as you hover over it you see what you need to pass to it you see what it returns back

350
00:37:29,000 --> 00:37:31,000
right here the presence of the current user of the current room in the function to updated and here you can update the X

351
00:37:37,000 --> 00:37:39,000
and Y AIS to know exactly where the cursor is so we definitely need to know

352
00:37:42,000 --> 00:37:44,000
where we are first we get my presence and update my presence like this and

353
00:37:48,000 --> 00:37:50,000
then from my presence we can just destructure the cursor information like so and then we can leave update my

354
00:37:55,000 --> 00:37:57,000
presence as it is and we can also Define the type for this one as any right here

355
00:38:01,000 --> 00:38:03,000
I promise we won't be using many NES throughout this video but this is just one of those situations now that we have

356
00:38:07,000 --> 00:38:09,000
our cursor and update my presence we can put it to use so we'll create three

357
00:38:13,000 --> 00:38:15,000
separate functions they'll be called const handle pointer move which is going

358
00:38:20,000 --> 00:38:22,000
to be equal to an arrow function this Arrow function will also be a call to

359
00:38:25,000 --> 00:38:27,000
the use callback hook like this coming directly from react so we can just wrap

360
00:38:32,000 --> 00:38:34,000
it in a used callback like so and then we can provide an empty dependency array

361
00:38:38,000 --> 00:38:40,000
the way that the used callback works of course if you import it from react is that it doesn't recreate this function

362
00:38:44,000 --> 00:38:46,000
every time it just takes this one instance of the function and then provides the outputs you can also hover

363
00:38:51,000 --> 00:38:53,000
over it to see more information it will return a memorized version of the Callback that only Chang changes if one

364
00:38:57,000 --> 00:38:59,000
of the inputs change so now this used callback function is going to accept an event so we can say event of a type

365
00:39:05,000 --> 00:39:07,000
react. pointer event and immediately we want to prevent the default Behavior so

366
00:39:11,000 --> 00:39:13,000
we can say event. prevent default and then we have to get the current cursor

367
00:39:16,000 --> 00:39:18,000
position we can do that by saying const X is equal to event.

368
00:39:23,000 --> 00:39:25,000
clientx minus event current

369
00:39:28,000 --> 00:39:30,000
target. get bounding client wct and we

370
00:39:34,000 --> 00:39:36,000
call it as a function that's supposed to be bounding right here and then we need

371
00:39:39,000 --> 00:39:41,000
to sayx so what the second part of the equation is doing is it's getting the

372
00:39:44,000 --> 00:39:46,000
width of the actual cursor so we subtract the exposition of the cursor to the actual position on the screen that's

373
00:39:52,000 --> 00:39:54,000
to get even more precise position and we can do absolutely the same same thing for the Y so const Y is equal to event.

374
00:40:00,000 --> 00:40:02,000
client y minus event. target. get bounding client direct

375
00:40:06,000 --> 00:40:08,000
doy after we have those we can call the update my presence coming from the hook

376
00:40:13,000 --> 00:40:15,000
that we have used before we pass in an object to which we pass the cursor and

377
00:40:19,000 --> 00:40:21,000
then we pass the X and Y values and this is the handle pointer move now I've told

378
00:40:25,000 --> 00:40:27,000
you that we're going to have two similar functions like this one and the second one is the handle pointer leave so we

379
00:40:33,000 --> 00:40:35,000
can duplicate this function below handle pointer move and rename it to handle

380
00:40:40,000 --> 00:40:42,000
pointer leave so this hides the cursor once we leave the screen in this case we

381
00:40:47,000 --> 00:40:49,000
don't need to get any calculations the only thing we have to do is update my presence to cursor is going to be set to

382
00:40:54,000 --> 00:40:56,000
null and then message is also going to be set to null that's going to be useful later on for once we Implement cursor

383
00:41:01,000 --> 00:41:03,000
chat and finally once we come back to the canvas we want to do something similar as what we do on the handle

384
00:41:08,000 --> 00:41:10,000
pointer move so we can duplicate handle pointer move one more time below and rename it to handle pointer down in this

385
00:41:16,000 --> 00:41:18,000
case we don't need event prevent default we get the positions and then we update

386
00:41:22,000 --> 00:41:24,000
my presence same thing as before now we need to make use of all of these three

387
00:41:27,000 --> 00:41:29,000
functions by adding the handlers on our div or rather the listeners so we can

388
00:41:33,000 --> 00:41:35,000
create a listener called on pointer move which is going to be equal to handle

389
00:41:38,000 --> 00:41:40,000
pointer move and you can guess it we need to do the same for the other two as well so that's going to be on pointer

390
00:41:47,000 --> 00:41:49,000
leave once we leave the screen as well as on pointer down once we come back to

391
00:41:53,000 --> 00:41:55,000
the screen so now our div is listening for all of these changes and once we

392
00:41:58,000 --> 00:42:00,000
enter with our cursor it should track the current cursor position and if we test it out it does appear like it's not

393
00:42:06,000 --> 00:42:08,000
tracking it but I can assure you it is but it's just that this div has to cover

394
00:42:12,000 --> 00:42:14,000
the entire screen and right now if we give it a class name and do something

395
00:42:17,000 --> 00:42:19,000
like a border five and Border green 500 so we can see where this div is you can

396
00:42:24,000 --> 00:42:26,000
see that it's nowhere to be found we cannot even see it and we thought that it's wrapping our entire thing so what

397
00:42:30,000 --> 00:42:32,000
we have to do instead is move these classes right here from our original div

398
00:42:37,000 --> 00:42:39,000
onto our new div that is within the live because we want to make our entire screen live so copy all the classes from

399
00:42:45,000 --> 00:42:47,000
here from page and move them over to the class name of live to this div right

400
00:42:50,000 --> 00:42:52,000
here of course without the class name right here there we go save it of course

401
00:42:57,000 --> 00:42:59,000
only after you fix the errors right here and also move this H1 from the page to

402
00:43:05,000 --> 00:43:07,000
the live because we want to ensure that it is within our live environment there we go so now it's in the center right

403
00:43:12,000 --> 00:43:14,000
here but I still cannot see my border maybe that's because I should have said border two there we go border 5 is not a

404
00:43:19,000 --> 00:43:21,000
valid tail in property so now you can see that we are wrapping our entire screen within this live environment

405
00:43:26,000 --> 00:43:28,000
within which we're tracking the position of the cursor so now let's remove this border because we know it's there fix

406
00:43:34,000 --> 00:43:36,000
the Styles and let's open up the second browser and would you look at that as

407
00:43:40,000 --> 00:43:42,000
soon as you hover over one screen right here the cursor moves nicely on the second as well this is great we can see

408
00:43:49,000 --> 00:43:51,000
exactly what the other person is doing on our screen or can we we can just see

409
00:43:54,000 --> 00:43:56,000
where they're moving but right now there's not a lot of functionality for us to communicate with them or for them

410
00:44:00,000 --> 00:44:02,000
to do anything on the screen at all we just have a single piece of text so the first thing we can do is make these two

411
00:44:07,000 --> 00:44:09,000
cursors across two different devices actually communicate and we'll do that

412
00:44:13,000 --> 00:44:15,000
using live Block's cursor chat the live cursor chat functionality will allow us

413
00:44:19,000 --> 00:44:21,000
to communicate with the other cursor you've been seeing on the screen if you press the forward slash a new cursor

414
00:44:25,000 --> 00:44:27,000
chat appears appears and as soon as you start typing like hi you can see that it appears instantly in real time on the

415
00:44:33,000 --> 00:44:35,000
other screen so let's go ahead and give some special powers to our cursor as

416
00:44:38,000 --> 00:44:40,000
well within our application we can move to the live cursors and then we can move

417
00:44:43,000 --> 00:44:45,000
to the cursor remember here we left some space for the message but not only that

418
00:44:49,000 --> 00:44:51,000
we have also already created a new component called cursor chat So within

419
00:44:55,000 --> 00:44:57,000
this cursor chat will be able to implement that input that you have seen that allows us to type in the message

420
00:45:01,000 --> 00:45:03,000
but before we do that we have to go back to our primary live component called live. TSX to First call. cursor chat so

421
00:45:11,000 --> 00:45:13,000
right here above the live cursor we can check if the cursor exists like this

422
00:45:17,000 --> 00:45:19,000
remember this is the same cursor coming from our hook Co right here at the top cursor coming from use my presence I'm

423
00:45:25,000 --> 00:45:27,000
going to also toggle down these three functions so it's easier to see and here

424
00:45:30,000 --> 00:45:32,000
we can call our cursor chat we can call it in a way as we would call a simple component self closing call to the

425
00:45:38,000 --> 00:45:40,000
cursor chat component and we can immediately import it we now need to pass it some information such as the

426
00:45:44,000 --> 00:45:46,000
cursor Itself by saying cursor is equal to cursor and we also need to pass it

427
00:45:50,000 --> 00:45:52,000
something known as a cursor state so right here at the top we can define a

428
00:45:55,000 --> 00:45:57,000
new State use State snippet like this is

429
00:46:01,000 --> 00:46:03,000
called cursor State and set cursor State at the start

430
00:46:07,000 --> 00:46:09,000
equal to an object that has the property of mode and here we can get the cursor

431
00:46:14,000 --> 00:46:16,000
mode coming from types type. hidden like this so first at the

432
00:46:21,000 --> 00:46:23,000
start we're setting the state or the mode of the state to cursor state hidden

433
00:46:27,000 --> 00:46:29,000
and this is simply coming from our types where we defined an enum which is just a

434
00:46:32,000 --> 00:46:34,000
possibility of a couple of different strings such as hidden chat reaction selector or reaction and these are all

435
00:46:39,000 --> 00:46:41,000
the different predefined values off which our state can be we also have to import Ed state from react and now we

436
00:46:47,000 --> 00:46:49,000
have this new state this will help us track the state of the cursor are we simply pointing do we have maybe a

437
00:46:54,000 --> 00:46:56,000
reaction select we'll see that soon or are we chatting and we can also update

438
00:47:00,000 --> 00:47:02,000
it within our handlers so on handle pointer leave we can remove this event

439
00:47:05,000 --> 00:47:07,000
prevent default as we don't need it and we can set cursor state to be equal to

440
00:47:10,000 --> 00:47:12,000
mode cursor. hidden because we're hiding it and this is the only thing that the pointer leave does and we don't need to

441
00:47:18,000 --> 00:47:20,000
modify the other two for now but now that we have this cursor State we can pass it to the cursor chat so we can say

442
00:47:25,000 --> 00:47:27,000
cursor state is equal to cursor State as well as set cursor state is equal to set cursor

443
00:47:30,000 --> 00:47:32,000
State and we can also pass in the update my presence is equal to update my

444
00:47:36,000 --> 00:47:38,000
presence now that they're passing all of these let's go into the cursor chat and let's make use of them here we can

445
00:47:44,000 --> 00:47:46,000
immediately and happily accept the information about the cursor as well as

446
00:47:49,000 --> 00:47:51,000
the cursor State and of course let's not forget about the set cursor State and up

447
00:47:55,000 --> 00:47:57,000
at my presence and that's going to be of a type cursor chat props coming from

448
00:48:02,000 --> 00:48:04,000
types great now let's start creating the layout of our cursor chat we're going to

449
00:48:08,000 --> 00:48:10,000
start with a div that's going to have a class name equal to Absolute because we

450
00:48:14,000 --> 00:48:16,000
need to match it with the position of the cursor top zero and left zero at the start but then using the style property

451
00:48:22,000 --> 00:48:24,000
as before we're going to modify the transform form properties of that div by

452
00:48:28,000 --> 00:48:30,000
giving it a template string of translate X and a value of cursor dox

453
00:48:38,000 --> 00:48:40,000
and move it by X pixels so we can do PX and also Translate Y which is going to

454
00:48:45,000 --> 00:48:47,000
be having a value of cursor doy and also specify the pixel value now we won't be

455
00:48:53,000 --> 00:48:55,000
able to see this yet in the browser but we will be able to see it soon as soon as we check for the cursor State we can

456
00:49:00,000 --> 00:49:02,000
say if cursor State mode is triple equal to cursor

457
00:49:07,000 --> 00:49:09,000
mode coming from types. chat so if we're chatting then display the following

458
00:49:15,000 --> 00:49:17,000
empty react fragment like this we can also wrap it in parentheses so it's

459
00:49:20,000 --> 00:49:22,000
easier to see where the new component begins there we go that is R now within

460
00:49:27,000 --> 00:49:29,000
this cursor chat we can also render the cursor SVG which we have rendered before

461
00:49:32,000 --> 00:49:34,000
and automatically imported and to it we can pass a color of # 0000 so that's a

462
00:49:39,000 --> 00:49:41,000
black color below that we need to create a div that's going to be used for our

463
00:49:45,000 --> 00:49:47,000
bubble form so we can create a div and that div will have a class name equal to

464
00:49:52,000 --> 00:49:54,000
position absolute left two top five BG blue of

465
00:50:00,000 --> 00:50:02,000
500 padding X of four padding y of two text- smm for small leading Das relaxed

466
00:50:09,000 --> 00:50:11,000
which is going to modify the line height and text- white so we can

467
00:50:15,000 --> 00:50:17,000
actually see the color within that div and finally we can make it a bit rounded

468
00:50:20,000 --> 00:50:22,000
by giving it a rounded Dash in square brackets 20 pixels great now within it

469
00:50:27,000 --> 00:50:29,000
we need to figure out if there is a message in there so if there's a previous message we can check that like

470
00:50:34,000 --> 00:50:36,000
this cursor state. previous message and and then

471
00:50:41,000 --> 00:50:43,000
we're going to render a div and that div will simply render a previous message so here we can

472
00:50:49,000 --> 00:50:51,000
say cursor state. previous message so only if we

473
00:50:55,000 --> 00:50:57,000
have typed something before we want to show it before we show the input to enter a new message and this input will

474
00:51:03,000 --> 00:51:05,000
also have a couple of class names now we're not going to go ahead and build this entire thing without actually

475
00:51:09,000 --> 00:51:11,000
seeing what we're building right so for now we can put this cursor mode chat check right here all the way to the top

476
00:51:17,000 --> 00:51:19,000
and don't forget it's closing statement to like this we're going to comment that

477
00:51:24,000 --> 00:51:26,000
part out for now because this will allow us to actually see what we're creating as soon as you

478
00:51:30,000 --> 00:51:32,000
hover you'll be able to see our cursor chat appear right there great so now

479
00:51:35,000 --> 00:51:37,000
that we can see it let's proceed with styling this input we can give it a class name equal

480
00:51:42,000 --> 00:51:44,000
to Z10 to appear on top W off 60 for

481
00:51:47,000 --> 00:51:49,000
width border none BG

482
00:51:53,000 --> 00:51:55,000
transparent text- White placeholder

483
00:51:59,000 --> 00:52:01,000
dl-300 and as we do with many inputs outline of none if we do it now it's

484
00:52:06,000 --> 00:52:08,000
going to look much better we cannot even see that it is an input let's also give it an autofocus of true because as soon

485
00:52:16,000 --> 00:52:18,000
as it appears on the screen we want to start typing there we go that's already much better now we also want to modify

486
00:52:24,000 --> 00:52:26,000
its state we want to figure out how to modify the value so for that reason we can create

487
00:52:30,000 --> 00:52:32,000
two functions at the top within this function the first function will be called const handle change just a

488
00:52:38,000 --> 00:52:40,000
typical function that we do often in react that accepts e as an event which is a react. change event specifically of

489
00:52:46,000 --> 00:52:48,000
a type HTML 5 input element that's one function and the other function is const

490
00:52:55,000 --> 00:52:57,000
handle key down here we'll have to also get the event which is in this case of a

491
00:53:01,000 --> 00:53:03,000
type react. keyboard event of HTML 5 input element and here we'll have to

492
00:53:07,000 --> 00:53:09,000
monitor for the enter key in case we want to submit our message but now that we have the skeletons of these two

493
00:53:14,000 --> 00:53:16,000
functions we can pass them to our input we can say that the onchange value will

494
00:53:20,000 --> 00:53:22,000
be calling the handle change property like this or the function and the on key

495
00:53:26,000 --> 00:53:28,000
down we'll be calling the handle key down function looks like we misspelled

496
00:53:32,000 --> 00:53:34,000
it right here there we go we can also give it a placeholder where we can check

497
00:53:38,000 --> 00:53:40,000
if a previous message exists by saying cursor state do previous

498
00:53:46,000 --> 00:53:48,000
message if it exists then the placeholder will be an empty string else

499
00:53:51,000 --> 00:53:53,000
the placeholder will be type a message great finally every input needs to have

500
00:53:57,000 --> 00:53:59,000
a value which is going to be cursor state. message and we can give it a max

501
00:54:03,000 --> 00:54:05,000
length of about 50 now to test it out we can just hover over here and we can

502
00:54:09,000 --> 00:54:11,000
immediately see the great form that we have created but of course we have to put it

503
00:54:15,000 --> 00:54:17,000
to use so right now we're seeing it only on our screen and we're seeing it always

504
00:54:21,000 --> 00:54:23,000
but we only want to see it when its state is activated so soon enough we're going to bring back that if statement or

505
00:54:28,000 --> 00:54:30,000
theary operation that we had not that long ago but for now let's focus on

506
00:54:33,000 --> 00:54:35,000
updating our empty functions the handle change function has to update our

507
00:54:39,000 --> 00:54:41,000
presence by adding a message to it so we can say update my presence where message

508
00:54:45,000 --> 00:54:47,000
is equal to e. target. Val the value contains of course the

509
00:54:50,000 --> 00:54:52,000
value that we typed and also we have to modify the cursor State like like this

510
00:54:56,000 --> 00:54:58,000
set cursor State we call it and set it to an object where the mode of the

511
00:55:02,000 --> 00:55:04,000
cursor state is cursor mode. chat because we're chatting we can also reset

512
00:55:08,000 --> 00:55:10,000
the previous message by saying previous message is null and then provide a new

513
00:55:13,000 --> 00:55:15,000
message by saying e. target. value now we're handling the change and we also

514
00:55:19,000 --> 00:55:21,000
can handle the key down by setting the cursor state to to

515
00:55:25,000 --> 00:55:27,000
also be the mode of cursor chat so we can do it like that mode is cursor chat

516
00:55:32,000 --> 00:55:34,000
or cursor mode. chat and here we're going to set the previous message to be

517
00:55:38,000 --> 00:55:40,000
equal to cursor state. message so essentially we are setting what was previously the new

518
00:55:45,000 --> 00:55:47,000
message to the previous message and then we are resetting the message right here

519
00:55:50,000 --> 00:55:52,000
soon enough it will make sense why we're doing this but essentially it allows you to type something press enter and then

520
00:55:58,000 --> 00:56:00,000
get more real estate to type something else and of course we only want to create more screen real estate for

521
00:56:03,000 --> 00:56:05,000
typing once we press enter that's exactly how it is on real figma so we can say if e. key is triple equal to the

522
00:56:11,000 --> 00:56:13,000
enter key only then we do what we have done right now by moving this cursor

523
00:56:17,000 --> 00:56:19,000
state within that if and we can also have an LF where we can check if the e. key is

524
00:56:24,000 --> 00:56:26,000
escape in that case we can just set the cursor mode to Hidden there we go that's

525
00:56:30,000 --> 00:56:32,000
much better finally you can see that our typescript is complaining a lot here saying that we maybe don't have access

526
00:56:36,000 --> 00:56:38,000
to this cursor state so it's finally the time that we put this over within aary

527
00:56:42,000 --> 00:56:44,000
operator that we previously removed so let's take this line right here above this empty

528
00:56:49,000 --> 00:56:51,000
fragment so we can call it like this remove the comment indent it properly

529
00:56:55,000 --> 00:56:57,000
and then ended right here after the react fragment there we go so now it's no

530
00:57:01,000 --> 00:57:03,000
longer complaining because it knows that the cursor mode has to exist and it has to be chat so as you can see now we

531
00:57:08,000 --> 00:57:10,000
cannot really see anything so that means that we have to find a way to actually

532
00:57:14,000 --> 00:57:16,000
activate the cursor chat mode and if you remember in the demo that I've showed you that was just the forward slash key

533
00:57:21,000 --> 00:57:23,000
that would activate it but in this case it's not really doing it anything so let's go ahead and make it happen and to

534
00:57:28,000 --> 00:57:30,000
do that we can go back to our live component where we're doing literally everything regarding to the live and

535
00:57:35,000 --> 00:57:37,000
right here we need to add a use effect to keep track of our keyboard events that's going to listen to our forward

536
00:57:42,000 --> 00:57:44,000
slash key so we can open up a regular use effect with an empty dependency array and we can of course import it

537
00:57:49,000 --> 00:57:51,000
from react within this use effect we can create a new function con on key up

538
00:57:56,000 --> 00:57:58,000
which is once we press up the key which is again going to be equal to a keyboard event like this and also const on key

539
00:58:06,000 --> 00:58:08,000
down where we're going to also do the same thing keyboard event so here we want to

540
00:58:13,000 --> 00:58:15,000
figure out if the key is forward slash so what we can do on the on key up is

541
00:58:19,000 --> 00:58:21,000
say if e. key is triple equal to slash in that case we can set cursor

542
00:58:27,000 --> 00:58:29,000
state to be equal to an object where the mode is cursor mode. chat previous

543
00:58:35,000 --> 00:58:37,000
message is null and message is an empty string we can also modify the else if e.

544
00:58:43,000 --> 00:58:45,000
key is triple equal to escape like this in that case we can

545
00:58:50,000 --> 00:58:52,000
update my presence where we're going to reset the message to be equal to an empty the string let's not forget to

546
00:58:57,000 --> 00:58:59,000
also set the cursor state to be equal to mode of cursor mode. hidden and finally

547
00:59:04,000 --> 00:59:06,000
on key down we also want to have one if where if e. key is triple equal to

548
00:59:11,000 --> 00:59:13,000
forward slash like this then we want to call the e. prevent default to prevent

549
00:59:18,000 --> 00:59:20,000
the default browser Behavior then since we're using the update my presence we can add right here

550
00:59:25,000 --> 00:59:27,000
to our dependency array of the use effect and we can put our event

551
00:59:30,000 --> 00:59:32,000
listeners to use by saying window that add event listener key up is going to

552
00:59:36,000 --> 00:59:38,000
call the on key up key down is going to call the on key down and since we're

553
00:59:42,000 --> 00:59:44,000
being good react developers we also have to return to remove those event listeners like so so now if we save this

554
00:59:51,000 --> 00:59:53,000
react should be listening for our events and if we go go here and type forward slash you can see that type a message

555
00:59:59,000 --> 01:00:01,000
appears and we can actually start typing now I do think that I'm zoomed in a bit

556
01:00:04,000 --> 01:00:06,000
so it appears like a very big thing but there we go this is more like it now it's of the proper size and we can

557
01:00:11,000 --> 01:00:13,000
actually start typing the only question is will the other user be able to see

558
01:00:16,000 --> 01:00:18,000
this chat as well and if we try it out the answer is no it doesn't seem to be a

559
01:00:24,000 --> 01:00:26,000
appearing on the other cursor so why is that well let's go to our other cursor

560
01:00:31,000 --> 01:00:33,000
where we're rendering it which is going to be under live cursors and then cursor and would you look at that we gave

561
01:00:38,000 --> 01:00:40,000
ourselves a little to-do to do later on before and now is the time to actually

562
01:00:43,000 --> 01:00:45,000
implement it so now we actually have access to the message belonging to this

563
01:00:48,000 --> 01:00:50,000
cursor not just the cursor position as we had it before and we can check if

564
01:00:54,000 --> 01:00:56,000
message exists and in that case we can render a div and that div will render a

565
01:01:02,000 --> 01:01:04,000
ptag that's going to render the message so now if we save this and try it once

566
01:01:08,000 --> 01:01:10,000
again you can see a little test although it's very dark let me make it a bit lighter for you by giving this ptag a

567
01:01:15,000 --> 01:01:17,000
class name of text- white so now if we type test you can see it actually

568
01:01:21,000 --> 01:01:23,000
appears in real time on the right side but of course let's make it look a bit better by styling this div right here

569
01:01:29,000 --> 01:01:31,000
and giving it a class name equal to Absolute left of two to just move it a

570
01:01:36,000 --> 01:01:38,000
bit away from where we are top of five that's going to look like this

571
01:01:42,000 --> 01:01:44,000
rounded -3 XL padding X of four and padding y of two let's also modify the

572
01:01:50,000 --> 01:01:52,000
background color to be the color of the other users cursor that's exciting so we

573
01:01:56,000 --> 01:01:58,000
can give it a style property where we modify the background color to be equal

574
01:02:02,000 --> 01:02:04,000
to the color we have from their cursor and we can style the P tag by giving it

575
01:02:07,000 --> 01:02:09,000
a white space like this white space all one word no WAP and text- smm and

576
01:02:14,000 --> 01:02:16,000
leading Das relaxed that's going to change the line height now if we do this and save if we

577
01:02:23,000 --> 01:02:25,000
try typing something you can see that it appears within the bubble of the same

578
01:02:28,000 --> 01:02:30,000
color of the cursor so we can say hi there I'm building figma and then

579
01:02:34,000 --> 01:02:36,000
they're saying the same thing or maybe the other person can now go here and say hi I am building it too and you can see

580
01:02:43,000 --> 01:02:45,000
it appears in the red color this is wonderful so now we're not only tracking

581
01:02:48,000 --> 01:02:50,000
the position of the other person that's currently within our app we are also able to communicate with them

582
01:02:54,000 --> 01:02:56,000
and all of this is amazing immediately done by using the live cursor chat functionality but we're going to take it

583
01:03:01,000 --> 01:03:03,000
a step further and also Implement reactions reactions are a really cool

584
01:03:07,000 --> 01:03:09,000
thing that allows you to press the letter e and then immediately express your thoughts maybe you're looking at a

585
01:03:13,000 --> 01:03:15,000
very well-designed design that allows you to very easily create your website

586
01:03:19,000 --> 01:03:21,000
in which case you would do something like this that looks great or maybe

587
01:03:24,000 --> 01:03:26,000
somebody created a 3D Madness that's so hard to develop in which case you would just Spam sad faces because it would be

588
01:03:31,000 --> 01:03:33,000
hard to develop in any case you can also Escape that emoji or say this is good

589
01:03:37,000 --> 01:03:39,000
because now we have the chat functionality too but with that said let's go ahead and Implement

590
01:03:43,000 --> 01:03:45,000
reactions to start implementing reactions we can for now close all of the files we currently have opened I Reactions

591
01:03:50,000 --> 01:03:52,000
usually do that by holding command and then pressing w or you can just close them manually we can then go to our

592
01:03:58,000 --> 01:04:00,000
components folder and create a new folder within components called

593
01:04:04,000 --> 01:04:06,000
reaction within reaction you can create a new file called reaction button.

594
01:04:11,000 --> 01:04:13,000
TSX and run ource also within reaction called Flying

595
01:04:19,000 --> 01:04:21,000
reaction. TSX and there we can also run RFC

596
01:04:25,000 --> 01:04:27,000
let's go ahead and get started with the reaction button this reaction button is exactly

597
01:04:31,000 --> 01:04:33,000
what you're seeing right here a selector in a sense that allows us to choose

598
01:04:36,000 --> 01:04:38,000
which kind of emoji or reaction we want to take so we're going to have a button

599
01:04:42,000 --> 01:04:44,000
for each one of these selections this reaction button and flying reactions are

600
01:04:47,000 --> 01:04:49,000
all already provided to us by live blocks in their example so let's take

601
01:04:53,000 --> 01:04:55,000
first the reaction selector and you can see here essentially it's just a selection of reaction buttons so what we

602
01:05:01,000 --> 01:05:03,000
can do is copy their entire example and I'm basically just at the live cursor chat example on the live blogs

603
01:05:07,000 --> 01:05:09,000
documentation you can easily find it just by Googling live cursor chat example then simply copy

604
01:05:15,000 --> 01:05:17,000
it and in our case we can paste it right within the reaction button component by

605
01:05:20,000 --> 01:05:22,000
overwriting everything and then pasting what we have this brought in both the

606
01:05:25,000 --> 01:05:27,000
reaction Button as well as the reaction selector which we're experting from this

607
01:05:30,000 --> 01:05:32,000
file and let's also not forget about the flying reaction which we can get from here which we can completely

608
01:05:38,000 --> 01:05:40,000
copy go back to the code and override our flying reaction

609
01:05:44,000 --> 01:05:46,000
too one thing that we must not forget is that there's also a flying reaction

610
01:05:49,000 --> 01:05:51,000
module CSS which you can also copy go back back to our code and create a new

611
01:05:56,000 --> 01:05:58,000
file called index. module. CSS and paste

612
01:06:02,000 --> 01:06:04,000
that file that we copied these are just some additional animations for our emojis and since we called it index

613
01:06:09,000 --> 01:06:11,000
module we can go here and just modify the name to index. module. CSS now let's

614
01:06:16,000 --> 01:06:18,000
put our reaction selectors as well as our flying reactions to the test can you guess where we'll be doing that it's

615
01:06:23,000 --> 01:06:25,000
going to be where we use all of the live functionalities within our live. DSX

616
01:06:29,000 --> 01:06:31,000
component so right here below calling the cursor we can check if the cursor

617
01:06:38,000 --> 01:06:40,000
State mode is triple equal to cursor

618
01:06:45,000 --> 01:06:47,000
mode. reaction selector if it is then we

619
01:06:50,000 --> 01:06:52,000
want to render our reaction selector component automatically imported from

620
01:06:56,000 --> 01:06:58,000
the reaction button and of course we also have to pass the set function to it which we have to Define at the top so

621
01:07:03,000 --> 01:07:05,000
let's go all the way up right here and Define a new state by using the US state

622
01:07:10,000 --> 01:07:12,000
snippet which is going to be called reactions also set

623
01:07:16,000 --> 01:07:18,000
reactions at the start equal to an empty array and we can further Define the type

624
01:07:22,000 --> 01:07:24,000
by saying this is of a type reaction coming from types and specifically an

625
01:07:28,000 --> 01:07:30,000
array of reactions so that's going to look like this now that we have this

626
01:07:33,000 --> 01:07:35,000
state we can pass it over to our reaction selector by saying set reaction

627
01:07:39,000 --> 01:07:41,000
is equal to a function call where we get a reaction and then we call a function

628
01:07:46,000 --> 01:07:48,000
set reaction to which we pass the reaction like so we're going to worry

629
01:07:51,000 --> 01:07:53,000
about the typescript errors or Warnings later on on for now I think we're good we just want to ensure to see the

630
01:07:57,000 --> 01:07:59,000
reaction selector on our screen so let's remove this and let's try to figure out

631
01:08:02,000 --> 01:08:04,000
how to turn on our reaction selector I think this will have to do with our use effect where we're listening for all of

632
01:08:09,000 --> 01:08:11,000
these changes right now here we're listening for the forward slash event and the Escape event but we trigger

633
01:08:16,000 --> 01:08:18,000
reactions on the letter e so we can add an additional else if statement and

634
01:08:23,000 --> 01:08:25,000
check if e. key is triple equal to the letter e and then we can open up a new

635
01:08:29,000 --> 01:08:31,000
block of code and say set cursor state to which we can pass the mode of

636
01:08:37,000 --> 01:08:39,000
cursor mode. reaction selector so now we know exactly when to turn this mode on

637
01:08:44,000 --> 01:08:46,000
let's also see if there is something we have to do with our other functions like handle pointer move leave or

638
01:08:51,000 --> 01:08:53,000
down first let's look into the handle pointer move in here we'll have to add

639
01:08:57,000 --> 01:08:59,000
an additional if statement to check if the cursor is not in the reaction selector then we have to update the

640
01:09:03,000 --> 01:09:05,000
cursor position so we can say if cursor is equal to null or if cursor state.

641
01:09:11,000 --> 01:09:13,000
mode is not equal to the cursor mode. reaction selector in that case we

642
01:09:19,000 --> 01:09:21,000
can do all of the calculations we have been doing so far but not if we are within the reaction selector because

643
01:09:26,000 --> 01:09:28,000
then the reactions are going to be sticked to the bottom of the screen and we don't care about the cursor

644
01:09:32,000 --> 01:09:34,000
position that's it for the handle pointer move finally in the handle pointer down we'll also have to check

645
01:09:39,000 --> 01:09:41,000
out if we are currently in the reaction state so right here below update my

646
01:09:45,000 --> 01:09:47,000
presence we can set the cursor State and the reason why we're doing

647
01:09:50,000 --> 01:09:52,000
this is to check if we are in the reaction mode then we want to set a special property called is pressed to

648
01:09:57,000 --> 01:09:59,000
true and here we need to get access to the previous state so we can do that

649
01:10:03,000 --> 01:10:05,000
with a callback function similar to what we do in react hooks so we call it like

650
01:10:08,000 --> 01:10:10,000
this state of type cursor State like this and then here we can say cursor

651
01:10:17,000 --> 01:10:19,000
state do mode is triple equal to cursor mode do rea action so we're checking if

652
01:10:24,000 --> 01:10:26,000
it is and if it is we will spread the entire State and set the is pressed

653
01:10:31,000 --> 01:10:33,000
value to True else we'll simply spread the state and then we have to close it

654
01:10:37,000 --> 01:10:39,000
properly let's just see what we're doing here set cursor State we're closing this one we also need to be closing this one

655
01:10:45,000 --> 01:10:47,000
right here and what am I missing I think I was missing one extra

656
01:10:51,000 --> 01:10:53,000
parentheses yeah it should be like this this set cursor State we have a callback function like this we check for the

657
01:10:58,000 --> 01:11:00,000
reaction we spread the necessary state or we just leave it as it is we'll soon

658
01:11:04,000 --> 01:11:06,000
come back to fix those tab script issues but for now let's see what's happening we're updating our state and we also

659
01:11:11,000 --> 01:11:13,000
have to do a similar thing on the handle pointer up so this is yet another

660
01:11:16,000 --> 01:11:18,000
Handler will create const handle pointer up is equal to everything is the same

661
01:11:23,000 --> 01:11:25,000
use callback with react pointer event like this and of course since we're

662
01:11:28,000 --> 01:11:30,000
using the use callback we have to properly add the dependency array as well and within it we can do the same

663
01:11:35,000 --> 01:11:37,000
thing state is the cursor State and then we simply return it like this we add this special is press property in case

664
01:11:42,000 --> 01:11:44,000
we're dealing with the reaction State and we can now add this handle pointer up to our div listeners on pointer up

665
01:11:52,000 --> 01:11:54,000
and then have handle pointer up great and we must also not forget to pass the

666
01:11:59,000 --> 01:12:01,000
additional properties to the dependency array of the used callback hook in this case we want to make it recalculate the

667
01:12:06,000 --> 01:12:08,000
output whenever the cursor state do mode changes or when the set cursor State

668
01:12:13,000 --> 01:12:15,000
function changes and that is the same for the handle pointer down as well as

669
01:12:19,000 --> 01:12:21,000
the handle pointer up there we go so now we have uh done it properly we're still

670
01:12:26,000 --> 01:12:28,000
having some issues with typescript right here so let's see if we can fix it if we scroll all the way up to where we're

671
01:12:32,000 --> 01:12:34,000
defining the cursor state which is right here we haven't really given it a proper

672
01:12:38,000 --> 01:12:40,000
type coming from live blocks so what we can do right here is Define the type of

673
01:12:44,000 --> 01:12:46,000
this state property by giving it a cursor State type like this and save it

674
01:12:52,000 --> 01:12:54,000
if we do this you'll notice that no longer we have any issues because now tab script knows exactly what this state

675
01:12:59,000 --> 01:13:01,000
is made up of so now we can collapse all of these code blocks so it's easier to

676
01:13:04,000 --> 01:13:06,000
see and we're passing all of the necessary handlers to our listeners on the div and we're rendering this

677
01:13:12,000 --> 01:13:14,000
reaction selector now within this reaction selector you can see that we also have a tabs script type warning

678
01:13:19,000 --> 01:13:21,000
which is also saving us once again instead of just setting the state on reaction which is what we're doing here

679
01:13:25,000 --> 01:13:27,000
right now I want to do something else and that is call a set cursor state so

680
01:13:32,000 --> 01:13:34,000
that's exactly what we'll be doing modifying the mode to be equal to cursor

681
01:13:37,000 --> 01:13:39,000
mode. reaction because that's what we're trying to do modify the reaction we want

682
01:13:43,000 --> 01:13:45,000
to give the reaction itself right here so reaction is equal to reaction coming from the state and we're going to set

683
01:13:49,000 --> 01:13:51,000
the is pressed to false it looks like I've put a dot instead of a comma right

684
01:13:55,000 --> 01:13:57,000
here which automatically fixes it so now that's good but to make a further

685
01:14:00,000 --> 01:14:02,000
optimization as well I want to wrap this into a used callback hook in

686
01:14:05,000 --> 01:14:07,000
applications such as figma and especially tracking cursors elements moving across the screen we want to

687
01:14:11,000 --> 01:14:13,000
ensure that we are very optimized because we can have many cursors moving

688
01:14:16,000 --> 01:14:18,000
around the screen and one mistake of recreating this function every time could be very costly so what we can do

689
01:14:25,000 --> 01:14:27,000
is copy this block of code put it right here above and call it within a const

690
01:14:32,000 --> 01:14:34,000
set reactions function that is a use callback that accepts the reaction we

691
01:14:40,000 --> 01:14:42,000
pass into it of a type string and then returns a code block

692
01:14:46,000 --> 01:14:48,000
that has an empty dependency array within here we can call the set cursor

693
01:14:51,000 --> 01:14:53,000
State and now we can simply call call these set reactions within this call

694
01:14:56,000 --> 01:14:58,000
right here there we go that makes much more sense and it's also using the used

695
01:15:02,000 --> 01:15:04,000
callback so now we can go into the reaction selector and check if we have done everything correctly and maybe make

696
01:15:08,000 --> 01:15:10,000
some small modifications to the code that we copied from live blocks first of

697
01:15:14,000 --> 01:15:16,000
all we don't want to use any box Shadows or transitions right here we want to ensure that our emojis appear on the

698
01:15:21,000 --> 01:15:23,000
bottom so we can completely re style this div by giving it a class name equal

699
01:15:27,000 --> 01:15:29,000
to Absolute bottom of 20 left of zero right

700
01:15:33,000 --> 01:15:35,000
of zero giving a margin X of Auto W fit

701
01:15:40,000 --> 01:15:42,000
transform rounded Das full BG D white and padding X off

702
01:15:47,000 --> 01:15:49,000
two now if we save it go back to the website and press the letter e you can

703
01:15:53,000 --> 01:15:55,000
see how nicely these emojis appear in the bottom and once we click on them it

704
01:15:58,000 --> 01:16:00,000
goes away so that part is now looking great but of course we're not yet seeing

705
01:16:05,000 --> 01:16:07,000
the actual animation so let's figure out how to do it our reaction button file is

706
01:16:11,000 --> 01:16:13,000
done but now we have to focus on the flying reaction because that's where we

707
01:16:17,000 --> 01:16:19,000
can see all of those flying animations and this file is as good as it can be

708
01:16:22,000 --> 01:16:24,000
because we copied it directly from live blocks' examples so now let's go into our live where we're recalling this

709
01:16:29,000 --> 01:16:31,000
reaction selector and let's call the flying reaction as well we can do it

710
01:16:34,000 --> 01:16:36,000
right here on top below this H1 by mapping over our reaction so we can say

711
01:16:41,000 --> 01:16:43,000
reaction. map where we get each individual reaction and then we render a flying

712
01:16:50,000 --> 01:16:52,000
reaction for each one just to make sure sure that we can differentiate the reaction from this one we can call this

713
01:16:57,000 --> 01:16:59,000
R and then we can give it a key equal to something like r. timestamp do2 string

714
01:17:06,000 --> 01:17:08,000
because each reaction has a timestamp we need to give it the X position such as the

715
01:17:12,000 --> 01:17:14,000
r.o dox as well as Y which is r.o doy we

716
01:17:17,000 --> 01:17:19,000
can give it a time stamp which is equal to r. timestamp and a value which is

717
01:17:24,000 --> 01:17:26,000
equal to r. value and of course we have to import the flying reaction so let's

718
01:17:30,000 --> 01:17:32,000
see how we have called it flying reaction export default that looks good

719
01:17:36,000 --> 01:17:38,000
to me but I misspelled it it's supposed to be flying there we go so now we can

720
01:17:42,000 --> 01:17:44,000
automatically import it from our reaction folder and how nicely tapescript lets us know that we have

721
01:17:48,000 --> 01:17:50,000
made a mistake that's supposed to be timestamp there we go so now if we save

722
01:17:54,000 --> 01:17:56,000
this something happens there we go we're back and if I type the letter e we can

723
01:18:01,000 --> 01:18:03,000
see the selection on the bottom and we can select one but still not a lot is happening it

724
01:18:08,000 --> 01:18:10,000
doesn't seem like anything is happening once we click it so let's figure out what we need to do next to actually make

725
01:18:14,000 --> 01:18:16,000
it selected and follow our cursor and then once we click the left Mouse button

726
01:18:20,000 --> 01:18:22,000
it actually flies over the screen with that specific reaction to make those reactions show we can go up all the way

727
01:18:28,000 --> 01:18:30,000
up and then we can define a new use interval hook Yep this is a use interval

728
01:18:35,000 --> 01:18:37,000
which is coming from our custom hooks uh we just call it like this and then

729
01:18:40,000 --> 01:18:42,000
provide first of all the Callback function that we're calling in a specific interval and then how often are

730
01:18:48,000 --> 01:18:50,000
we calling it in this case every 100 milliseconds this hook has to be

731
01:18:53,000 --> 01:18:55,000
imported from our custom Hooks and I took this one from Dan AB brov's blog

732
01:18:58,000 --> 01:19:00,000
where we talked a bit about how to create that react hook which in this case is very useful the only thing it

733
01:19:04,000 --> 01:19:06,000
does is it calls a specific function with a specific interval so what do we

734
01:19:10,000 --> 01:19:12,000
want to do every 100 milliseconds well here is where that is pressed State

735
01:19:16,000 --> 01:19:18,000
comes to play we can check if the cursor state. mode is triple equal to cursor

736
01:19:23,000 --> 01:19:25,000
mode. reaction so first of all are we doing any reactions and then and cursor

737
01:19:30,000 --> 01:19:32,000
state that is pressed so are we currently pressing our Mouse and if the

738
01:19:37,000 --> 01:19:39,000
cursor exists that as well so we want to make sure that all of those conditions are true and then we call the set

739
01:19:45,000 --> 01:19:47,000
reaction be careful that is said reaction right here singular where we can call a callback

740
01:19:52,000 --> 01:19:54,000
function function that gives us access to the previous reactions and then we call reactions.

741
01:20:01,000 --> 01:20:03,000
concat okay what we want to concat well we want to concatenate new reactions so

742
01:20:08,000 --> 01:20:10,000
we get an object where we need to specify the point of a new Emoji so we

743
01:20:14,000 --> 01:20:16,000
can do that by giving it the xaxis of cursor dox and y axis of cursor doy we

744
01:20:22,000 --> 01:20:24,000
want to give it a value which is the cursor state. reaction and a Tim stamp

745
01:20:27,000 --> 01:20:29,000
of date. now to know when we are doing it and let's not forget to close it

746
01:20:33,000 --> 01:20:35,000
properly so it looks like to me that we have to close one more object right here

747
01:20:39,000 --> 01:20:41,000
then an array then one parentheses and one more parentheses to close the set

748
01:20:45,000 --> 01:20:47,000
reaction and we might have one extra right here which we don't need and one

749
01:20:50,000 --> 01:20:52,000
extra here there we go that's good so we're finally back we're setting the interval and now if we press the letter

750
01:20:58,000 --> 01:21:00,000
e and select fire oh my God it's actually firing we can see a lot of fire

751
01:21:04,000 --> 01:21:06,000
emojis going every 100 milliseconds if you want to be really crazy you could

752
01:21:11,000 --> 01:21:13,000
knock this down to about 20 and then try it one more time and now it's even

753
01:21:17,000 --> 01:21:19,000
crazier you can see it's even creating some weird shapes right here which is great I think this was by the flying

754
01:21:23,000 --> 01:21:25,000
Emoji or the flying reaction by the live block steam so this is great now that we

755
01:21:30,000 --> 01:21:32,000
have that we can bring it to 100 milliseconds I like that you can do something different as well but now not

756
01:21:38,000 --> 01:21:40,000
yet will these reactions show to the other person and that's the only goal that's the only reason why we're doing

757
01:21:43,000 --> 01:21:45,000
them not to admire them on our own screen but so we can convey our emotions and reactions to another person live in

758
01:21:50,000 --> 01:21:52,000
real time so to do that we'll have to use the broadcast hook coming from live

759
01:21:58,000 --> 01:22:00,000
blocks we can do that by saying cons broadcast is equal to use broadcast

760
01:22:05,000 --> 01:22:07,000
event coming from the live blocks config like so this allows us to broadcast

761
01:22:10,000 --> 01:22:12,000
events to other users in the room so still within this if right after

762
01:22:16,000 --> 01:22:18,000
we're done setting the state we can call the broadcast hook or not a hook rather What The Hook

763
01:22:23,000 --> 01:22:25,000
returned and then pass in an object with the X position of cursor X Y position of

764
01:22:29,000 --> 01:22:31,000
cursor Y and the value of cursor state.

765
01:22:34,000 --> 01:22:36,000
reaction so now if we do this and press the fire we can see it's going but we

766
01:22:41,000 --> 01:22:43,000
still cannot see it on the other screen what are we missing we've done half the job we've broadcasted the events from

767
01:22:49,000 --> 01:22:51,000
the sender but we haven't yet received receive them or listen to them from the

768
01:22:55,000 --> 01:22:57,000
receiver so what we can do is use another hook and that hook is called use

769
01:23:01,000 --> 01:23:03,000
event listener coming from Li blocks config that accepts the event

770
01:23:06,000 --> 01:23:08,000
data and then we can have a function to do something with that data essentially

771
01:23:11,000 --> 01:23:13,000
it gets fired every time that an event gets broadcasted so here we first get

772
01:23:16,000 --> 01:23:18,000
the event by saying const event is equal to event data as reaction event so we

773
01:23:24,000 --> 01:23:26,000
know exactly what type it is and then we call the set

774
01:23:29,000 --> 01:23:31,000
reaction where we get all the previous reactions and then do the same exact thing so we can copy this entire set

775
01:23:37,000 --> 01:23:39,000
State and we want to replicate it to the other user in this case we're not only

776
01:23:43,000 --> 01:23:45,000
getting the event data but rather the actual event from the event data that's

777
01:23:48,000 --> 01:23:50,000
great and also here it's no longer going to be reaction it's just the value and

778
01:23:54,000 --> 01:23:56,000
it's not coming from cursor state that was it for our screen but rather it's coming directly from the event so now

779
01:24:02,000 --> 01:24:04,000
once again typescript is quite useful with live blocks because they have documented their types incredibly well

780
01:24:09,000 --> 01:24:11,000
so they're here to save us whenever we do some silly mistakes so with that said

781
01:24:14,000 --> 01:24:16,000
what do you say that we give it one last chance I opened up the second browser

782
01:24:19,000 --> 01:24:21,000
let's try to pull up the event and would you look at that cannot read properties

783
01:24:25,000 --> 01:24:27,000
of null reading x happening within our live. TSX line

784
01:24:31,000 --> 01:24:33,000
45 that is right here and yeah that makes sense we have access to the cursor

785
01:24:38,000 --> 01:24:40,000
data on the sender browser but we don't have access to it on the receiver end so

786
01:24:44,000 --> 01:24:46,000
instead of getting the cursor position we have to get the event position same

787
01:24:49,000 --> 01:24:51,000
as for the value right here great so if we try it one more time press the letter

788
01:24:54,000 --> 01:24:56,000
e and select some fires and they're actually going up in

789
01:25:00,000 --> 01:25:02,000
the air we can make them light up our live block figma clone because soon

790
01:25:05,000 --> 01:25:07,000
enough we're going to start converting this live environment inside of which we

791
01:25:10,000 --> 01:25:12,000
have the Emojis we have the chat we have the cursor tracking into what is yet to

792
01:25:16,000 --> 01:25:18,000
become a figma clone with a fully featured set of canvas functionality

793
01:25:23,000 --> 01:25:25,000
now there's one small detail we still have to do to optimize our app when it comes to these emotions and reactions

794
01:25:30,000 --> 01:25:32,000
and that is something that you might never think about but it could be very expensive in terms of your app

795
01:25:36,000 --> 01:25:38,000
efficiency in the long run and if many users are using the app see when you do

796
01:25:42,000 --> 01:25:44,000
a reaction these emojis drop and then they expire or at least you think so

797
01:25:49,000 --> 01:25:51,000
they hide from the screen but they are still at added to the state so right now

798
01:25:54,000 --> 01:25:56,000
we have hundreds if not even thousands of these saved to the state and we have

799
01:25:59,000 --> 01:26:01,000
to clear them so let's do that right now by going above our use interval and use

800
01:26:05,000 --> 01:26:07,000
event listener and creating a new interval we can say use interval once

801
01:26:12,000 --> 01:26:14,000
again we have a callback function in between it and we can clear them let's say every second here we can remove the

802
01:26:20,000 --> 01:26:22,000
reactions that are not visible anymore by calling the set reaction getting in

803
01:26:25,000 --> 01:26:27,000
the reaction itself and then filtering them out by calling reaction. filter

804
01:26:32,000 --> 01:26:34,000
where we get R for each reaction and we filter it if the reaction or R do

805
01:26:38,000 --> 01:26:40,000
timestamp is greater than date. now minus let's say about 4 seconds so we

806
01:26:47,000 --> 01:26:49,000
cleared the ones that are completely unvisible by this point now once we have done this you should see no difference

807
01:26:54,000 --> 01:26:56,000
in our app everything should still work well but they will be getting cleared in the background so with that in mind we

808
01:27:01,000 --> 01:27:03,000
have now implemented a couple of functionalities we have implemented the live reactions of course we have also

809
01:27:08,000 --> 01:27:10,000
implemented the cursor chat where you can type something out and finally we have the cursors itself which you can

810
01:27:14,000 --> 01:27:16,000
follow and see what the other person is doing now I noticed one small bug and

811
01:27:20,000 --> 01:27:22,000
that is if you go into the chat and type something that has the letter e in it then on the center display it appears

812
01:27:27,000 --> 01:27:29,000
like they want to do an emotion and not continue typing so that's definitely something we have to fix but before we

813
01:27:34,000 --> 01:27:36,000
do that there's one last collaboration tool I want to implement from live blocks and then we can finalize the live

814
01:27:40,000 --> 01:27:42,000
features and start fusing them with the figma canvas and that feature is the Active Users

815
01:27:46,000 --> 01:27:48,000
live Avatar stack it allows you to see who are the other users in your

816
01:27:51,000 --> 01:27:53,000
application there we go and we're going to implement this on the navigation bar of our app so

817
01:27:57,000 --> 01:27:59,000
we can get started by copying this Avatar code which is a very small piece of code just containing an image of the

818
01:28:04,000 --> 01:28:06,000
Avatar and we'll create it within our components within a new folder called

819
01:28:09,000 --> 01:28:11,000
users and then within users we can create a new avatar. TSX inside of which

820
01:28:16,000 --> 01:28:18,000
we can paste the code that we copied we can delete the comment and just make our

821
01:28:22,000 --> 01:28:24,000
life a bit easier of course in this case we want to figure out what exactly will we show and here they pass the name and

822
01:28:29,000 --> 01:28:31,000
the source as props to this Avatar component so with that in mind we have to see where this component is getting

823
01:28:36,000 --> 01:28:38,000
called so we can go to the index file right here and find the place where we're

824
01:28:43,000 --> 01:28:45,000
calling it so let's copy this entire example go back to the code and then

825
01:28:49,000 --> 01:28:51,000
create a new file within users called active

826
01:28:55,000 --> 01:28:57,000
users. TSX and within there we can paste our

827
01:29:00,000 --> 01:29:02,000
function example of course we can turn that into a const and call it active

828
01:29:06,000 --> 01:29:08,000
users is equal to an arrow function where we return all of this and

829
01:29:12,000 --> 01:29:14,000
then we immediately export default active users great and we must not

830
01:29:19,000 --> 01:29:21,000
forget to do a couple of imports we want to import use others from Li blocks config we want to import the use self

831
01:29:26,000 --> 01:29:28,000
from the config as well and we want to import the avatar from that/ Avatar I

832
01:29:32,000 --> 01:29:34,000
believe this is it for now we do have some more Styles coming directly from Li blocks so let's get the Styles as well

833
01:29:40,000 --> 01:29:42,000
in this case we have this avatar. module. CSS directly within the Avatar

834
01:29:46,000 --> 01:29:48,000
so let's copy that file by calling it right here Avatar r. module.

835
01:29:54,000 --> 01:29:56,000
CSS and past it and the second one is just the index.

836
01:30:00,000 --> 01:30:02,000
module. CSS so we can also paste it right here

837
01:30:06,000 --> 01:30:08,000
index. module. CSS and paste this right here that allows us to call these files

838
01:30:14,000 --> 01:30:16,000
we can call the index within this active users we can import

839
01:30:20,000 --> 01:30:22,000
Styles coming from SL index. module. CSS

840
01:30:26,000 --> 01:30:28,000
that's for the active users and for the Avatar we can import styles from Avatar

841
01:30:32,000 --> 01:30:34,000
module CSS great I believe that's going to be it from what we need for this code

842
01:30:38,000 --> 01:30:40,000
so now we can go back to our current application and actually use these active users within someware and where

843
01:30:45,000 --> 01:30:47,000
else are we going to use them than within our navbar so let's create a new

844
01:30:50,000 --> 01:30:52,000
component within the compon component folder called navb bar. TSX and run

845
01:30:57,000 --> 01:30:59,000
rafc this is going to be our Navar since I don't want to waste your time on creating the Navar I'm sure you've done

846
01:31:04,000 --> 01:31:06,000
that hundreds of times so far I'm going to provide you with the code to the starting version of the knobb bar in the

847
01:31:09,000 --> 01:31:11,000
read me down below so just find it and then override what we have right now

848
01:31:14,000 --> 01:31:16,000
you'll notice that it is a simple navbar we have to fix our import for the navbar props so just manually or automat

849
01:31:21,000 --> 01:31:23,000
atically imported once again and you can see that we just have a simple nav and

850
01:31:28,000 --> 01:31:30,000
we can now use that nav bar within our page so let's navigate over to the page.

851
01:31:33,000 --> 01:31:35,000
TSX and right above our live we can now put the Navar right here by importing it

852
01:31:40,000 --> 01:31:42,000
from components Navar and you can see that now it's struggling to get the Avatar or to show it so we can go to the

853
01:31:46,000 --> 01:31:48,000
nav bar and you can see that we are using the active users component right

854
01:31:52,000 --> 01:31:54,000
here and within active users we are displaying our Avatar but it looks like

855
01:31:58,000 --> 01:32:00,000
it cannot get access to the current user. info. Avatar so what we can do is

856
01:32:04,000 --> 01:32:06,000
just kol log it to see if we're getting something back from the use self hook

857
01:32:10,000 --> 01:32:12,000
console.log and I'm going to conso log the current user if we do this and open up the

858
01:32:17,000 --> 01:32:19,000
inspect element and go to the console scroll up we can see that we do

859
01:32:24,000 --> 01:32:26,000
get back an object that contains some information but the ID info and

860
01:32:30,000 --> 01:32:32,000
everything else is basically either false or undefined and that's because we don't

861
01:32:36,000 --> 01:32:38,000
yet have any users in our application we haven't done proper O So for that reason

862
01:32:42,000 --> 01:32:44,000
we're going to modify the way that we show this user a bit or this Avatar what we can do is say if there is a current

863
01:32:49,000 --> 01:32:51,000
user then we're going to remove moove this div and we're going to only show the Avatar component like this but to

864
01:32:57,000 --> 01:32:59,000
the Avatar we won't be passing any kind of source we're going to figure out a source programmatically within the

865
01:33:02,000 --> 01:33:04,000
Avatar component instead we'll pass a name of U and we'll pass some other

866
01:33:09,000 --> 01:33:11,000
styles such as a border of three pixels and we can also pass a border primary

867
01:33:16,000 --> 01:33:18,000
green so we know that's us and we can show this current user on

868
01:33:22,000 --> 01:33:24,000
top because that is us so we can do that right here below this div current user

869
01:33:28,000 --> 01:33:30,000
is first now we also want to modify the second time we call the user or the

870
01:33:33,000 --> 01:33:35,000
Avatar here we want to pass another source we don't have it but we can pass

871
01:33:38,000 --> 01:33:40,000
the name of a call to Generate random

872
01:33:44,000 --> 01:33:46,000
name which is coming from lib utils if you check it out it just finds some

873
01:33:49,000 --> 01:33:51,000
random adjectives and random animal names and then puts them together I believe live blocks created this example

874
01:33:56,000 --> 01:33:58,000
so now we can go into the Avatar and here we can also pass the other styles

875
01:34:02,000 --> 01:34:04,000
equal to minus ml-3 so now we can go into the Avatar

876
01:34:09,000 --> 01:34:11,000
and accept these new props such as name that we already had

877
01:34:15,000 --> 01:34:17,000
as well as other styles and now that we have this image we can just render a

878
01:34:21,000 --> 01:34:23,000
proper Source in this case we want to spell out a URL coming directly from Li

879
01:34:27,000 --> 01:34:29,000
blocks so we can say https colli bloks.io SL

880
01:34:36,000 --> 01:34:38,000
avataravatar Dash and then math. floor math. random

881
01:34:44,000 --> 01:34:46,000
inside of it times 30 and then we enclose it with a BNG so this is going

882
01:34:51,000 --> 01:34:53,000
going to generate a random image instead of using a regular image we can use a nextjs image tag by importing it from

883
01:34:59,000 --> 01:35:01,000
next image in that case we don't need a size we can simply say fill and we're already

884
01:35:06,000 --> 01:35:08,000
taking the class name from the Styles we also need to provide it an Al tag which is going to be the name and let's also

885
01:35:14,000 --> 01:35:16,000
provide additional class names right here by making this a template string that accepts the styles. Avatar then we

886
01:35:21,000 --> 01:35:23,000
can also give it the other styles like this and finally we can set the height

887
01:35:27,000 --> 01:35:29,000
to nine and width to nine as well and close it right here and we need to

888
01:35:34,000 --> 01:35:36,000
modify the types in this case we no longer have the source we have the other styles of a type string now if we save

889
01:35:41,000 --> 01:35:43,000
this and reload you'll notice that we have an error importing

890
01:35:47,000 --> 01:35:49,000
jspdf okay why all of a sudden we have to do something with

891
01:35:52,000 --> 01:35:54,000
jspdf I think that's because we use this Generate random name function which we

892
01:35:57,000 --> 01:35:59,000
imported right here from utils and because of that it might have looked into the Imports of this file and

893
01:36:05,000 --> 01:36:07,000
we didn't yet actually install this package so for now we can comment it out and we can comment out its use right

894
01:36:12,000 --> 01:36:14,000
here at the bottom we're going to bring it back later on but once we do that we should be back to our application and

895
01:36:19,000 --> 01:36:21,000
now nextjs gives us an error saying that we cannot use images whose sources we

896
01:36:25,000 --> 01:36:27,000
didn't validate so we can go to our next config JS and within here we can add

897
01:36:32,000 --> 01:36:34,000
images that's an array and here an object within it where we specify the

898
01:36:38,000 --> 01:36:40,000
protocol of htps we specify the host name say that

899
01:36:43,000 --> 01:36:45,000
the images will come from live block.io and we specify the port of just

900
01:36:49,000 --> 01:36:51,000
an empty string now if we save this this and reload you'll see the app broke so

901
01:36:55,000 --> 01:36:57,000
we just have to run mpm runev one more time and how nice nextjs automatically

902
01:37:00,000 --> 01:37:02,000
lets us know that we have misspelled or mistyped something in our config so it's not typescript saving us right here it's

903
01:37:06,000 --> 01:37:08,000
nextjs itself it's saying that it expected object at images and we

904
01:37:11,000 --> 01:37:13,000
provided it at aray so the images itself indeed has to be an object but inside it

905
01:37:19,000 --> 01:37:21,000
has to have these remote patterns which is then an array that we have created right here so we can copy this

906
01:37:26,000 --> 01:37:28,000
and instead of putting it directly within images we can put it right here under remote patterns and that allows us

907
01:37:33,000 --> 01:37:35,000
to rerun our application but then also I can notice that I said post instead of

908
01:37:39,000 --> 01:37:41,000
Port right here so thank you nextjs and versel if I switch this up right now you

909
01:37:45,000 --> 01:37:47,000
can see that we are live on Local Host 3000 once again and hopefully we'll be

910
01:37:50,000 --> 01:37:52,000
able to see something oh would you look at that okay this is exciting so we can see our Li block figma clone but at the

911
01:37:57,000 --> 01:37:59,000
top we can see our fig Pro we got that immediately because I use this starter

912
01:38:04,000 --> 01:38:06,000
for our navigation bar that contains the logo image and then we have the active

913
01:38:09,000 --> 01:38:11,000
users which we have developed letting us know there are two different users on our app right now we have you which is

914
01:38:16,000 --> 01:38:18,000
us and we have a bright penguin so now we can kind of make it fit better with

915
01:38:22,000 --> 01:38:24,000
our current application and not make it look like this it should always be sticky at the top of our app so let's do

916
01:38:29,000 --> 01:38:31,000
that first before we check out all of the Avatar functionalities to fix it we'll have to go to our page. DSX and

917
01:38:36,000 --> 01:38:38,000
we'll have to modify the styles of our div or while we're here let's call it a main because this is our main div for

918
01:38:42,000 --> 01:38:44,000
the entire application we can give it a class name equal to h- screen meaning it

919
01:38:48,000 --> 01:38:50,000
will take the full height of the screen 100 VH and we can also give it an

920
01:38:55,000 --> 01:38:57,000
overflow of hidden which will remove this ugly scroll on the right side if we

921
01:39:00,000 --> 01:39:02,000
save it now we can see only the nav bar which is taking the entire screen and we cannot scroll anymore so now let's

922
01:39:08,000 --> 01:39:10,000
figure out why that is the first thing we can do is wrap the live part into its

923
01:39:13,000 --> 01:39:15,000
own section so that's going to be a section with a class name equal to flex

924
01:39:20,000 --> 01:39:22,000
h-4 and then Flex Das row and we can put the live right within it if we do that

925
01:39:27,000 --> 01:39:29,000
that's not going to do anything on its own so we have to go into the nav bar and then into our active users here

926
01:39:35,000 --> 01:39:37,000
we copy the code from live blocks as example and they use the H screen which in this case we don't need we don't want

927
01:39:42,000 --> 01:39:44,000
it to take the full screen and now we have a more regular Navar but let's fully style this exactly

928
01:39:48,000 --> 01:39:50,000
as it should by modifying this div right here and giving it a class name of flex

929
01:39:56,000 --> 01:39:58,000
items D Center justify Das Center and a gap of one there we go now they appear

930
01:40:03,000 --> 01:40:05,000
on the right side we're checking for the current user then we're checking if

931
01:40:08,000 --> 01:40:10,000
there are any other users in this case we don't need the info and finally if there are more users

932
01:40:16,000 --> 01:40:18,000
then we display a text of more which in this case we don't have anymore now

933
01:40:21,000 --> 01:40:23,000
there's one weird thing happening once we move our cursor around and that is that the colors change we don't want

934
01:40:28,000 --> 01:40:30,000
them to change because we want each user to have their own color so to fix it we

935
01:40:35,000 --> 01:40:37,000
can memorize the active users component we can do that by using the use memo

936
01:40:41,000 --> 01:40:43,000
hook so we can take this entire part that has to do something with the

937
01:40:46,000 --> 01:40:48,000
users the actual jsx code take it C copy it move it from here and then create a

938
01:40:54,000 --> 01:40:56,000
new variable right here on top called const memorized users is equal to use

939
01:41:01,000 --> 01:41:03,000
memo hook coming from react where we can simply return what we copied right here

940
01:41:09,000 --> 01:41:11,000
so the return of this div make sure to add a return statement first there we go

941
01:41:15,000 --> 01:41:17,000
now the second parameter to the memo is when will it actually refresh and it will refresh refesh when the others join

942
01:41:22,000 --> 01:41:24,000
so we can say others. length changes then we will change the colors and for

943
01:41:28,000 --> 01:41:30,000
that we also have to know when the others have joined and instead of using the others we can use the users right

944
01:41:34,000 --> 01:41:36,000
here to see when the length of the users has changed finally we can return the

945
01:41:39,000 --> 01:41:41,000
memorized users instead of always changing those

946
01:41:45,000 --> 01:41:47,000
users that way once you move around you're going to notice that they're not changing at all which which is exactly

947
01:41:51,000 --> 01:41:53,000
how it should be but if you reload sure you're going to get new colors but the most important part is that those users

948
01:41:58,000 --> 01:42:00,000
are exactly the same color for the entire duration of your session so now we can nicely see that there are two

949
01:42:04,000 --> 01:42:06,000
users currently logged in we can even chat with each other by typing something out or if we're really happy we can also

950
01:42:12,000 --> 01:42:14,000
show some emojis so this is looking great and we can see that the other user

951
01:42:17,000 --> 01:42:19,000
is online with us now let's modify these Styles a bit and to modify the Styles we can go to

952
01:42:23,000 --> 01:42:25,000
Avatar module CSS and we can simply change the width from 56 to something

953
01:42:30,000 --> 01:42:32,000
like 40 pixels there we go that fits a bit better and we'll also have to add

954
01:42:35,000 --> 01:42:37,000
some padding and we'll do that not within the avatars but within the active users so that's right here in the div by

955
01:42:42,000 --> 01:42:44,000
giving it a padding top of something like let's do eight pixels and instead

956
01:42:48,000 --> 01:42:50,000
of padding top we can do padding y meaning top and bottom and this is looking great with that said do you

957
01:42:54,000 --> 01:42:56,000
remember that issue where if we start typing and type the letter e immediately the chat disappears let's go ahead and

958
01:43:02,000 --> 01:43:04,000
fix that the fix for that will be within the cursor chat so let's go to cursor

959
01:43:07,000 --> 01:43:09,000
chat and then to this div we can provide a special property on key up that's

960
01:43:13,000 --> 01:43:15,000
going to accept a callback function that gets the event and we simply need to stop the

961
01:43:20,000 --> 01:43:22,000
propagation meaning stop doing other stuff and focus on the typing so e. stop

962
01:43:25,000 --> 01:43:27,000
propagation if we do this and open up the other window and start typing

963
01:43:30,000 --> 01:43:32,000
something like test you can see that we can actually type test without being

964
01:43:36,000 --> 01:43:38,000
interrupted by the Emoji but now if we close it with Escape key and type the E

965
01:43:41,000 --> 01:43:43,000
key we can actually show the Emoji I think this would be the perfect time to

966
01:43:47,000 --> 01:43:49,000
show what we have done so far with all of the live functionalities in the full screen so I will expand these browsers

967
01:43:55,000 --> 01:43:57,000
one here and I'm going to take half the screen and take it for the other and as

968
01:44:01,000 --> 01:44:03,000
you can see two different screens you can think of these as two different users on two different browsers on two

969
01:44:08,000 --> 01:44:10,000
different computers they are looking at the same application at the same time in the

970
01:44:14,000 --> 01:44:16,000
browser they can see each other's statuses and they can start chatting hey

971
01:44:20,000 --> 01:44:22,000
let's design this app and immediately it works in real time and they can also

972
01:44:27,000 --> 01:44:29,000
share different emojis so with that in mind I'm going to close one browser

973
01:44:33,000 --> 01:44:35,000
which means that we have implemented the majority of our live functionalities

974
01:44:38,000 --> 01:44:40,000
using live blocks and the reason why I wanted to do this first before doing the full figma clone is to show you that you

975
01:44:46,000 --> 01:44:48,000
can do this on absolutely any application what is our app even right

976
01:44:51,000 --> 01:44:53,000
now it's just a simple piece of text but still a piece of text powered by all of

977
01:44:57,000 --> 01:44:59,000
these real-time collaboration functionalities so it can be a dashboard where you can communicate with other

978
01:45:03,000 --> 01:45:05,000
people viewing it at the same time it can be a landing page like what versel is doing with her comments where you can

979
01:45:10,000 --> 01:45:12,000
leave comments to request some changes it can be like what figma is doing to collaborate on creating the design and

980
01:45:17,000 --> 01:45:19,000
that is exactly what we're doing in this video and you will love learn how to do it all so for now I'm going to close all

981
01:45:24,000 --> 01:45:26,000
of the currently open files to have a clean working

982
01:45:29,000 --> 01:45:31,000
environment and we'll start converting this piece of text into a fullblown

983
01:45:36,000 --> 01:45:38,000
canvas on which you'll be able to add elements and interact with them in real

984
01:45:41,000 --> 01:45:43,000
time with another person so I wanted to say the exciting stuff starts now but

985
01:45:47,000 --> 01:45:49,000
this entire thing has been incredibly exciting to me but let's say that the second exciting part of this video

986
01:45:53,000 --> 01:45:55,000
starts now to get started with creating our canvas we can go to our page. TSX

987
01:46:00,000 --> 01:46:02,000
and we can start focusing on the layout of our application such as the left sidebar and the right sidebar and then

988
01:46:06,000 --> 01:46:08,000
the canvas in the middle so let's do that right away let's put the left sidebar right here on the left side or

989
01:46:13,000 --> 01:46:15,000
on top by calling it a left sidebar which is a self-closing component and we

990
01:46:19,000 --> 01:46:21,000
can duplicate it and turn it into a right sidebar right here at the bottom next to the live

991
01:46:27,000 --> 01:46:29,000
there we go so this will temporarily break the application but at least we know that we have the structure ready

992
01:46:34,000 --> 01:46:36,000
what we have to do next is actually create those two components so let's go to our components and create right here

993
01:46:42,000 --> 01:46:44,000
in the root of the components the left sidebar. TSX where we can run our afce

994
01:46:50,000 --> 01:46:52,000
as well as the right sidebar where we can call rafc as well

995
01:46:58,000 --> 01:47:00,000
this leaves us with the ability to import those two components and then reload the page to Sidebars

996
01:47:05,000 --> 01:47:07,000
see what we have although you cannot see it very well right here we have left side bar and on the right side we have

997
01:47:12,000 --> 01:47:14,000
the right side bar while we're here we can also give them some additional styling so let's turn them into a

998
01:47:19,000 --> 01:47:21,000
section and and let's give this section A Class name equal to flex

999
01:47:25,000 --> 01:47:27,000
flex-all border DT as in top border D primary D

1000
01:47:33,000 --> 01:47:35,000
gr-200 BG D primary D black text- primary D

1001
01:47:40,000 --> 01:47:42,000
gr-300 Min dw-200 and 27 pixels within square

1002
01:47:47,000 --> 01:47:49,000
brackets sticky left Z z h full so it takes the

1003
01:47:52,000 --> 01:47:54,000
full height there we go it's already starting to take effect on Max small

1004
01:47:57,000 --> 01:47:59,000
devices hidden select none overflow dy-

1005
01:48:05,000 --> 01:48:07,000
Auto and a PB of 20 for padding bottom now we cannot seem to see it on small

1006
01:48:12,000 --> 01:48:14,000
devices but if we make it a bit larger and even

1007
01:48:17,000 --> 01:48:19,000
larger we can see the left sideb bar up appear right here on the left now let's

1008
01:48:23,000 --> 01:48:25,000
focus on the right sidebar two by navigating to our right sidebar

1009
01:48:29,000 --> 01:48:31,000
also turning it into section and what we can do is basically duplicate most of

1010
01:48:34,000 --> 01:48:36,000
the properties from the left sidebar so let's just copy this entire section and

1011
01:48:40,000 --> 01:48:42,000
paste it right into the right sidebar of course we'll have to rename this from left to

1012
01:48:46,000 --> 01:48:48,000
right and also while we're here let's create an a H3 within it and this H3

1013
01:48:53,000 --> 01:48:55,000
will say design so the right side is for the design the left side will show all the elements so let's give it a class

1014
01:49:00,000 --> 01:49:02,000
name equal to PX of five padding top of four text- Xs and uppercase there we go

1015
01:49:09,000 --> 01:49:11,000
that's better and we can also modify this in the left sidebar by copying this

1016
01:49:14,000 --> 01:49:16,000
H3 pasting it right here within it and saying something like elements

1017
01:49:21,000 --> 01:49:23,000
there we go that's better already now this is starting to look more like a finished application but what's missing

1018
01:49:28,000 --> 01:49:30,000
is that this middle part is not yet a canvas so what we have to do is go back

1019
01:49:33,000 --> 01:49:35,000
right here to our page and we have to go into the live and within it we have to Canvas

1020
01:49:39,000 --> 01:49:41,000
render a canvas so we can go all the way here to the top where we have figma

1021
01:49:45,000 --> 01:49:47,000
clone we're going to remove that and we're going to render a canvas element

1022
01:49:50,000 --> 01:49:52,000
this doesn't have to be imported this is just a regular HTML 5

1023
01:49:55,000 --> 01:49:57,000
canvas now this canvas doesn't seem like much at the moment it's still just an empty screen that's because we have to

1024
01:50:02,000 --> 01:50:04,000
initialize all the refs as in references to make this canvas do something so back

1025
01:50:09,000 --> 01:50:11,000
in page we have to create a canvas ref we can do that right here at the top by

1026
01:50:15,000 --> 01:50:17,000
saying const canvas ref is equal to U use ref which has to be imported from

1027
01:50:22,000 --> 01:50:24,000
react and it's going to be of a type HTML 5 canvas element like this and at

1028
01:50:29,000 --> 01:50:31,000
the start set to null we'll also have to create another ref for our fabric

1029
01:50:34,000 --> 01:50:36,000
Library so we can say const fabric ref is equal to use

1030
01:50:41,000 --> 01:50:43,000
ref and this one will be fabric. Canvas OR null so this is a special type that

1031
01:50:49,000 --> 01:50:51,000
we have fabric. canvas and this fabric has to be

1032
01:50:54,000 --> 01:50:56,000
imported at the top from fabric so we can do it by saying import fabric from

1033
01:51:00,000 --> 01:51:02,000
fabric now we are properly specifying the types and at the start it's also

1034
01:51:05,000 --> 01:51:07,000
going to have the value of null the canvas ref is the reference to the canvas element that we'll use to

1035
01:51:12,000 --> 01:51:14,000
initialize the fabric canvas and the fabric ref will allow us to perform

1036
01:51:18,000 --> 01:51:20,000
operations on the canvas it's kind of like a copy of the created canvas so

1037
01:51:23,000 --> 01:51:25,000
that we can use it outside of the canvas event listeners and there's a third ref

1038
01:51:28,000 --> 01:51:30,000
we'll have to Define const is drawing it is a Boolean variable that tells us if

1039
01:51:35,000 --> 01:51:37,000
the user is currently drawing on the canvas or not meaning if the free form

1040
01:51:40,000 --> 01:51:42,000
drawing mode is enabled so we can say this is equal to use ref at the start set to false and finally we can use all

1041
01:51:48,000 --> 01:51:50,000
these refs to initialize our fabric canvas we're going to do that within a use effect so we can start a new use

1042
01:51:56,000 --> 01:51:58,000
effect and make it load only at the start meaning we're going to leave the dependency array empty for now we can

1043
01:52:03,000 --> 01:52:05,000
import use effect from react and we can start creating the canvas by saying

1044
01:52:09,000 --> 01:52:11,000
const canvas is equal to initialize fabric which is important

1045
01:52:15,000 --> 01:52:17,000
from blib canvas and to it we need to pass the canvas ref as well as the fabric ref that looks

1046
01:52:24,000 --> 01:52:26,000
like this and we have to put that within an object because initialized fabric only accepts one parameter now that we

1047
01:52:32,000 --> 01:52:34,000
have our canvas we can listen to Mouse down events on the canvas which are fired once the user clicks on the canvas

1048
01:52:40,000 --> 01:52:42,000
and we can do that by saying canvas.on Mouse down and then here we

1049
01:52:46,000 --> 01:52:48,000
have a callback function that gives us the option to make a decision what we want to do once that happens and

1050
01:52:53,000 --> 01:52:55,000
here we want to call a utility function called handle canvas Mouse down to which

1051
01:53:00,000 --> 01:53:02,000
we can pass an object containing the options the canvas the is drawing

1052
01:53:06,000 --> 01:53:08,000
property and later on a few additional properties as well and we also have to

1053
01:53:12,000 --> 01:53:14,000
pass a few more additional properties such as selecting which shape are we currently interacting on since we don't

1054
01:53:19,000 --> 01:53:21,000
have the possibility to choose a shape right now we don't have any shapes we just have to create a ref for it a

1055
01:53:26,000 --> 01:53:28,000
reference so we can say const shape ref is equal to use ref that's if a type

1056
01:53:34,000 --> 01:53:36,000
fabric do object or null at the start set to null this is a reference to the

1057
01:53:41,000 --> 01:53:43,000
shape that the user is currently drawing and we also need to have one for

1058
01:53:47,000 --> 01:53:49,000
the selected shape so we can say const selected shape ref is equal to use

1059
01:53:56,000 --> 01:53:58,000
ref of a type either string or null at

1060
01:54:01,000 --> 01:54:03,000
the start set to null the selected shape ref is a reference the shape that the

1061
01:54:06,000 --> 01:54:08,000
user has currently selected so if it's a rectangle it will say rectangle now we can pass these two

1062
01:54:14,000 --> 01:54:16,000
additional refs right here by saying shape ref and selected shape ref and

1063
01:54:20,000 --> 01:54:22,000
this mouse down will be incredibly useful once we start dealing with the elements on the canvas but for now we

1064
01:54:26,000 --> 01:54:28,000
care about one even more than this mouse down which is a resize element window

1065
01:54:33,000 --> 01:54:35,000
dot add element listener of a type resize and once we resize it we call

1066
01:54:40,000 --> 01:54:42,000
this callback function that calls the handle resize utility function to which

1067
01:54:47,000 --> 01:54:49,000
we can pass the fabric ref and this is not element listener it is

1068
01:54:52,000 --> 01:54:54,000
add event listener so we are listening for the resizes of the canvas such as

1069
01:54:58,000 --> 01:55:00,000
once I do this then the size of the canvas changes but now the question is what do

1070
01:55:04,000 --> 01:55:06,000
we do with this it doesn't seem like we have a canvas at all well we're going to

1071
01:55:10,000 --> 01:55:12,000
put it all together right now remember this canvas R we can finally send it

1072
01:55:16,000 --> 01:55:18,000
over as a prop to our live component and then go into it accept it as a prop

1073
01:55:23,000 --> 01:55:25,000
right here of course we have to define the type while doing that so we can say that that's going to be of a type props

1074
01:55:30,000 --> 01:55:32,000
and right here we can say type props is equal to Canvas

1075
01:55:36,000 --> 01:55:38,000
ref of a type react. mutable ref object of a type HTML

1076
01:55:44,000 --> 01:55:46,000
canvas element or null in case at the start it is set to null

1077
01:55:50,000 --> 01:55:52,000
now tab script is not going to complain and we can use this canvas ref and pass

1078
01:55:55,000 --> 01:55:57,000
it over to our HTML 5 canvas component

1079
01:56:00,000 --> 01:56:02,000
which is right here canvas ref is equal to Canvas ref or rather just saying ref

1080
01:56:07,000 --> 01:56:09,000
is equal to canvis ref and another very important thing is that we have to provide the ID of canvas to our div

1081
01:56:15,000 --> 01:56:17,000
that's wrapping the canvas now if we go back we can actually try to interact with it

1082
01:56:22,000 --> 01:56:24,000
because we have created this mouse down functionality but on Mouse down we have

1083
01:56:28,000 --> 01:56:30,000
to pass specific shape ref letting the canvas know what kind of element or

1084
01:56:33,000 --> 01:56:35,000
shape do we want to create at the start it set to null and we don't have access to any kind of a selector to choose

1085
01:56:40,000 --> 01:56:42,000
which kind of element we want to add we'll create that selector within the knob bar very very soon but for now let

1086
01:56:47,000 --> 01:56:49,000
me show you how to quickly get your first element on the canvas so you can feel like a real artist the only thing

1087
01:56:54,000 --> 01:56:56,000
you have to do is modify the selected shape ref initial value to something

1088
01:57:00,000 --> 01:57:02,000
like rectangle that way once you click on it we're going to pass it and the

1089
01:57:05,000 --> 01:57:07,000
handle canvas Mouse down which is our special utility function will just create this specific shape based off of

1090
01:57:13,000 --> 01:57:15,000
the selected shape bre so click and reload your screen and press on it there

1091
01:57:22,000 --> 01:57:24,000
we go so now every time that you press you're going to get a 100 by 100 pixel wide rectangle and then you can move

1092
01:57:30,000 --> 01:57:32,000
those around you can see that works right of the bad but right now once you click you're just going to get as many

1093
01:57:35,000 --> 01:57:37,000
as possible this is looking great it already feels that we can create

1094
01:57:40,000 --> 01:57:42,000
something and we can even move them off you can see well not really right now we're kind of a bit blocked and it's

1095
01:57:46,000 --> 01:57:48,000
creating so many as soon as we move move it around and keep our Mouse down this

1096
01:57:52,000 --> 01:57:54,000
is just the first prototype version don't worry we're going to fix it but you can see how it works right now you

1097
01:57:58,000 --> 01:58:00,000
get the idea now what do you say that we add a selector to the navbar that allows us to choose between many different Toolbar & Shapes Menu

1098
01:58:04,000 --> 01:58:06,000
shapes such as these ones right here rectangle circle triangle line even an

1099
01:58:10,000 --> 01:58:12,000
image upload and a free drawing we can do all of that by adding

1100
01:58:16,000 --> 01:58:18,000
these couple of icons to our navigation bar so going back to the code we can

1101
01:58:21,000 --> 01:58:23,000
revisit the navbar component we have a Navar with our logo and right below or

1102
01:58:27,000 --> 01:58:29,000
rather right to the right side of the logo we want to add some additional elements so we can create a UL component

1103
01:58:34,000 --> 01:58:36,000
for an unordered list give it a class name equal to flex and

1104
01:58:40,000 --> 01:58:42,000
flex-r and right there we can map over all of our nav items I've already

1105
01:58:46,000 --> 01:58:48,000
created a constant called nav elements that we can simply use and then import

1106
01:58:51,000 --> 01:58:53,000
if you quickly go to it you can see that it contains the select the rectangle text all different kinds of icons we

1107
01:58:58,000 --> 01:59:00,000
want to show on our nav bar and we can simply map over it by saying that map

1108
01:59:04,000 --> 01:59:06,000
where we get each individual item of a type active element coming from types or

1109
01:59:11,000 --> 01:59:13,000
any and for each one we want to immediately return An Li please make

1110
01:59:18,000 --> 01:59:20,000
sure that here you put a parentheses and not the opening of the function block because then that's not an immediate

1111
01:59:24,000 --> 01:59:26,000
return now with this Li since we're mapping over different elements we want

1112
01:59:29,000 --> 01:59:31,000
to give it a key equal to item. name then we also want to show something

1113
01:59:35,000 --> 01:59:37,000
within it now to be able to show something within it we have to figure out what we're mapping over for all of

1114
01:59:42,000 --> 01:59:44,000
these different icons that you can see on the deployed version such as click Text delete and so on they have a single

1115
01:59:48,000 --> 01:59:50,000
value that that is a string but this rectangle one has a subarray of

1116
01:59:54,000 --> 01:59:56,000
different elements we can show such as rectangle Circle and so on so let's first deal with that one we can do that

1117
02:00:02,000 --> 02:00:04,000
by checking if the sublist is an array so array do is array and then we pass

1118
02:00:08,000 --> 02:00:10,000
the item. value to it if it is array then we want to return

1119
02:00:14,000 --> 02:00:16,000
a special component called shapes menu

1120
02:00:19,000 --> 02:00:21,000
like this it is a self-closing component that's going to render all of our items

1121
02:00:25,000 --> 02:00:27,000
of course if we save it now it will break our app because we don't yet have this component but before we create it

1122
02:00:31,000 --> 02:00:33,000
let's just follow through with the rest of the structure if it's not an array then we can check if item question mark.

1123
02:00:38,000 --> 02:00:40,000
value is triple equal to comment if it is equal to comments then we can open up

1124
02:00:43,000 --> 02:00:45,000
a new turnery and return something known as a new thread this is also another not

1125
02:00:51,000 --> 02:00:53,000
self-closing component that will create and finally else if it's not a comment

1126
02:00:56,000 --> 02:00:58,000
and if it's not an array then we want to render a regular button for now I'm

1127
02:01:01,000 --> 02:01:03,000
going to leave it just a basic button later on we're going to turn it into a shat CN button so now we have to create

1128
02:01:09,000 --> 02:01:11,000
the skeletons of these few components and throughout the entire build of this application there are going to be many

1129
02:01:15,000 --> 02:01:17,000
components which are just simple drop- down menus and and once again I'm here to let you experience the build of the

1130
02:01:22,000 --> 02:01:24,000
figma Clone on your own but to save your time and to make your learning focused

1131
02:01:27,000 --> 02:01:29,000
on exactly what you need for building figma and not building drop downs or nav barss I went ahead and prepared a couple

1132
02:01:34,000 --> 02:01:36,000
of components for you so you can more easily follow along with the video a folder containing just a few of the

1133
02:01:40,000 --> 02:01:42,000
components we'll be using for this build will be in the Read Me Down Below download it unzip it and then drag and

1134
02:01:47,000 --> 02:01:49,000
drop it to your component folder folder it's going to be called new components and from it you can simply

1135
02:01:53,000 --> 02:01:55,000
extract all of the files into the components folder such as the comments folder the settings folder the shapes

1136
02:02:00,000 --> 02:02:02,000
menu that we need and then two of these components that we already have which is the left side bar which we can replace

1137
02:02:08,000 --> 02:02:10,000
and the nav bar which we can replace too so now that we have consumed all of

1138
02:02:14,000 --> 02:02:16,000
these components we just have to make it work together you notice we have a lot of warnings right here here with Imports

1139
02:02:20,000 --> 02:02:22,000
so let's fix those for you this part might already be fixed but in case it isn't we just have to make it say add

1140
02:02:28,000 --> 02:02:30,000
slash constants and add slash types this component called new thread we don't yet

1141
02:02:34,000 --> 02:02:36,000
have so we can create it by going to components then creating a new folder

1142
02:02:41,000 --> 02:02:43,000
called comments and then within the comments we can create a new component called new

1143
02:02:47,000 --> 02:02:49,000
thread. TS SX run RFC and an important thing is that this

1144
02:02:54,000 --> 02:02:56,000
one will accept children as it props as it will have some elements within it so

1145
02:02:59,000 --> 02:03:01,000
for now we can simply return children that's the only thing that we have to do for now and you can notice that it is a

1146
02:03:07,000 --> 02:03:09,000
named import so we can just say export const new thread instead of saying

1147
02:03:13,000 --> 02:03:15,000
export default so now if we do that all of the Imports are good besides the UI

1148
02:03:20,000 --> 02:03:22,000
button that's because this button is a Shad CN component so this is the first

1149
02:03:25,000 --> 02:03:27,000
time that I'm going to show you how to install a shaten component going back to shien's docs you can search for a button

1150
02:03:33,000 --> 02:03:35,000
component there we go just a simple button and you just need to copy this installation

1151
02:03:39,000 --> 02:03:41,000
command copy it and then within a new terminal paste it MPX shaten UI add

1152
02:03:47,000 --> 02:03:49,000
latest add button this command will ask you now whether you want to install it

1153
02:03:53,000 --> 02:03:55,000
and in a couple of seconds it will automatically be installed so if we fix this path right here you can see that

1154
02:04:00,000 --> 02:04:02,000
now it's properly getting the button and with that our Navar should be good but

1155
02:04:05,000 --> 02:04:07,000
we're not yet ready to see our application because of some of the other issues that we have in our left sidebar

1156
02:04:12,000 --> 02:04:14,000
so in our left sidebar we also have to fix the path or maybe it was already working for you and we have to move into

1157
02:04:19,000 --> 02:04:21,000
the shapes menu which is if you remember the component we started to work on here

1158
02:04:24,000 --> 02:04:26,000
we have to install another component from shaten which is the drop- down menu

1159
02:04:29,000 --> 02:04:31,000
so let's search for it drop down menu and the installation command is

1160
02:04:36,000 --> 02:04:38,000
everything the same but this time we add a drop- down menu instead of a button

1161
02:04:41,000 --> 02:04:43,000
while that is happening I'm just going to fix these Imports for me and everything should be good with the menu

1162
02:04:46,000 --> 02:04:48,000
as well besides this one small last thing and that is that if you go to the

1163
02:04:52,000 --> 02:04:54,000
shapes menu you can see that we're trying to get the value out of the active element and that is that if you

1164
02:04:58,000 --> 02:05:00,000
go to the shapes menu you can see that we're trying to get the value out of the active element right here and our shapes

1165
02:05:05,000 --> 02:05:07,000
menu is expecting it and our navbar is expecting it as well but we're not yet

1166
02:05:11,000 --> 02:05:13,000
passing it from the homepage so right here in the homepage where we're calling

1167
02:05:16,000 --> 02:05:18,000
our Navar we have to pass some additional props to it specifically now we're wondering about which element is

1168
02:05:24,000 --> 02:05:26,000
currently clicked from the nav bar so right at the top I can create a new use state property and I'm going to call it

1169
02:05:31,000 --> 02:05:33,000
active element set active element at the start set to an object that has a

1170
02:05:38,000 --> 02:05:40,000
name which is an empty string it has a value which is an empty string and it

1171
02:05:44,000 --> 02:05:46,000
has an icon which is also an empty string and we have to import use state from

1172
02:05:50,000 --> 02:05:52,000
react we can also Define the type as active element coming from types and now

1173
02:05:57,000 --> 02:05:59,000
that we have this active element we also have to do its counterpart which is a function called handle active element

1174
02:06:06,000 --> 02:06:08,000
which will allow us to choose different elements from the Navar so we get one parameter which is LM of a type active

1175
02:06:14,000 --> 02:06:16,000
element and within here we can set active element Two element that we pass

1176
02:06:20,000 --> 02:06:22,000
in and for now we can set the selected shape ref. current to be equal to LM

1177
02:06:28,000 --> 02:06:30,000
question mark. value and say as string there we go now we can pass the active

1178
02:06:35,000 --> 02:06:37,000
element and the handle active element into the nav bar so let's scroll down

1179
02:06:40,000 --> 02:06:42,000
and expand it and to it we can pass the active element equal to active element

1180
02:06:47,000 --> 02:06:49,000
just as a prop and as the second one we can pass the handle active element equal to handle

1181
02:06:55,000 --> 02:06:57,000
active element now moving into the Navar we are properly accepting all of those

1182
02:07:01,000 --> 02:07:03,000
props at the top later on there's going to be a few more and would you look at that the full Navar is now complete I

1183
02:07:08,000 --> 02:07:10,000
know we brought it in with some of the other components but it is looking great we can select different things for

1184
02:07:15,000 --> 02:07:17,000
example this is just the cursor and then we can click right here to open up the selector for different elements so now

1185
02:07:23,000 --> 02:07:25,000
if I click the circle and if I click right here it's going to do a circle if I select triangle it's going to do a

1186
02:07:30,000 --> 02:07:32,000
triangle you get the idea right we can do also rectangles as well as lines all

1187
02:07:37,000 --> 02:07:39,000
of this is working incredibly well but for now we just have a listener to be able to do the mouse down we cannot yet

1188
02:07:45,000 --> 02:07:47,000
move things although yeah we can but then it adds additional ones once we try to do something more complex so we're

1189
02:07:52,000 --> 02:07:54,000
just getting there we're doing things step by step the free drawing is also there but we can improve it still but

1190
02:07:59,000 --> 02:08:01,000
already this is huge work that we've done so far but now let's back to what

1191
02:08:05,000 --> 02:08:07,000
we have been working on for this entire time making this functional in real time Real-Time Feature

1192
02:08:11,000 --> 02:08:13,000
so now if I reload this page and if I start adding some rectangles right here

1193
02:08:16,000 --> 02:08:18,000
you can notice that they don't get added on the other screen of course we can

1194
02:08:22,000 --> 02:08:24,000
chat and say hi and even do some emojis as we learned before but unfortunately

1195
02:08:28,000 --> 02:08:30,000
the main part of our application which are the actual elements we're adding on the screen don't show up on the other

1196
02:08:35,000 --> 02:08:37,000
screen and for that we're going to utilize the last live blocks feature of the day called storage we're going to

1197
02:08:43,000 --> 02:08:45,000
store the session in real time that's going to keep track of all of these elements their positions sizes colors

1198
02:08:51,000 --> 02:08:53,000
and more and then we're going to replicate that session within a li blocks room so that both of these users

1199
02:08:58,000 --> 02:09:00,000
can share the same board to make that happen I'm going to close everything we have right now and start focusing on

1200
02:09:05,000 --> 02:09:07,000
implementing liveblock Storage liveblock storage realtime data store for

1201
02:09:10,000 --> 02:09:12,000
collaborative documents or in simple words it's basically a place where we can store documents or any kind of data

1202
02:09:18,000 --> 02:09:20,000
needed for realtime collaboration in our case we'll be showing fabricjs elements

1203
02:09:24,000 --> 02:09:26,000
that we want to show to everyone in our real-time room so if somebody is

1204
02:09:30,000 --> 02:09:32,000
creating an element like I am on this screen right here everybody that's in that room should be able to see me move

1205
02:09:36,000 --> 02:09:38,000
elements create them change colors and do everything else in real time not to

1206
02:09:42,000 --> 02:09:44,000
mention that we'll also soon be able to implement their history API that allows us to undo or redo some actions so with

1207
02:09:51,000 --> 02:09:53,000
that said how do we implement it let's clear this right here so we don't have too many elements and let's navigate to

1208
02:09:58,000 --> 02:10:00,000
our page. TSX right at the top of our page we'll use one hook that hook is

1209
02:10:06,000 --> 02:10:08,000
called use storage and that use storage Hook by live blocks allows us to store

1210
02:10:11,000 --> 02:10:13,000
data in key value stores and automatically sync it to other users or

1211
02:10:16,000 --> 02:10:18,000
in other words we create a subscription and updates to the selected pieces of data so let's say const canvas

1212
02:10:25,000 --> 02:10:27,000
objects which is going to be equal to the use storage hook coming from live

1213
02:10:30,000 --> 02:10:32,000
blocks config there we have a callback function where we get the root and then we can

1214
02:10:37,000 --> 02:10:39,000
say root. canvas objects this is just a selector so if you hover over it you can

1215
02:10:43,000 --> 02:10:45,000
see that we extract arbitrary data from liveblock storage using an arbit selector function so now we can navigate

1216
02:10:50,000 --> 02:10:52,000
to the use storage hook within live blocks config here is where it's being mentioned and if we scroll a bit up

1217
02:10:58,000 --> 02:11:00,000
where we can find the storage here is where we can add some fields that we need to keep track of so in this case we

1218
02:11:05,000 --> 02:11:07,000
can add a field called canvas objects which is going to be something

1219
02:11:11,000 --> 02:11:13,000
known as a live map and that's going to be of a type string and any this live

1220
02:11:19,000 --> 02:11:21,000
map has to be imported from the live blocks client it's just a data storage option so here we can see that the live

1221
02:11:26,000 --> 02:11:28,000
map is similar to JavaScript map that is synchronized to all clients it's

1222
02:11:31,000 --> 02:11:33,000
essentially key should be a string and value should match the Json structure so

1223
02:11:37,000 --> 02:11:39,000
now that we have this you can see that our use storage is no longer complaining because it knows that canvas objects now

1224
02:11:44,000 --> 02:11:46,000
is a readon map so now that we have these canvas objects object let's find a

1225
02:11:49,000 --> 02:11:51,000
way to actually update them and the way we do that using Glide blocks is by using the use mutation hook so we can

1226
02:11:56,000 --> 02:11:58,000
say const sync shape in storage so we sync the shape

1227
02:12:03,000 --> 02:12:05,000
that we created and we call the use mutation hook coming from Li blocks config where

1228
02:12:11,000 --> 02:12:13,000
we can immediately destructure the storage like this and then as the second

1229
02:12:17,000 --> 02:12:19,000
parameter we get back the object and finally we can open up a function block

1230
02:12:23,000 --> 02:12:25,000
now let's just ensure that this is good we have the use mutation we destructure

1231
02:12:28,000 --> 02:12:30,000
the storage and then as the second parameter to that use mutation we put the object oh looks like I closed this

1232
02:12:35,000 --> 02:12:37,000
one too soon right here is a comma and then after we're closing it so I think we are good now but we have to close one

1233
02:12:42,000 --> 02:12:44,000
more right here and then we must not to also forget to pass a dependency array

1234
02:12:48,000 --> 02:12:50,000
to the use mutation hook if you open it up it's going to say that first you create a callback function that lets you

1235
02:12:54,000 --> 02:12:56,000
mutate a live block State the first argument gets passed into your callback with mutation context and here they give

1236
02:13:01,000 --> 02:13:03,000
you an example like you can change the color of something with the field layers you can also delete layers and do some

1237
02:13:09,000 --> 02:13:11,000
other actions like in this case we simply want to first check if we have an object we're working with so if we don't

1238
02:13:16,000 --> 02:13:18,000
have an object we simply return but then if we do have an object we want to destructure its object ID by

1239
02:13:24,000 --> 02:13:26,000
destructuring object ID from the object then we want to turn the fabric object

1240
02:13:30,000 --> 02:13:32,000
into Json format so that we can store it in the key value store by saying const

1241
02:13:35,000 --> 02:13:37,000
shape data is equal to object. to

1242
02:13:44,000 --> 02:13:46,000
Json then we get the shape data. object ID and we set it to object ID so

1243
02:13:51,000 --> 02:13:53,000
essentially once we convert it into Json we make sure that the object ID of the adjacent object is set to the correct

1244
02:13:58,000 --> 02:14:00,000
object ID then we need to get canvas objects by saying const canvas

1245
02:14:03,000 --> 02:14:05,000
objects and that's equal to storage. getet Canvas objects so essentially

1246
02:14:10,000 --> 02:14:12,000
we're trying to pull existing objects from the liveblock storage finally we

1247
02:14:16,000 --> 02:14:18,000
call the canvas objects and call the do set method on it it's

1248
02:14:22,000 --> 02:14:24,000
provided to us by Li blocks and it allows us to set a value so now we can set the object ID of the shape we're

1249
02:14:29,000 --> 02:14:31,000
syncing and we can make it equal to the shape data that we're passing over and

1250
02:14:34,000 --> 02:14:36,000
this will sync the shape in storage now the question is where do we use this

1251
02:14:40,000 --> 02:14:42,000
sync shape in storage well we'll have to use it in many places such as when moving elements when deleting them when

1252
02:14:48,000 --> 02:14:50,000
clearing out the entire canvas but first let's call it on move so far we have

1253
02:14:53,000 --> 02:14:55,000
developed one part which is this mouse down but now below the mouse down we

1254
02:15:00,000 --> 02:15:02,000
also want to develop the mouse move so let's duplicate the canvas that on Mouse

1255
02:15:05,000 --> 02:15:07,000
down make it to Mouse move and then handle canvas Mouse move which is

1256
02:15:12,000 --> 02:15:14,000
another utility function coming from lib canvas to it we can pass the options the

1257
02:15:19,000 --> 02:15:21,000
canvas the is drawing the shape ref selected shape ref as well and finally

1258
02:15:24,000 --> 02:15:26,000
we can pass the sync shape in storage so after moving it this function will take

1259
02:15:30,000 --> 02:15:32,000
this sync shape in storage and it will call it with the specified

1260
02:15:36,000 --> 02:15:38,000
element so now if I go back and create a new element like a

1261
02:15:42,000 --> 02:15:44,000
rectangle we get an error let's see what the error is saying canot 3 properties

1262
02:15:48,000 --> 02:15:50,000
of undefined reading set under cannabis objects so now if we go back right here

1263
02:15:54,000 --> 02:15:56,000
to where we're calling that sync shape and storage it's complaining that it cannot

1264
02:16:00,000 --> 02:16:02,000
get the canvas objects there's a couple of reasons why this might be but let's

1265
02:16:06,000 --> 02:16:08,000
take it step by step first I want to move into the room. TSX file and here we

1266
02:16:12,000 --> 02:16:14,000
have to do some modifications as you can see we're defining the initial presence right here and and it wouldn't be bad to

1267
02:16:19,000 --> 02:16:21,000
define the cursor as null at the start to define the cursor Coler as null at

1268
02:16:25,000 --> 02:16:27,000
the start as well as defining the editing text as null at the start as well not

1269
02:16:32,000 --> 02:16:34,000
related to storage but again it's good to set those default values now we can

1270
02:16:37,000 --> 02:16:39,000
define something that's more important for the storage which is a new property below initial presence called initial

1271
02:16:45,000 --> 02:16:47,000
storage and that's going to be equal to an object that's going to have the canvas objects in there equal to a new

1272
02:16:53,000 --> 02:16:55,000
live map which is coming from live blocks client and we call it as a

1273
02:16:58,000 --> 02:17:00,000
function or as a Constructor in this case rather so now that we do this we

1274
02:17:04,000 --> 02:17:06,000
have some initial storage to work with and while we're here I just noticed that we're using the old loader so we can

1275
02:17:10,000 --> 02:17:12,000
immediately call our new self-closing loader by importing it from components

1276
02:17:15,000 --> 02:17:17,000
loader now if we load you'll see this nice looking loader at the cent of the

1277
02:17:21,000 --> 02:17:23,000
screen and we can try adding a new element as you can see now we're not

1278
02:17:26,000 --> 02:17:28,000
getting any errors which is much better than before but this is definitely some kind of a weird situation that we're

1279
02:17:33,000 --> 02:17:35,000
having right here it almost feels like we're doing some kind of a Fibonacci Sequence or like a golden ratio with

1280
02:17:40,000 --> 02:17:42,000
these cubes the way that they end one on top of another so before we continue

1281
02:17:46,000 --> 02:17:48,000
doing this we might need to fix up our on Mouse down or on Mouse move events so

1282
02:17:54,000 --> 02:17:56,000
let me go back to the page and let's continue writing all of our listeners so

1283
02:18:01,000 --> 02:18:03,000
in this case I'm guessing that we're missing the mouse up so I'm going to take this and duplicate it one time

1284
02:18:08,000 --> 02:18:10,000
below modify to Mouse up we also need to pass it the options the canvas the is

1285
02:18:15,000 --> 02:18:17,000
drawing we're providing the shape breath the selected shape gra the sync shape in storage and also we have to provide

1286
02:18:21,000 --> 02:18:23,000
another function which we created before called set active element and we pass

1287
02:18:28,000 --> 02:18:30,000
all of those to handle Mouse up like this of course let's spell it properly

1288
02:18:35,000 --> 02:18:37,000
handle canvas Mouse up there we go in this case we don't need the options and

1289
02:18:43,000 --> 02:18:45,000
we're missing something known as an active object ref this ref is the one

1290
02:18:49,000 --> 02:18:51,000
that we didn't create yet so we can create it right here on top by saying const active object ref is equal to use

1291
02:18:57,000 --> 02:18:59,000
ref fabric object at the start set to null and the reason why we're passing it into this function if we look into the

1292
02:19:03,000 --> 02:19:05,000
handle Mouse up you'll see that we are resetting the active object ref to null

1293
02:19:09,000 --> 02:19:11,000
and the reason why we need this active object in the first place is so that once we click on a specific element we

1294
02:19:15,000 --> 02:19:17,000
know which one is currently select selected so with that said we're now done with the handle Mouse up with the

1295
02:19:22,000 --> 02:19:24,000
handle Mouse move as well as the handle Mouse down and now would you look at

1296
02:19:28,000 --> 02:19:30,000
that we can actually create one element it doesn't create many more once we do

1297
02:19:33,000 --> 02:19:35,000
that just one or if you want to you can create more and now we actually have the mouse up and mouse down which means that

1298
02:19:40,000 --> 02:19:42,000
it doesn't just create a 100 by 100 pixels rectangle you can actually drag it around to create different sizes of

1299
02:19:48,000 --> 02:19:50,000
those rectangles and you can move them around and they all look great there we

1300
02:19:54,000 --> 02:19:56,000
go that's a little winky face for you for coming this far into the video now

1301
02:20:00,000 --> 02:20:02,000
with this in mind there's one question that remains and that is is this synced

1302
02:20:07,000 --> 02:20:09,000
to the other browser so let's check it out if you reload the screen and reload

1303
02:20:12,000 --> 02:20:14,000
this one too besides that great looking loading you can see that the ele elements are actually not getting synced

1304
02:20:19,000 --> 02:20:21,000
yet so there's still some work we need to do before we can actually see the elements on the other screen and what we

1305
02:20:27,000 --> 02:20:29,000
have to do is rerender the canvas every time that there are changes in our how

1306
02:20:33,000 --> 02:20:35,000
are they call canvas objects we have to rerender our canvas to show those new changes on the other screen so to render

1307
02:20:41,000 --> 02:20:43,000
our canvas we can just add a use effect and this use effect has a callback fun

1308
02:20:47,000 --> 02:20:49,000
function as we know and will rerun whenever the canvas objects change

1309
02:20:54,000 --> 02:20:56,000
inside of here we can call the render canvas function coming from lib canvas

1310
02:21:00,000 --> 02:21:02,000
and to it we can pass a couple of arguments to see what parameters it wants we can control click into it and

1311
02:21:08,000 --> 02:21:10,000
we can see that we need to pass the fabric ref the canvas objects and the active object ref what we do with it is

1312
02:21:16,000 --> 02:21:18,000
we simply Liv all of the objects which basically removes them from the canvas I

1313
02:21:22,000 --> 02:21:24,000
really took my time to nicely document and comment out all of these features so in case you want to dive deeper into how

1314
02:21:28,000 --> 02:21:30,000
all of this works so you can see it all right here so first we clear the canvas and then we render all of the objects

1315
02:21:36,000 --> 02:21:38,000
from the storage that's it that's the magic of how this works so if we go back

1316
02:21:42,000 --> 02:21:44,000
we need to pass it the fabric R we need to pass it the canvas

1317
02:21:48,000 --> 02:21:50,000
objects and finally the active object ref if we do that and save

1318
02:21:55,000 --> 02:21:57,000
it we can see all of these already after a refresh which is pretty amazing but

1319
02:22:01,000 --> 02:22:03,000
now we might have a bit too many to be able to see what's happening let's kind of move them a bit down on the screen oh

1320
02:22:07,000 --> 02:22:09,000
and would you look at that we have too many on the other screen as well that is great but just so we don't have too many

1321
02:22:14,000 --> 02:22:16,000
right now while we're working on it and while we don't implement the clear function we can go back to the light

1322
02:22:20,000 --> 02:22:22,000
Block's dashboard and clear the storage there so if you go back to your project

1323
02:22:25,000 --> 02:22:27,000
and then rooms you'll be able to see one room that we have and then you can go to that specific room and you can see the

1324
02:22:33,000 --> 02:22:35,000
canvas objects storage how cool is that what we can do here is just delete it

1325
02:22:39,000 --> 02:22:41,000
and that way the storage for this specific room will be deleted so now going back it's completely empty and we

1326
02:22:47,000 --> 02:22:49,000
can reload the page with that in mind if I now create an element right here you

1327
02:22:52,000 --> 02:22:54,000
can see how cool this is we can automatically see it being created on the other screen in real time and I was

1328
02:23:00,000 --> 02:23:02,000
just about to say that the moving works as well but if you move it around you can see that right now everything is

1329
02:23:07,000 --> 02:23:09,000
being synced besides the moving part so to do that as well we just have to add

1330
02:23:12,000 --> 02:23:14,000
another listener such as canvas.on object modified we again have the Callback

1331
02:23:20,000 --> 02:23:22,000
function of options and then we can call a new handle canvas object modified and

1332
02:23:28,000 --> 02:23:30,000
to it we provide the options as well as sync shape in

1333
02:23:36,000 --> 02:23:38,000
storage if we now save this and collapse it if we move the element around you'll

1334
02:23:42,000 --> 02:23:44,000
be able to see it move as well and that's exactly what happens this is

1335
02:23:48,000 --> 02:23:50,000
great you can now resize the shapes modify them create a lot of stuff in

1336
02:23:53,000 --> 02:23:55,000
this single canvas but this is still only like a simple mirror board or

1337
02:24:00,000 --> 02:24:02,000
something like that like a whiteboard but this is a real figma clone and we

1338
02:24:05,000 --> 02:24:07,000
will provide many more additional functionalities on top of just creating

1339
02:24:11,000 --> 02:24:13,000
some elements and moving some blocks around will allow you to create real interfaces even do free form drawing and

1340
02:24:19,000 --> 02:24:21,000
upload images more that soon but before that we cannot have too many elements on

1341
02:24:25,000 --> 02:24:27,000
the screen so what we need to do is implement the delete the delete and

1342
02:24:31,000 --> 02:24:33,000
clear functionalities and to implement the delete or the reset we have to

1343
02:24:36,000 --> 02:24:38,000
connect it to the delete and reset buttons on the navbar so if we go right

1344
02:24:42,000 --> 02:24:44,000
here to this SV bar you'll see that we are already passing the handle Act active element and that handle active

1345
02:24:50,000 --> 02:24:52,000
element is being used right here on this button handle active element with a

1346
02:24:57,000 --> 02:24:59,000
specific item so it's going to trigger a specific action but now it's up to us to

1347
02:25:03,000 --> 02:25:05,000
actually Implement which action does this handle active element do right now

1348
02:25:09,000 --> 02:25:11,000
it's simply setting the active element and setting the selected shape ref current to that element's value but now

1349
02:25:16,000 --> 02:25:18,000
now within here we also want to implement a switch statement where the key is the element

1350
02:25:23,000 --> 02:25:25,000
value and within it we want to check if the case is reset in which case we want

1351
02:25:30,000 --> 02:25:32,000
to delete all shapes from the canvas so here we can call the delete all shapes

1352
02:25:37,000 --> 02:25:39,000
which is a special mutation function that we have to create right above the handle active element so we can say

1353
02:25:44,000 --> 02:25:46,000
const delete all shapes is equal to and once again we're going

1354
02:25:49,000 --> 02:25:51,000
to use the use mutation hook coming from Li blocks where we get the

1355
02:25:57,000 --> 02:25:59,000
storage and then if I manage to close it properly this time we need to pass we

1356
02:26:02,000 --> 02:26:04,000
need to open up a function block and then pass an empty dependency

1357
02:26:07,000 --> 02:26:09,000
array at the end this is how we do use mutations in Li blocks so right within

1358
02:26:13,000 --> 02:26:15,000
here we need to get the current canvas object object from the storage by saying

1359
02:26:19,000 --> 02:26:21,000
const canvas objects is equal to storage. getet Canvas

1360
02:26:26,000 --> 02:26:28,000
object then if the story doesn't exist or it's empty so if no canvas objects or

1361
02:26:33,000 --> 02:26:35,000
even if it's empty right now right here canvas objects we can call the do size

1362
02:26:40,000 --> 02:26:42,000
property on it since it's a map is triple equal to zero we can simply return true as in deleted then if that

1363
02:26:49,000 --> 02:26:51,000
is not the case we can map over all of the canvas objects by using the four off

1364
02:26:56,000 --> 02:26:58,000
property so for const we destructure the key and the value of canvas

1365
02:27:04,000 --> 02:27:06,000
objects do entries like this and then we

1366
02:27:09,000 --> 02:27:11,000
simply call the canvas objects. delete and then we delete a

1367
02:27:16,000 --> 02:27:18,000
specific key or in this case all of the keys finally we want to return canvas

1368
02:27:24,000 --> 02:27:26,000
objects that size is triple equal to zero this will return true if the store

1369
02:27:30,000 --> 02:27:32,000
is indeed empty so now on the reset switch case we're calling the delete all

1370
02:27:36,000 --> 02:27:38,000
shapes there's also an additional thing we have to do which is not only clear them from live block storage but also

1371
02:27:42,000 --> 02:27:44,000
clear them from the existing canvas by saying fabric ref. current

1372
02:27:47,000 --> 02:27:49,000
do CLE and we can set active element to be equal to default nav

1373
02:27:56,000 --> 02:27:58,000
element coming from constants and then we break it so this is it for the reset

1374
02:28:02,000 --> 02:28:04,000
and this default nav element is just basically the select that means that if we delete everything we'll be able to

1375
02:28:08,000 --> 02:28:10,000
just move to the select so we can continue moving some stuff so what do you say should we test reset reset is

1376
02:28:15,000 --> 02:28:17,000
connected to this button right here here that has the arrow following its tail so if I click it it's gone and on the other

1377
02:28:23,000 --> 02:28:25,000
screen it's gone as well this is great

1378
02:28:28,000 --> 02:28:30,000
oh but we have some kind of a bug where on the current screen we can see that the elements reappeared let me just

1379
02:28:34,000 --> 02:28:36,000
reload one more time on both browsers it looks like it's empty if I create a new rectangle it

1380
02:28:43,000 --> 02:28:45,000
works it moves and I can clear that's good if we need to fix some bugs

1381
02:28:49,000 --> 02:28:51,000
we're going to fix them in the future for now it's looking good now alongside reset what do you say that we also

1382
02:28:56,000 --> 02:28:58,000
implement the delete functionality so right here we can add another case in

1383
02:29:02,000 --> 02:29:04,000
this case a case of delete and call the handle delete

1384
02:29:08,000 --> 02:29:10,000
functionality which is coming from our utility function from lib key events we

1385
02:29:14,000 --> 02:29:16,000
can call it like so to it we need to pass the fabric ref.

1386
02:29:20,000 --> 02:29:22,000
current as any just for typescript and as the second parameter we have to pass

1387
02:29:26,000 --> 02:29:28,000
the similar thing what we're calling here which is a mutation in this case to delete all shapes but in this case to

1388
02:29:33,000 --> 02:29:35,000
just delete a single shape from Storage delete shape from

1389
02:29:39,000 --> 02:29:41,000
storage and now we can create that function right here below delete all

1390
02:29:45,000 --> 02:29:47,000
shapes cons delete shape from Storage it's also a

1391
02:29:51,000 --> 02:29:53,000
mutation that looks like this that accepts the storage which is destructured and the object

1392
02:29:58,000 --> 02:30:00,000
ID we have to close it like this and also add the dependency array and then

1393
02:30:04,000 --> 02:30:06,000
within it we simply want to say const canvas objects is equal to storage. getet

1394
02:30:13,000 --> 02:30:15,000
Canvas objects to First retrieve them or to retrieve that specific one and then

1395
02:30:18,000 --> 02:30:20,000
say canvas objects. delete the object ID that's it

1396
02:30:26,000 --> 02:30:28,000
that's how we delete it now we're passing that to our case of delete and

1397
02:30:31,000 --> 02:30:33,000
once we delete it we can also set active element to the default nav element which

1398
02:30:37,000 --> 02:30:39,000
is Select once again and it looks like I have an extra column right here after the case we are back within our app we

1399
02:30:45,000 --> 02:30:47,000
can create a new shape let's do something like a circle this time and let's try to delete it I can

1400
02:30:54,000 --> 02:30:56,000
click on it and click delete and it looks like it doesn't get deleted let's

1401
02:31:01,000 --> 02:31:03,000
see what else can we do to make it happen I think that there's a special function in fabric.js that allows us to

1402
02:31:08,000 --> 02:31:10,000
dispose of a canvas so it's a method that clears all the events and listeners

1403
02:31:15,000 --> 02:31:17,000
and everything and allows us to kind of put it to trash here is a documentation page for that element not the prettiest

1404
02:31:22,000 --> 02:31:24,000
one I know but it's a function called dispose that essentially clears a canvas element and removes all of its event

1405
02:31:31,000 --> 02:31:33,000
listeners so without it it's going to be hard to properly delete an element so if

1406
02:31:36,000 --> 02:31:38,000
we go to this use effect where we initialize the canvas and its listeners

1407
02:31:42,000 --> 02:31:44,000
right here we can return as we usually do in react to to do some cleanup and we

1408
02:31:48,000 --> 02:31:50,000
can call the canvas. dispose right here this will help with the deletion so if

1409
02:31:54,000 --> 02:31:56,000
we go right here if we create a new element and now if we click delete after

1410
02:32:00,000 --> 02:32:02,000
selecting it it actually delet it so we can open up the second browser maybe we

1411
02:32:05,000 --> 02:32:07,000
can even create some stuff right here and let's try to delete

1412
02:32:10,000 --> 02:32:12,000
one that works let's try to create two one

1413
02:32:17,000 --> 02:32:19,000
and let's do a triangle there we go and let's try to

1414
02:32:22,000 --> 02:32:24,000
now clean up everything that works as well so now not only we can have the

1415
02:32:29,000 --> 02:32:31,000
selection right here we have the rectangle circle triangle line and free drawing as well and we can also delete

1416
02:32:36,000 --> 02:32:38,000
individual elements or reset the entire canvas we are getting there we're just

1417
02:32:43,000 --> 02:32:45,000
building features of the features now that we have the live function functionalities and now that the entire

1418
02:32:49,000 --> 02:32:51,000
canvas is set up I think it's been quite some time until we have seen both of our

1419
02:32:55,000 --> 02:32:57,000
sidebars so what do you say that I extend this just a bit so we can see our sidebars especially I'm wondering about History Feature

1420
02:33:03,000 --> 02:33:05,000
the left sidebar within here we'll show all of the elements that we are creating

1421
02:33:09,000 --> 02:33:11,000
in our browser such as this nice looking shape and also all of the other elements

1422
02:33:14,000 --> 02:33:16,000
circles rectangles pieces of text doesn't matter they should all show up

1423
02:33:20,000 --> 02:33:22,000
right here and doing that couldn't be easier the only thing we have to do is

1424
02:33:26,000 --> 02:33:28,000
go back to our page which is where we just were and right here we have to pass

1425
02:33:32,000 --> 02:33:34,000
the canvas objects remember the canvas objects are all of the objects we're storing in live blocks storage and we

1426
02:33:40,000 --> 02:33:42,000
have to pass them to our left sidebar as a prop as a matter of fact we can look

1427
02:33:45,000 --> 02:33:47,000
into the left sidebar and see that it's accepting all shapes which is an array of shapes so the only thing we have to

1428
02:33:53,000 --> 02:33:55,000
do is say all shapes is equal to array.

1429
02:33:58,000 --> 02:34:00,000
from and then we pass the canvas objects the reason why we have to do array from

1430
02:34:04,000 --> 02:34:06,000
is can you think about it it's because the canvas objects are a map a special

1431
02:34:09,000 --> 02:34:11,000
structure which is similar to array but not exactly the same so this way we

1432
02:34:14,000 --> 02:34:16,000
create an array from the map now if we save this and expand our browser you'll

1433
02:34:22,000 --> 02:34:24,000
be able to see something truly great we can see our layers you can hover over them and see the rectangle Circle and

1434
02:34:29,000 --> 02:34:31,000
more and as you move them they stay the same but as you create new elements like

1435
02:34:36,000 --> 02:34:38,000
a triangle you can see how it shows at the bottom of that list so if you keep creating new elements let's add a line

1436
02:34:44,000 --> 02:34:46,000
you can see how also it appears below and you can keep doing that indefinitely

1437
02:34:49,000 --> 02:34:51,000
all of the elements are going to appear at the bottom so you have a clear history list order of all the elements

1438
02:34:56,000 --> 02:34:58,000
you've added and talking about history wouldn't Undo & Redo

1439
02:35:01,000 --> 02:35:03,000
it be great if we implemented undo and redo features allowing us to be able to

1440
02:35:07,000 --> 02:35:09,000
go one step back or one step forward as you can do in every single modern

1441
02:35:13,000 --> 02:35:15,000
whiteboarding designing or documenting app like word figma or even Meo or

1442
02:35:20,000 --> 02:35:22,000
figjam so let's Implement undo and redo features and I noticed that sometimes I

1443
02:35:25,000 --> 02:35:27,000
get this error with the width the canvas width remember we said that we're going to fix that later on so don't worry

1444
02:35:32,000 --> 02:35:34,000
about it too much now live blocks makes implementing undo and redo functionalities super simple the only

1445
02:35:40,000 --> 02:35:42,000
thing you have to do is use their hooks so right here at the top we can say

1446
02:35:46,000 --> 02:35:48,000
const undo is equal to use undo coming from Li blocks config that's a hook and

1447
02:35:53,000 --> 02:35:55,000
we can do the same thing for redo so we can say cons to redo is equal to use

1448
02:35:59,000 --> 02:36:01,000
redo just like that and of course we need to import both of these from Li

1449
02:36:04,000 --> 02:36:06,000
blocks config these hooks allow us to do special mutations the only thing we have to do now is call them and the question

1450
02:36:12,000 --> 02:36:14,000
is when will we call this mutation we can do it where we have all of the other event listeners on the canvas but this

1451
02:36:19,000 --> 02:36:21,000
one will be just a tiny bit different as we have the resized listener right here

1452
02:36:24,000 --> 02:36:26,000
we can add a similar one window addevent listener and this one

1453
02:36:31,000 --> 02:36:33,000
will be listening for the key down event where it's going to get the specific key

1454
02:36:37,000 --> 02:36:39,000
that we pressed and then we can call the handle key down coming from lib key events and

1455
02:36:45,000 --> 02:36:47,000
to it we can pass the event that we clicked we can pass the canvas which is a ref to the fabric ref. current we can

1456
02:36:54,000 --> 02:36:56,000
pass the undo and redo mutations as well as sync shape in storage so we can

1457
02:37:00,000 --> 02:37:02,000
properly sync it and then also delete shape from Storage which we created before in this case you can see it's

1458
02:37:06,000 --> 02:37:08,000
complaining about the type so in all of these options as well as the event we

1459
02:37:13,000 --> 02:37:15,000
can just say any for now that's that way it's going to be good and in this case we don't even need the options great so

1460
02:37:21,000 --> 02:37:23,000
to figure out exactly how this works let's navigate into the handle key down and see what we're doing with this event

1461
02:37:28,000 --> 02:37:30,000
or these mutations if you scroll down you can see that if we press a key such

1462
02:37:34,000 --> 02:37:36,000
as a control key or command key and then a letter C it will copy it if we pressed

1463
02:37:40,000 --> 02:37:42,000
command or control+ V then it will paste it but in this case we're wondering about Z or Y in which cases we undo or

1464
02:37:51,000 --> 02:37:53,000
redo so I just created this special key events function which figures out which key you pressed and then based off of

1465
02:37:57,000 --> 02:37:59,000
that it does a specific mutation in this case we're simply calling the undo redo functions provided to us by lightblocks

1466
02:38:06,000 --> 02:38:08,000
so now if we save this and collapse it we can see if it actually works I

1467
02:38:11,000 --> 02:38:13,000
expanded my browser and now I can see 16 errors so now for sure I know why this

1468
02:38:17,000 --> 02:38:19,000
area is happening it's happening when we resize the width of the canvas we're

1469
02:38:22,000 --> 02:38:24,000
going to fix this right away but before that let's clear out the canvas and let's test out our apps new

1470
02:38:29,000 --> 02:38:31,000
functionalities I'm going to create a rectangle just by clicking right here and maybe let's add a few more things

1471
02:38:36,000 --> 02:38:38,000
like a circle and let's also add a triangle now we have those three

1472
02:38:41,000 --> 02:38:43,000
different layers and if I delete some of the elements by pressing on them and clicking here now let's say that we

1473
02:38:48,000 --> 02:38:50,000
didn't want to delete them and we want to get our elements back you can press contrl Z and it will revert all of the

1474
02:38:54,000 --> 02:38:56,000
actions what you can also do is maybe resize them like this so now if I press

1475
02:39:00,000 --> 02:39:02,000
contrl Z it goes back you can do literally anything you want such as moving the elements as well

1476
02:39:06,000 --> 02:39:08,000
which works incredibly well so let's try to create something like maybe a couple

1477
02:39:12,000 --> 02:39:14,000
of shapes right here and put them together let me even change the size of this one right here and put this one

1478
02:39:19,000 --> 02:39:21,000
here there we go that's looking great and now we can use a control Z to get

1479
02:39:25,000 --> 02:39:27,000
back and we can even use control or command y to go fully back to our

1480
02:39:31,000 --> 02:39:33,000
creation this means that everything is working well you can delete the elements you can get back and it just works great

1481
02:39:39,000 --> 02:39:41,000
that was undo redo and history and there's one small bug you might have noticed before when creating any

1482
02:39:46,000 --> 02:39:48,000
elements randomly a rectangle would appear That's because if you remember correctly if you go to the page. TSX the

1483
02:39:53,000 --> 02:39:55,000
top of it before we were playing a bit with the selected shape ref by default

1484
02:39:59,000 --> 02:40:01,000
setting it to rectangle in this case it must be set to null so this will fix any

1485
02:40:04,000 --> 02:40:06,000
kind of small box that we've had in our application and make it even more polished with that said we now have the

1486
02:40:11,000 --> 02:40:13,000
left sidebar with complete history and the list of all of the elements as well

1487
02:40:16,000 --> 02:40:18,000
as undo redo functionalities one thing that believe it or not works out of the box is our text element field so you can

1488
02:40:24,000 --> 02:40:26,000
click on the text click right here and you can immediately enter text elements

1489
02:40:30,000 --> 02:40:32,000
and just write some stuff for your website for example this is the website hero section you can say welcome and you

1490
02:40:38,000 --> 02:40:40,000
can now include this in your design elements most often that's going to be rectangles so that's going to look

1491
02:40:44,000 --> 02:40:46,000
something like this and soon enough we'll also add colors so that you can overlay elements on top of another to

1492
02:40:50,000 --> 02:40:52,000
make complete designs but let me quickly explain how exactly we made the text elements work the way it works is that

1493
02:40:58,000 --> 02:41:00,000
we simply set the selected shape R to text once that happens we're calling

1494
02:41:03,000 --> 02:41:05,000
this create specific shape function and into it we pass the shape type in this

1495
02:41:08,000 --> 02:41:10,000
case the shape type is the text so we call the create text function and this

1496
02:41:14,000 --> 02:41:16,000
simply creates a new fabric text element gives it a position a fill font family

1497
02:41:20,000 --> 02:41:22,000
and anything else you might want this is more fabric related but in case you want to dive deeper into how we create

1498
02:41:27,000 --> 02:41:29,000
different elements like circles rectangles texts and more you can see it all within this shapes file even how we

1499
02:41:34,000 --> 02:41:36,000
create lines circles and triangles with that said the only part we're missing

1500
02:41:40,000 --> 02:41:42,000
right now are the images we want to be able to upload images to make your figma Images

1501
02:41:46,000 --> 02:41:48,000
app stand out from all of the other whiteboarding tools available right now

1502
02:41:51,000 --> 02:41:53,000
so how do we do that first we have to create yet another ref const image input

1503
02:41:59,000 --> 02:42:01,000
ref is equal to use ref it's going to be of a type HTML 5 or rather HTML input

1504
02:42:07,000 --> 02:42:09,000
element that at the start can be set to null there we go that's good this image

1505
02:42:14,000 --> 02:42:16,000
input ref will be a reference to the input element that we'll use to upload an image to the canvas we want to upload

1506
02:42:21,000 --> 02:42:23,000
the image automatically once we click on the image icon in the Navar so we're going to use this icon to trigger the

1507
02:42:28,000 --> 02:42:30,000
event on the input without actually showing the input that's exciting right

1508
02:42:34,000 --> 02:42:36,000
so to do it we can scroll up B down to where we have our switch statement where we have the reset delete and more in

1509
02:42:42,000 --> 02:42:44,000
this case we want to add another case and and that's going to be image we want

1510
02:42:47,000 --> 02:42:49,000
to upload an image to the canvas so first we want to trigger The Click event

1511
02:42:53,000 --> 02:42:55,000
on the input element by calling the image input ref. current question mark. click so

1512
02:43:00,000 --> 02:43:02,000
it's like you clicked on the form then we want to set the drawing mode to false

1513
02:43:06,000 --> 02:43:08,000
so is drawing. current is equal to false because we're not drawing we're uploading the image and then you can

1514
02:43:12,000 --> 02:43:14,000
check if fabric ref. current meaning if it exists then we want to disable the

1515
02:43:20,000 --> 02:43:22,000
drawing mode while we're uploading the image so we can say fabric ref that current that is drawing mode is equal to

1516
02:43:28,000 --> 02:43:30,000
false and finally we just break it now that we have this image input ref and

1517
02:43:33,000 --> 02:43:35,000
we're doing something with it let's go ahead and pass it to our navbar because that's where we want to call it from

1518
02:43:40,000 --> 02:43:42,000
image input ref alongside that we also want to pass an additional thing and

1519
02:43:46,000 --> 02:43:48,000
that is how do we actually handle the image upload we can create a new function or a new Handler called handle

1520
02:43:53,000 --> 02:43:55,000
image upload which is equal to a callback function where we get the event

1521
02:43:59,000 --> 02:44:01,000
and then with that event first we stop propagation this prevents the default

1522
02:44:04,000 --> 02:44:06,000
behavior of the input element and then we call the handle image upload coming

1523
02:44:10,000 --> 02:44:12,000
from lib shapes to it we need to pass the file which which is e.

1524
02:44:17,000 --> 02:44:19,000
target. files Z so the first file that we upload we want to pass the canvas

1525
02:44:24,000 --> 02:44:26,000
which is just fabric ref like this as type any we want to pass the shape ref

1526
02:44:30,000 --> 02:44:32,000
so we know what we're creating and sync shape in storage great now all of this

1527
02:44:37,000 --> 02:44:39,000
is being passed to our Navar so let's go into it and here you can see that we are

1528
02:44:42,000 --> 02:44:44,000
passing some information such as the image input ref and handle image upload

1529
02:44:48,000 --> 02:44:50,000
into the shapes menu so let's dive further to see what shapes menu is doing with it if we scroll down you'll see

1530
02:44:55,000 --> 02:44:57,000
that we have this little input right here that we will never actually be able to see but it is there it just has a

1531
02:45:03,000 --> 02:45:05,000
class name of hidden but what's happening is that we're giving it the image input ref and then it gets clicked

1532
02:45:10,000 --> 02:45:12,000
programmatically from our code once you click on the icon at top and it allows us to upload the image what happens then

1533
02:45:18,000 --> 02:45:20,000
is that this handle image upload function from shapes is going to just get a new file reader it's going to load

1534
02:45:25,000 --> 02:45:27,000
that image to our fabric canvas from the URL once uploaded we're going to set

1535
02:45:31,000 --> 02:45:33,000
some basic width and height and then add it to the current canvas and finally syn

1536
02:45:36,000 --> 02:45:38,000
that shape to our storage as we would with any other element pretty cool right

1537
02:45:42,000 --> 02:45:44,000
so let's see if it actually works I will now clear our entire canvas and go to

1538
02:45:48,000 --> 02:45:50,000
shapes and click image it then prompted me to select an image I selected one and

1539
02:45:54,000 --> 02:45:56,000
then instead of an image I got an error in here it looks like I misspelled the

1540
02:45:59,000 --> 02:46:01,000
target so hopefully you didn't do that it was just me but let's fix it there we

1541
02:46:05,000 --> 02:46:07,000
go e Target files and let's give it another shot there we go image is there and it

1542
02:46:14,000 --> 02:46:16,000
acts like a real element that you can move around the screen and even resize

1543
02:46:19,000 --> 02:46:21,000
notice that if you pull it from the sides its aspect ratio changes but if you pull it from the corners then it

1544
02:46:27,000 --> 02:46:29,000
just enlarges and remains in the same correct aspect ratio in this case I

1545
02:46:33,000 --> 02:46:35,000
picked the illustration from our ultimate NEX js14 course if you haven't already definitely check it out if

1546
02:46:39,000 --> 02:46:41,000
you're watching this video you are just the type of the developer that might appreciate diving a bit deeper into what

1547
02:46:46,000 --> 02:46:48,000
nextjs offers we dive into details of using Tailwind figma typescript chat GP

1548
02:46:53,000 --> 02:46:55,000
API even clerk for authentication and much more but with that said let's

1549
02:46:58,000 --> 02:47:00,000
celebrate the fact that we can now successfully upload all different kinds of elements to our app including text as

1550
02:47:05,000 --> 02:47:07,000
well so now we can connect the two and say something like ultimate next4 course

1551
02:47:12,000 --> 02:47:14,000
and then we can even do some emoji right here all of this is coming along

1552
02:47:18,000 --> 02:47:20,000
exceptionally well so you might be wondering hey what else do we have to do

1553
02:47:23,000 --> 02:47:25,000
to improve this even further well first in what universe is the trash icon the

1554
02:47:29,000 --> 02:47:31,000
image upload as well we definitely don't want that and maybe you even no it's the mistake and it's not doing that for you

1555
02:47:36,000 --> 02:47:38,000
but I forgot a break yes it happens when doing if statements you don't have to

1556
02:47:42,000 --> 02:47:44,000
have them but with switches especially if you're not returning earning you want to be careful about adding your brakes

1557
02:47:48,000 --> 02:47:50,000
so now that's not going to happen the delete will delete and the upload will upload so with that said let's be

1558
02:47:55,000 --> 02:47:57,000
serious what do we have to do next and to answer that question I

1559
02:48:01,000 --> 02:48:03,000
opened up the live deployed version of our application with all the final changes it looks like somebody has been

1560
02:48:07,000 --> 02:48:09,000
designing something which is always exciting and we can see that the primary difference from what we have in our work

1561
02:48:13,000 --> 02:48:15,000
in progress and this one is the right sidebar uh the left sidebar is the

1562
02:48:20,000 --> 02:48:22,000
layers navbar allows you to add and remove the elements while the right sidebar does a lot of exciting stuff it Right Sidebar

1563
02:48:27,000 --> 02:48:29,000
allows you to change the size of specific elements simply by typing numbers it also allows you to change

1564
02:48:33,000 --> 02:48:35,000
different types of fonts so you can go with Times New Roman or even Comic Sans if you're that crazy you can also modify

1565
02:48:40,000 --> 02:48:42,000
the colors of all the different elements like rectangles and even text elements

1566
02:48:46,000 --> 02:48:48,000
and let's test it out for a rectangle there we go that looks good and we can

1567
02:48:52,000 --> 02:48:54,000
also change the stroke to something like red there we go this is very crazy but

1568
02:48:58,000 --> 02:49:00,000
you can do it that's the point you can do absolutely everything you want within this figma clone because it is yours not

1569
02:49:05,000 --> 02:49:07,000
to mention that you can also export the Cannabis to PDF that looks something like this so we'll make all of this

1570
02:49:13,000 --> 02:49:15,000
possible with our right sidebar so I moved back to our

1571
02:49:18,000 --> 02:49:20,000
application that's currently working progress and I expanded it just barely so that we can see the right sidebar and

1572
02:49:26,000 --> 02:49:28,000
now we can get started working on it to get started working on our sidebar we

1573
02:49:31,000 --> 02:49:33,000
can open up the page and within the page we can see that we're using this right sidebar without passing any additional

1574
02:49:38,000 --> 02:49:40,000
props to it let's navigate to it and ask it what it needs we can start from its jsx

1575
02:49:45,000 --> 02:49:47,000
structure we can modify some Styles here since we just copied them from the left sidebar such as change the left zero to

1576
02:49:52,000 --> 02:49:54,000
right zero and remove the Overflow y Auto and the padding bottom of 20 we

1577
02:49:59,000 --> 02:50:01,000
won't be needing those now then we have the H3 that has a padding X padding top

1578
02:50:05,000 --> 02:50:07,000
as well text extra small and uppercase that says design right below that H3 we

1579
02:50:11,000 --> 02:50:13,000
can create another span element and here we can say something inspirational like

1580
02:50:16,000 --> 02:50:18,000
make changes to Canvas as you like so we can literally

1581
02:50:22,000 --> 02:50:24,000
make any changes right here let's also style this just a tiny bit by giving it

1582
02:50:27,000 --> 02:50:29,000
a class name equal to text- XS for extra small text- primary D

1583
02:50:35,000 --> 02:50:37,000
gr-300 margin top of three padding X of five border B for bottom border D

1584
02:50:43,000 --> 02:50:45,000
primary d gray -200 and padding bottom of four there we go that's looking good I

1585
02:50:51,000 --> 02:50:53,000
also believe I'm a bit zoomed out so I will keep it like that just so we can nicely see everything without taking too

1586
02:50:58,000 --> 02:51:00,000
much space from our code or since we're just working on the right side I can even expand the code right now and we

1587
02:51:04,000 --> 02:51:06,000
can still see the sidebar on the right side we can even expand it a bit so it looks a bit better there we go now we

1588
02:51:10,000 --> 02:51:12,000
can see everything below this pan we'll render different components that modify different aspects of our elements such

1589
02:51:18,000 --> 02:51:20,000
as a self-closing Dimensions component coming from settings Dimensions below

1590
02:51:24,000 --> 02:51:26,000
Dimensions we can also render text which is going to be for text modifications

1591
02:51:29,000 --> 02:51:31,000
which can be imported from settings text let's not forget the color modifications

1592
02:51:35,000 --> 02:51:37,000
which is going to be coming from settings colors then we can duplicate the color

1593
02:51:40,000 --> 02:51:42,000
because we have one more for changing the stroke color and finally we have one

1594
02:51:46,000 --> 02:51:48,000
for exporting the canvas as a PDF so now if we save this you'll see I'm guessing

1595
02:51:53,000 --> 02:51:55,000
a lot of Errors because some of the Imports might not be correct although for you there might I'm going to fix

1596
02:51:59,000 --> 02:52:01,000
them on my end that's going to be coming from UI label we have to install these two packages from

1597
02:52:06,000 --> 02:52:08,000
shaten from the text we have to fix the Imports here as well and we also have to

1598
02:52:13,000 --> 02:52:15,000
install the sele component we'll do that soon let's just keep track of the shatan components we have to install that's

1599
02:52:20,000 --> 02:52:22,000
select label input as well what else do we have

1600
02:52:26,000 --> 02:52:28,000
let's see in the Coler we also get the label we already have added that one to

1601
02:52:31,000 --> 02:52:33,000
the list and finally we have the export where we have to install the button which we already have and everything

1602
02:52:38,000 --> 02:52:40,000
else is exactly as it should be so let's close all of these components

1603
02:52:45,000 --> 02:52:47,000
and let's install all of the shadan components that we'll need to making our right sidebar possible I'm going to open

1604
02:52:51,000 --> 02:52:53,000
up the terminal just bring us back to the last command which is going to be shaty nuui latest add and now I'm going

1605
02:52:59,000 --> 02:53:01,000
to add a select a label and an input all

1606
02:53:04,000 --> 02:53:06,000
at once by pressing enter we'll explore all of these components in detail once we actually dive into each one of these

1607
02:53:11,000 --> 02:53:13,000
components now as soon as those get installed immediately on the right side you should see something that looks like

1608
02:53:17,000 --> 02:53:19,000
this I even zoomed it in a bit so you can see it better we have design make

1609
02:53:22,000 --> 02:53:24,000
changes to Canvas as you like the width the height the text the font size the

1610
02:53:29,000 --> 02:53:31,000
font weight and the ability to choose different background and stroke colors

1611
02:53:34,000 --> 02:53:36,000
keep in mind that the majority of these are not functional yet so if you just select a specific rectangle and then try

1612
02:53:40,000 --> 02:53:42,000
to modify its values you'll see that it won't do anything similar like if you try to change the font you're going to

1613
02:53:47,000 --> 02:53:49,000
get a lot of warnings and errors in this case and if you try to select a color you're going to also get a lot of Errors

1614
02:53:54,000 --> 02:53:56,000
the reason why I'm showing this to you is to let you know that we will Implement all the functionalities for

1615
02:54:00,000 --> 02:54:02,000
all of the features in this sidebar together what you can see right here is

1616
02:54:05,000 --> 02:54:07,000
just the template just the skeleton just the UI that allows us to make all of

1617
02:54:10,000 --> 02:54:12,000
this possible so let's get started with the first one on our list from top to bottom which is Dimensions that allows

1618
02:54:18,000 --> 02:54:20,000
us to change the width and the height properties of our elements on the screen to make it work we'll have to go back to

1619
02:54:25,000 --> 02:54:27,000
our beloved page. DSX and believe it or not add yet another ref to the list of

1620
02:54:32,000 --> 02:54:34,000
our refs we can call it const is editing

1621
02:54:37,000 --> 02:54:39,000
ref which is equal to the use ref and at the start we can make it null now we

1622
02:54:44,000 --> 02:54:46,000
want to immediately use this rev in one of our listeners so right here below

1623
02:54:49,000 --> 02:54:51,000
where we have all of our canvas.on we're going to add an additional one called

1624
02:54:56,000 --> 02:54:58,000
canvas.on and we're going to call it selection specifically selection created

1625
02:55:02,000 --> 02:55:04,000
this is when a user selects the screen there we get options which can be any

1626
02:55:08,000 --> 02:55:10,000
for now and within it we can call the handle canvas selection

1627
02:55:14,000 --> 02:55:16,000
created and to it we can pass the options the is editing ref which we just

1628
02:55:21,000 --> 02:55:23,000
created as well as the set element attributes and of course we have to

1629
02:55:26,000 --> 02:55:28,000
close this canvis properly so the app doesn't break now that we fixed that we can see that our handle canvas selection

1630
02:55:34,000 --> 02:55:36,000
is complaining a bit about the is editing ref and set element attributes

1631
02:55:39,000 --> 02:55:41,000
the fix the is editing gra part we have to see why the type is complaining so if

1632
02:55:44,000 --> 02:55:46,000
we go to the handle canva selection created and then to its types right here by command clicking it we can notice

1633
02:55:51,000 --> 02:55:53,000
that it's not even accepting a type so we can simply say is editing ref and

1634
02:55:57,000 --> 02:55:59,000
that's going to be of a type react. mutable ref object of a type Boolean like this the reason why we're creating

1635
02:56:05,000 --> 02:56:07,000
this is editing ref is so that we can know if the user is manually editing a

1636
02:56:10,000 --> 02:56:12,000
specific element so now if we go back it's going to complain but now for a

1637
02:56:15,000 --> 02:56:17,000
different reason that's because we have to set it as a Boolean not as a null so if I go at the top I can say fals here

1638
02:56:22,000 --> 02:56:24,000
at the start instead of a null if we go here you'll notice that now that's fine

1639
02:56:28,000 --> 02:56:30,000
it knows exactly what it is but now we have to create this new function set element attributes and that's going to

1640
02:56:36,000 --> 02:56:38,000
be a Setter state so right here at the top we can create a new State field use

1641
02:56:43,000 --> 02:56:45,000
state by using the used State snippet we can call it element attributes and set

1642
02:56:51,000 --> 02:56:53,000
element attributes like this at the start equal to an empty object

1643
02:56:57,000 --> 02:56:59,000
specifically an empty object with all of the empty properties like width set to an empty string height set to an empty

1644
02:57:05,000 --> 02:57:07,000
string font size also is going to be sets to an empty string we can do a font

1645
02:57:11,000 --> 02:57:13,000
family we can do font weight we can also do a fill which we can do something like

1646
02:57:16,000 --> 02:57:18,000
a a BB CC I believe it's a gray color and then we can also do a stroke of that

1647
02:57:23,000 --> 02:57:25,000
similar color and we can further explain the type it's going to be called type

1648
02:57:30,000 --> 02:57:32,000
attributes there we go so now we can set custom

1649
02:57:38,000 --> 02:57:40,000
ele attributes for each one of our elements and we're passing thats that are function into our listener on the

1650
02:57:46,000 --> 02:57:48,000
selection created great now let's not forget we have to pass the is editing

1651
02:57:52,000 --> 02:57:54,000
ref back to our right sidebar so let's go right here and let's expand our right

1652
02:57:58,000 --> 02:58:00,000
sidebar and pass it The Element attributes which is the new state we have created as well the set element

1653
02:58:07,000 --> 02:58:09,000
attributes we can also pass it the fabric ref because we might need it to

1654
02:58:12,000 --> 02:58:14,000
know what we're doing with the canvas as well as that is editing ref equal to

1655
02:58:18,000 --> 02:58:20,000
is editing ref we can also pass it the active object ref just so we know on which

1656
02:58:25,000 --> 02:58:27,000
object we're currently working on as well as sync shap in storage so that we can nicely sync it after making the

1657
02:58:32,000 --> 02:58:34,000
change like changing the color we want to make sure that that change is synced to

1658
02:58:38,000 --> 02:58:40,000
storage with that said we're now passing all of the right properties to our right

1659
02:58:43,000 --> 02:58:45,000
sidebar so we can go into it and we can pass the necessary ones to our

1660
02:58:48,000 --> 02:58:50,000
Dimensions that will allow us to change the width and the height of our elements

1661
02:58:53,000 --> 02:58:55,000
first we have to destructure the props we just passed so let's get them right here at the top we can get the element

1662
02:59:00,000 --> 02:59:02,000
attributes we also can get the set element attributes let's get the fabric

1663
02:59:06,000 --> 02:59:08,000
ref next we can get the active object

1664
02:59:12,000 --> 02:59:14,000
ref let's also get is editing graph and finally the sync shape in

1665
02:59:18,000 --> 02:59:20,000
storage Great don't forget we also have to Define the types for all of these so

1666
02:59:24,000 --> 02:59:26,000
we can say that's going to be of a type right sidebar props being imported from

1667
02:59:29,000 --> 02:59:31,000
types and in there we also need to add that is editing ref of a type react.

1668
02:59:37,000 --> 02:59:39,000
mutable ref object of a type Boolean great so now we can use all of

1669
02:59:43,000 --> 02:59:45,000
those props and before we use them let's figure out exactly what we need to pass Dimensions Settings

1670
02:59:48,000 --> 02:59:50,000
to our Dimensions component it's the width the height and the handle input

1671
02:59:54,000 --> 02:59:56,000
change now where do we get these from well we can get the width and the height

1672
03:00:00,000 --> 03:00:02,000
from here element attributes that width and height is going to be element

1673
03:00:06,000 --> 03:00:08,000
attributes. height now when it comes to the handle

1674
03:00:12,000 --> 03:00:14,000
input change we can Define it right here within our right sidebar so we can say

1675
03:00:17,000 --> 03:00:19,000
handle input change is equal to handle input change and we can Define it right

1676
03:00:24,000 --> 03:00:26,000
here const handle input change is a function that accepts a property of a

1677
03:00:31,000 --> 03:00:33,000
type string and a value of a type string as well and based off of it it can do

1678
03:00:38,000 --> 03:00:40,000
something do you remember that is editing ref that we added just before well here we can check if not is editing

1679
03:00:46,000 --> 03:00:48,000
ref. current meaning if the not is manual editing is set to true then we

1680
03:00:52,000 --> 03:00:54,000
definitely want to set it to true so we can say is editing ref. current is set to true so once

1681
03:01:00,000 --> 03:01:02,000
again let me explain what this means we're going to have the automatic editing which is this one where you drag

1682
03:01:07,000 --> 03:01:09,000
and drop elements and move them around and scale them and do everything on the canvas but then this editing graph

1683
03:01:14,000 --> 03:01:16,000
checks out if you're editing elements manually through the fields so then we need to turn it on to know how it should

1684
03:01:21,000 --> 03:01:23,000
change those shapes once we know that we can then set element attributes which is

1685
03:01:27,000 --> 03:01:29,000
the state function we have created get the previous attributes of that

1686
03:01:32,000 --> 03:01:34,000
element and then immediately return something with this structure you wrap it in parentheses and then return an

1687
03:01:39,000 --> 03:01:41,000
object we want to spread all of the previous elements and then just update

1688
03:01:45,000 --> 03:01:47,000
the specific property to that property value that we're changing so for example

1689
03:01:51,000 --> 03:01:53,000
if we're changing the color property will be color and value will be something like red finally once we have

1690
03:01:59,000 --> 03:02:01,000
updated the state we also want to modify the shape and to it we need to pass the

1691
03:02:05,000 --> 03:02:07,000
canvas which is going to be fabric ref. current as fabric this is a

1692
03:02:12,000 --> 03:02:14,000
state and and right now it's going to complain that's because I haven't yet installed the types for our fabric so if

1693
03:02:20,000 --> 03:02:22,000
you quickly notice any kind of imports we importing Fabric or anything like that you'll see that it currently cannot

1694
03:02:27,000 --> 03:02:29,000
find a decoration file for the types of fabric so when using typescript some

1695
03:02:33,000 --> 03:02:35,000
great packages allow you to install additional development dependencies like

1696
03:02:38,000 --> 03:02:40,000
the types for those packages so in this case we can copy this command and paste

1697
03:02:43,000 --> 03:02:45,000
it within a terminal to install the types for fabric and the second one is

1698
03:02:50,000 --> 03:02:52,000
similar to this one but it's types uid that's for the package we have previously installed a lot of typescript

1699
03:02:57,000 --> 03:02:59,000
documentation will be done automatically for us just for the reason that we're using these packages great so now here

1700
03:03:05,000 --> 03:03:07,000
we can say fabric. canvas like this and now we don't even have to import this

1701
03:03:11,000 --> 03:03:13,000
because we have installed that Dev package the second thing we have to pass is the property that we're actually

1702
03:03:16,000 --> 03:03:18,000
modifying like the color or in this case the width and the height the value we want to change the property

1703
03:03:23,000 --> 03:03:25,000
to the active object ref that we're currently modifying and then sync shape

1704
03:03:29,000 --> 03:03:31,000
in storage so that we know what to sync and this is our handle input change

1705
03:03:36,000 --> 03:03:38,000
that we are now passing to Dimensions so let's go into the dimensions and see exactly how it works it looks like that

1706
03:03:44,000 --> 03:03:46,000
it also wants us to pass the is editing ref so while we're here it's easy to do that it's just is editing ref is equal

1707
03:03:51,000 --> 03:03:53,000
to is editing graph and now it's no longer complaining so now if we go into it

1708
03:03:57,000 --> 03:03:59,000
let's see exactly how it works we have two different dimension options label of

1709
03:04:03,000 --> 03:04:05,000
w for width and label of H for height then we have a section with a div

1710
03:04:10,000 --> 03:04:12,000
where we map over those options and for each of these two options we show a label which is this letter right here

1711
03:04:17,000 --> 03:04:19,000
and then we also show the input this input is what you can see right here the

1712
03:04:22,000 --> 03:04:24,000
most important thing is calling the input change which is exactly what we have done right now together with this

1713
03:04:28,000 --> 03:04:30,000
handle input change function and then another important thing is calling the on blur functionality on blur Handler or

1714
03:04:37,000 --> 03:04:39,000
listener is triggered once you exit out of the input so right now it's not

1715
03:04:43,000 --> 03:04:45,000
blurred it's active but as soon as you click outside the on blur activates and

1716
03:04:48,000 --> 03:04:50,000
that way we can know to stop the manual editing turn it to false and get back to

1717
03:04:54,000 --> 03:04:56,000
automatic editing that's going to allow us to resize the elements like this

1718
03:04:59,000 --> 03:05:01,000
great so with that in mind the dimensions file is completely done typescript is no longer complaining

1719
03:05:06,000 --> 03:05:08,000
which means that it should be working so let's give it a spin I'm going to put

1720
03:05:11,000 --> 03:05:13,000
this in the center and I will try to change the width of this image let me make it something like

1721
03:05:17,000 --> 03:05:19,000
500 there we go that's a bit stretched out and let me change this to

1722
03:05:22,000 --> 03:05:24,000
400 there we go that works that's great it's a bit tricky with these images

1723
03:05:28,000 --> 03:05:30,000
because you cannot know how to keep the correct aspect ratio on different pixel sizes but what you can do is

1724
03:05:34,000 --> 03:05:36,000
automatically resize it by holding the corners and then moving it like this

1725
03:05:40,000 --> 03:05:42,000
that way it keeps its original aspect ratio but something is a bit weird right here you notice that the values remained

1726
03:05:46,000 --> 03:05:48,000
exactly as they were 500 and 400 and only if we click on it they're going to

1727
03:05:52,000 --> 03:05:54,000
update how can we make it so that they update in real time as we are resizing

1728
03:05:58,000 --> 03:06:00,000
let me show you if we go back to the page and scroll down to where we have

1729
03:06:03,000 --> 03:06:05,000
all of our listeners which is right here Mouse down Mouse move Mouse up object

1730
03:06:09,000 --> 03:06:11,000
modified selection created and even resize below selection created we want to

1731
03:06:15,000 --> 03:06:17,000
create a new one called canvas.on and here we want to look into

1732
03:06:20,000 --> 03:06:22,000
the object scaling so once we scale the object as before we get the options we

1733
03:06:27,000 --> 03:06:29,000
open up the function block and in this one we'll call the handle canvas object

1734
03:06:33,000 --> 03:06:35,000
scaling and it we're going to pass the options as well as set element

1735
03:06:39,000 --> 03:06:41,000
attributes why are we passing the set element attributes well that's because it will allow us to modify the width and

1736
03:06:47,000 --> 03:06:49,000
the height of those elements so now if we collapse this and go back it looks

1737
03:06:54,000 --> 03:06:56,000
like we have to properly close it by giving it one more

1738
03:06:59,000 --> 03:07:01,000
parentheses and if we go back I'm going to bring it back to 500 and

1739
03:07:05,000 --> 03:07:07,000
400 and I will try to automatically resize it check this out it updates in

1740
03:07:12,000 --> 03:07:14,000
real time and you know exactly where it will be so if I wanted to do 300 I can

1741
03:07:17,000 --> 03:07:19,000
do exactly that and notice how it kept its aspect ratio great now modifying text elements

1742
03:07:24,000 --> 03:07:26,000
is a bit different sure you can scale them up as you would with any other elements and you can also stretch them

1743
03:07:31,000 --> 03:07:33,000
which you definitely don't want to do and that's exactly why for text elements we're going to focus on a completely new

1744
03:07:38,000 --> 03:07:40,000
set of tools you'll be able to change the font family font size and the font F

1745
03:07:43,000 --> 03:07:45,000
weight so to get started with that let's move to our right sidebar and let's Text Settings

1746
03:07:48,000 --> 03:07:50,000
focus on the text element similarly as to our Dimensions we have to pass the

1747
03:07:54,000 --> 03:07:56,000
width and the height from the element attributes to our text we'll have to pass the font family and once again you

1748
03:08:01,000 --> 03:08:03,000
might be wondering where will that come from well it's coming from the element attributes so we can say element

1749
03:08:08,000 --> 03:08:10,000
attributes. font family similarly we want to get the font size and the font

1750
03:08:15,000 --> 03:08:17,000
weight as well and the last thing is that handle input change which will be

1751
03:08:21,000 --> 03:08:23,000
exactly the same as it was on the dimensions the element attributes store

1752
03:08:27,000 --> 03:08:29,000
everything that element could have like Coler 2 we'll see that soon and then this handle input change the way we

1753
03:08:34,000 --> 03:08:36,000
developed it is agnostic to which properties it is changing meaning that it can do colors texts as well as sizes

1754
03:08:42,000 --> 03:08:44,000
so let's see exactly how text works it accepts all of these properties and then

1755
03:08:48,000 --> 03:08:50,000
it renders a select field this select field we can find right here at the bottom and it's basically nothing more

1756
03:08:55,000 --> 03:08:57,000
than a select that chooses which select to show is it a font size or is it a

1757
03:09:02,000 --> 03:09:04,000
font weight once we choose it we have its content and the trigger to be able

1758
03:09:07,000 --> 03:09:09,000
to choose from different options that's basically it now let's see what else do

1759
03:09:13,000 --> 03:09:15,000
we have besides the select so we render the select we do it for the font size

1760
03:09:18,000 --> 03:09:20,000
weight and family and pass the appropriate handle input change to it which then changes all of these

1761
03:09:25,000 --> 03:09:27,000
properties within the attributes of that specific element so let's give it a spin

1762
03:09:31,000 --> 03:09:33,000
so let's try to modify this text a bit by clicking on it and then choosing a

1763
03:09:36,000 --> 03:09:38,000
different font like Times New Roman Comic Sans or the brush script there we

1764
03:09:43,000 --> 03:09:45,000
go this one is really specific I'm going to keep it at helvetica then you can choose a font size we can go to

1765
03:09:50,000 --> 03:09:52,000
something smaller like 28 or 36 finally you can also change the

1766
03:09:56,000 --> 03:09:58,000
weight you'll notice that some fonts do not support different weights like helvetica in this case but you can go

1767
03:10:02,000 --> 03:10:04,000
full bold on it and that works without any trouble that's basically it all

1768
03:10:07,000 --> 03:10:09,000
there is to it to modifying your text Fields with that said let me bring this back and let's focus on the color color Color Settings

1769
03:10:16,000 --> 03:10:18,000
is interesting because by using Color we can modify both the text Fields as well

1770
03:10:21,000 --> 03:10:23,000
as the rectangles and other shapes so let's pass all the necessary ones to our

1771
03:10:26,000 --> 03:10:28,000
first Color Picker right here such as the input ref which corresponds to color

1772
03:10:32,000 --> 03:10:34,000
input ref and this is a new ref which will create right within the right

1773
03:10:38,000 --> 03:10:40,000
sidebar because this is the only place where we use it so we can say const color input ref is equal to use ref at

1774
03:10:47,000 --> 03:10:49,000
the start equal to null and don't forget to import use ref as this is the first time we're using it in this file we can

1775
03:10:54,000 --> 03:10:56,000
also duplicate this below and do another one for the stroke input ref stroke is

1776
03:11:00,000 --> 03:11:02,000
like a border it happens outside of the element so for the first one we're

1777
03:11:06,000 --> 03:11:08,000
passing the color input ref then we can pass the attribute that we wanted to change which in this case it is element

1778
03:11:14,000 --> 03:11:16,000
attributes. fill we also want to modify the placeholder which is going to be the

1779
03:11:20,000 --> 03:11:22,000
color and the handle input change which is equal to handle input change let's

1780
03:11:25,000 --> 03:11:27,000
also not forget about the attribute type that has to be set to fill because this

1781
03:11:31,000 --> 03:11:33,000
one is changing the fill and we can duplicate it right below the second one won't be changing

1782
03:11:39,000 --> 03:11:41,000
the fill rather it will be changing the stroke so here we can say stroke element

1783
03:11:44,000 --> 03:11:46,000
attributes. stroke placeholder also stroke and also this is going to be a

1784
03:11:51,000 --> 03:11:53,000
stroke input ref there we go so now we have those two Pickers right here and

1785
03:11:57,000 --> 03:11:59,000
they look great now let's see exactly how they behave if we go into here you'll notice

1786
03:12:03,000 --> 03:12:05,000
that we're getting all of these fields and then we have an input property that allows us to choose or enter a specific

1787
03:12:09,000 --> 03:12:11,000
color believe it or not this is a builtin HT ml 5 color input no

1788
03:12:14,000 --> 03:12:16,000
additional packages the only thing you have to do to make it happen and to turn it from a regular input like this one

1789
03:12:21,000 --> 03:12:23,000
right here is to add a type of color and you have a built-in RGB Color Picker

1790
03:12:29,000 --> 03:12:31,000
great now if we select a specific element and if we try to modify the color you can see that it works like a

1791
03:12:35,000 --> 03:12:37,000
charm let's try to go with this bluish variant that matches our design so I'm going to go right here and go for a bit

1792
03:12:43,000 --> 03:12:45,000
of a Bluer one there we go that's more like it

1793
03:12:50,000 --> 03:12:52,000
let's also try changing the stroke we can go to a lighter color there we go that's looking great I

1794
03:12:57,000 --> 03:12:59,000
hope you can see it if you want to you can also implement the opacity for now I didn't go that far so I simply left it

1795
03:13:03,000 --> 03:13:05,000
at 90% And this is it this is how you change the color and the stroke of a

1796
03:13:08,000 --> 03:13:10,000
text field but what we can do is also modify the color and the stroke of a

1797
03:13:14,000 --> 03:13:16,000
rectangle or any other shape so you can go here and you can select it and then

1798
03:13:20,000 --> 03:13:22,000
modify its color like this and you can also modify the stroke there we go

1799
03:13:26,000 --> 03:13:28,000
that's more like it pretty cool stuff right and it is so simple to make once you look into this I know you didn't

1800
03:13:33,000 --> 03:13:35,000
code out this component but it's nothing more than a div with an H3 a couple of

1801
03:13:38,000 --> 03:13:40,000
inputs and labels that's all that it is and we can also remove this 90% as it's

1802
03:13:44,000 --> 03:13:46,000
just static code so this way we don't even see it great with that said the Export to PDF

1803
03:13:49,000 --> 03:13:51,000
last thing we have to do right here is the export so let's go into the export component and see how it works the only

1804
03:13:57,000 --> 03:13:59,000
thing that this does is it has a button with an onclick that it calls the

1805
03:14:02,000 --> 03:14:04,000
utility function called export to BDF and the only thing that that

1806
03:14:07,000 --> 03:14:09,000
function does is it takes the canvas by selecting it with a query selector then

1807
03:14:13,000 --> 03:14:15,000
it turns it into a PNG image of the same size of the canvas width and height and

1808
03:14:18,000 --> 03:14:20,000
then saves it at a PDF so let's test it out if we go right here and try to save

1809
03:14:24,000 --> 03:14:26,000
this I'm going to click export to PDF and we get an error this error is saying

1810
03:14:30,000 --> 03:14:32,000
that the doc is not defined so if we go back to utils we can see that the doc indeed is not defined and that's because

1811
03:14:37,000 --> 03:14:39,000
before to show you how this truly works I commented out this part so let's bring it back back what powers this PDF

1812
03:14:44,000 --> 03:14:46,000
download is the jspdf library which we can also import right here at the top

1813
03:14:51,000 --> 03:14:53,000
coming from jspdf a simple Google search will point you to a jspdf mpm page where you can see that it

1814
03:14:59,000 --> 03:15:01,000
has 1.1 million weekly downloads and basically the only thing it does is it

1815
03:15:05,000 --> 03:15:07,000
prints a document so let's install it by running mpm install JS

1816
03:15:11,000 --> 03:15:13,000
PDF after that this red squiggly line should be gone and with it we should now have

1817
03:15:18,000 --> 03:15:20,000
access to this dock right here so if you go back and try to export

1818
03:15:23,000 --> 03:15:25,000
to PDF this time it actually does it and if you open it up it's going to look

1819
03:15:29,000 --> 03:15:31,000
something like this I didn't go as far as changing the background color of this document you could change it to match

1820
03:15:34,000 --> 03:15:36,000
your canvas but already this is a good starting point for you to start adding more features if you want to with that

1821
03:15:42,000 --> 03:15:44,000
said we can close all of these files and believe it or not we're completely done

1822
03:15:47,000 --> 03:15:49,000
with the right sidebar so now let's expand this to see it in its full glory

1823
03:15:52,000 --> 03:15:54,000
and on my other screen I'm just testing it as well by saying something like test

1824
03:15:57,000 --> 03:15:59,000
right here sending some emojis or even collaborating live on the document so

1825
03:16:04,000 --> 03:16:06,000
all of the stuff that we explored previously still works and since you have the same privileges as your friend

1826
03:16:10,000 --> 03:16:12,000
you can now just delete those elements as as well and they get removed from the layers and the last thing we can focus Comments Bubble

1827
03:16:17,000 --> 03:16:19,000
on are live blocks comments they're currently in beta and they allow

1828
03:16:22,000 --> 03:16:24,000
discussions on your whiteboard or or any kind of website effortlessly essentially

1829
03:16:28,000 --> 03:16:30,000
you can just click it leave a comment and everybody can have a discussion on whether that feature or design is good

1830
03:16:36,000 --> 03:16:38,000
or not it works within the text editor but in this case we're more interested in doing it within a whiteboard black

1831
03:16:42,000 --> 03:16:44,000
interface or within a full figma redesign so you can do exactly what you

1832
03:16:48,000 --> 03:16:50,000
need as it's flexible and you can attach it to a specific point on your canvas which is exactly what we'll do today so

1833
03:16:56,000 --> 03:16:58,000
let's navigate over to live blocks comments documentation page and just

1834
03:17:01,000 --> 03:17:03,000
start following the steps first we have to install it we have already to install the client and

1835
03:17:07,000 --> 03:17:09,000
the react so we simply need to install the live blocks react comments going

1836
03:17:12,000 --> 03:17:14,000
back to our code we can say mpm install and then add live blocks SL react DC

1837
03:17:20,000 --> 03:17:22,000
comments the second step right here is to initialize the live blocks config which we have already done create the

1838
03:17:26,000 --> 03:17:28,000
live blocks client which we have already done join a room that is done as well

1839
03:17:32,000 --> 03:17:34,000
and then add live blocks room to our page we have done that and here we dive into adding comments they use the used

1840
03:17:39,000 --> 03:17:41,000
threads hook to get the threads in the room and then use the thread component to render them finally they add a way to

1841
03:17:47,000 --> 03:17:49,000
create threads by adding a composer so we can use their example right here by

1842
03:17:52,000 --> 03:17:54,000
copying this entire piece of code within our application we can go to

1843
03:17:57,000 --> 03:17:59,000
our components and then comments and create a new file called comments

1844
03:18:03,000 --> 03:18:05,000
overlay. TSX within it we can paste what we

1845
03:18:09,000 --> 03:18:11,000
copied of course make sure to fix the LI blocks config path which will be coming

1846
03:18:15,000 --> 03:18:17,000
from add/ Li blocks config and then we need the composer and the thread now

1847
03:18:21,000 --> 03:18:23,000
that we've done this let's see if there's something else we have to do within our docs and there is and that is

1848
03:18:28,000 --> 03:18:30,000
adding the styles to our global. CSS so we can copy that collapse this and go to

1849
03:18:35,000 --> 03:18:37,000
global. CSS and you'll notice that I already added this at the start for you so you don't have to worry about that at

1850
03:18:41,000 --> 03:18:43,000
all with that said we can proceed with creating our comments and the first question is within where are we going to

1851
03:18:48,000 --> 03:18:50,000
use this comments overlay it's going to be within a special component called

1852
03:18:56,000 --> 03:18:58,000
comments so we can create a new component called comments. TSX inside of which you can run

1853
03:19:04,000 --> 03:19:06,000
RFC we can make it into an export const not export

1854
03:19:09,000 --> 03:19:11,000
default and within here you'll to use a special property coming from live blocks

1855
03:19:15,000 --> 03:19:17,000
and that is client side suspense coming from Li blocks

1856
03:19:21,000 --> 03:19:23,000
react this allows our comments to be rendered on the client's side and don't forget to pass it a fullback which for

1857
03:19:28,000 --> 03:19:30,000
now we can simply set to null within this client suspense we can

1858
03:19:34,000 --> 03:19:36,000
specify a new Dynamic block of code and then render the automatic Return of the

1859
03:19:41,000 --> 03:19:43,000
comments or overlay that we have created just before and we can import it right

1860
03:19:46,000 --> 03:19:48,000
here and now the question is where can we call this comments component well

1861
03:19:51,000 --> 03:19:53,000
we're going to call it within our live component right here where we have the cursors and everything else we can

1862
03:19:58,000 --> 03:20:00,000
simply show the comments because the comments themselves aren't anything they're an overlay that appears on top

1863
03:20:05,000 --> 03:20:07,000
of different things so we can simply import them right here if you do that and go back to our app

1864
03:20:12,000 --> 03:20:14,000
maybe just spread it up a bit you'll be able to see something that looks like this write a comment and you can start

1865
03:20:19,000 --> 03:20:21,000
writing and then create it that's because the liveblock steam within our comment overlay already provided a

1866
03:20:27,000 --> 03:20:29,000
composer but we want to hide that for now because we're going to show it only on a specific click once we actually

1867
03:20:34,000 --> 03:20:36,000
know where we want to place. comment so let's figure out within where are we

1868
03:20:40,000 --> 03:20:42,000
going to use that composer we already created a skeleton for one component called new thread that for now simply

1869
03:20:47,000 --> 03:20:49,000
returns children nothing else and we briefly used it within our navbar if you

1870
03:20:53,000 --> 03:20:55,000
remember if we select a comment then we trigger the new thread component where

1871
03:20:58,000 --> 03:21:00,000
we have the button and then everything else within it but the new thread right now is completely empty so let's focus

1872
03:21:05,000 --> 03:21:07,000
on the new thread so we can first add a thread and then we can focus on displaying them and if you came this far

1873
03:21:12,000 --> 03:21:14,000
into the video then you already must be a pro so I went ahead and prepared the

1874
03:21:17,000 --> 03:21:19,000
complete new thread component for you and documented it well with a lot of comments so in the read me down below

1875
03:21:25,000 --> 03:21:27,000
you can find it and paste it right here you'll notice it's a lengthy one but the

1876
03:21:31,000 --> 03:21:33,000
majority of the code right here is actually comments so I will suggest maybe pausing

1877
03:21:37,000 --> 03:21:39,000
the video a bit and going over it and trying to understand exactly what it does but don't forget I'm here to go

1878
03:21:44,000 --> 03:21:46,000
over it with you as well and before I go ahead and explain it you might notice

1879
03:21:49,000 --> 03:21:51,000
that we also need two additional components for the new thread to work the pin composer and the new thread

1880
03:21:54,000 --> 03:21:56,000
cursor so create a new file within comments called pend composer. TSX and

1881
03:22:03,000 --> 03:22:05,000
you can find the code in the read me down below finally the last one is the new thread cursor

1882
03:22:12,000 --> 03:22:14,000
TSX and you can also paste that right here now if you go back you'll notice

1883
03:22:17,000 --> 03:22:19,000
that it's still complaining about the pin composer and let's see why it cannot get it it's pinned

1884
03:22:23,000 --> 03:22:25,000
composer I think that's how we named it yep that looks good and if we look the

1885
03:22:29,000 --> 03:22:31,000
export here export Bend composer that's looking good it looks like as soon as I

1886
03:22:36,000 --> 03:22:38,000
removed it and just automatically imported it once again by clicking here even though it's the same same path it's

1887
03:22:42,000 --> 03:22:44,000
no longer complaining and it works so now let me go ahead and explain exactly

1888
03:22:48,000 --> 03:22:50,000
how this new thread works we start off with tracking whether we have placed or

1889
03:22:54,000 --> 03:22:56,000
not placed the new comment yet so we have three different states placing placed or complete and it's PR cool that

1890
03:23:02,000 --> 03:23:04,000
we can make some kind of an enum with typescript like this so we know exactly that this creating comment can be only

1891
03:23:10,000 --> 03:23:12,000
one of those three states then we're using the use create thread

1892
03:23:15,000 --> 03:23:17,000
hook to create a new thread coming directly from live blocks and here I left for you a documentation page it

1893
03:23:22,000 --> 03:23:24,000
simply exposes the mutation to create a thread then this is a special function

1894
03:23:27,000 --> 03:23:29,000
that I have created called use max Z index that Returns the highest Z index

1895
03:23:33,000 --> 03:23:35,000
of all threads that way we can always show it on top we store it in a variable

1896
03:23:38,000 --> 03:23:40,000
right here then we set state to track the coordinates of the composer which is

1897
03:23:44,000 --> 03:23:46,000
the live blocks comment editor we also need to know where on the screen are we showing it we then set state to track

1898
03:23:51,000 --> 03:23:53,000
the last pointer event we'll use this later on you'll see why we also need to

1899
03:23:57,000 --> 03:23:59,000
set additional states to track if the user is allowed to use the composer such

1900
03:24:02,000 --> 03:24:04,000
as only when the composer editor is actually opened and clicked if it's not

1901
03:24:08,000 --> 03:24:10,000
opened and expanded there's no input that we can type in so that's why we need to track that state we also have

1902
03:24:14,000 --> 03:24:16,000
the ref to connect it to that composer within this use effect we figure out if

1903
03:24:19,000 --> 03:24:21,000
the composer is already placed and keep in mind composer again uh may be a complicated word but it's basically an

1904
03:24:26,000 --> 03:24:28,000
Editor to create and edit comments so if it's already placed don't do anything

1905
03:24:33,000 --> 03:24:35,000
otherwise once we click place the composer on the screen with this new comment function and if it's already

1906
03:24:40,000 --> 03:24:42,000
placed click out de side to close it and if it's not placed once you first

1907
03:24:46,000 --> 03:24:48,000
click on it it sets it down again it's all going to make much more sense once you see it in

1908
03:24:52,000 --> 03:24:54,000
action as a matter of fact let me show you how that works on the finished website I'm going to go right here

1909
03:24:58,000 --> 03:25:00,000
select a comment and click on it right here this window right here is called a

1910
03:25:05,000 --> 03:25:07,000
composer and here you can do all sorts of things it has some simple styling

1911
03:25:10,000 --> 03:25:12,000
capabilities like you can make text bolded you can also make it italic and so on which is pretty cool you can also

1912
03:25:17,000 --> 03:25:19,000
add emojis and even mention some people by name of course if you implemented

1913
03:25:23,000 --> 03:25:25,000
authentication into this app definitely something we could explore in the next one if you like this

1914
03:25:29,000 --> 03:25:31,000
video so that's our composer so now let me proceed with explaining it

1915
03:25:34,000 --> 03:25:36,000
further here we add an event listener so we can listen for clicks on that new

1916
03:25:40,000 --> 03:25:42,000
comment and this change ches only when the creating comment State changes the Second Use effect is for dragging the

1917
03:25:47,000 --> 03:25:49,000
composer so here we're tracking the pointer move and modifying the coordinates of the comment and this one

1918
03:25:54,000 --> 03:25:56,000
just ensures that the comment is placed exactly where the cursor is you can see

1919
03:26:00,000 --> 03:26:02,000
that by these listeners so we're looking for the pointer down or even for the

1920
03:26:05,000 --> 03:26:07,000
context menu because from the context menu which we'll Implement soon you can also choose to add a

1921
03:26:12,000 --> 03:26:14,000
comment now finally on composer submit is a function that creates thread and

1922
03:26:18,000 --> 03:26:20,000
resets all the states now this part right here is very important if you just

1923
03:26:24,000 --> 03:26:26,000
get the current X and Y positions it's going to get it relative to the entire window of the browser but keep in mind

1924
03:26:31,000 --> 03:26:33,000
we're working within a tiny portion of that window which is the canvas we don't

1925
03:26:37,000 --> 03:26:39,000
want the left side bar the right side barar or the nav bar bar to mess up with

1926
03:26:42,000 --> 03:26:44,000
their positioning that's why we use the get bounding client wct which only gets

1927
03:26:47,000 --> 03:26:49,000
the positioning from the div your within in this case our canvas and then we can

1928
03:26:53,000 --> 03:26:55,000
properly calculate the position where we want to create that thread and this is

1929
03:26:58,000 --> 03:27:00,000
the function that does it we pass it the body and the metadata which contains the X and Y positions resolve the set to

1930
03:27:06,000 --> 03:27:08,000
false because nobody has yet seen it and we increase the zindex to + one we do

1931
03:27:12,000 --> 03:27:14,000
some quick cleanup by setting the creating comment state to complete resetting coordinates and setting the

1932
03:27:19,000 --> 03:27:21,000
allow Ed composer to false with that said we return this slot

1933
03:27:24,000 --> 03:27:26,000
right here and Slot is used to wrap the children of the new thread component and

1934
03:27:30,000 --> 03:27:32,000
allows us to add a click event listener to the children a bit of a complicated explanation but Rad's documentation

1935
03:27:37,000 --> 03:27:39,000
Dives a bit deeper in simple words it merges its Pro stops onto its immediate

1936
03:27:43,000 --> 03:27:45,000
child essentially the slot component is a utility component that doesn't render

1937
03:27:48,000 --> 03:27:50,000
any D element itself but it clones it children and then feeds them with a prop

1938
03:27:54,000 --> 03:27:56,000
that you pass into the slot that way you can attach different click handlers to children without knowing what kind of

1939
03:28:01,000 --> 03:28:03,000
element they are very interesting component I know but essentially it attaches the on click and the style to

1940
03:28:09,000 --> 03:28:11,000
whatever children we pass right here finally if we have the composer coordinates then we render the composer

1941
03:28:17,000 --> 03:28:19,000
that looks something like this a portal is a way to render children into a Dom

1942
03:28:22,000 --> 03:28:24,000
node that exists outside of the Dom hierarchy of the parent component so

1943
03:28:27,000 --> 03:28:29,000
basically it stands on its own away from the navbar the way we typically use

1944
03:28:33,000 --> 03:28:35,000
portals is to render components outside of their parent component in this case

1945
03:28:38,000 --> 03:28:40,000
we want to be able to do comments anywhere where on the screen and this button right here is within the Navar

1946
03:28:46,000 --> 03:28:48,000
but you're not going to leave a new comment within the Navar you're going to leave it somewhere else which is exactly

1947
03:28:51,000 --> 03:28:53,000
what we portal out of the Navar into the canvas and then within it we display a

1948
03:28:58,000 --> 03:29:00,000
pin composer which is nothing more than a simple div containing the common image

1949
03:29:03,000 --> 03:29:05,000
and then the famous composer component coming directly from Li blocks allowing

1950
03:29:09,000 --> 03:29:11,000
you to create a new cont comment and that my friends is the new thread component here you also have a new

1951
03:29:16,000 --> 03:29:18,000
thread cursor which is basically once you place your current cursor on that comment it basically just displays a

1952
03:29:23,000 --> 03:29:25,000
different version of the comment so you know you're hovering over it okay a lot of talking let's see what we have in our

1953
03:29:29,000 --> 03:29:31,000
code if we now go back right here and maybe even make it a bit larger we can

1954
03:29:35,000 --> 03:29:37,000
now click on this comment and would you look at that it appears like we're adding a comment let's let's try to

1955
03:29:41,000 --> 03:29:43,000
click on this ultimate next4 and we can try writing something

1956
03:29:46,000 --> 03:29:48,000
let's say make it ultimate next4 course and press enter with that a

1957
03:29:56,000 --> 03:29:58,000
new comment will get added but it does seem like it kind of went away it's so

1958
03:30:02,000 --> 03:30:04,000
hard to see it even if we zoom out it looks like it's not even on the screen so let's figure out what's up with that

1959
03:30:09,000 --> 03:30:11,000
we have implemented the ability to add add the comments right now but if we go back to the comments overlay you can see

1960
03:30:16,000 --> 03:30:18,000
how we are displaying them we're simply mapping over them but we have no idea

1961
03:30:22,000 --> 03:30:24,000
where they will show up so let's just first consol log the comments to see if

1962
03:30:27,000 --> 03:30:29,000
we really created them so if I go here and inspect within the console we can

1963
03:30:33,000 --> 03:30:35,000
see that we have two comments right here and they're being reloaded quite often

1964
03:30:39,000 --> 03:30:41,000
later on we'll memorize our component components and this issue will be fixed but the most important part for right

1965
03:30:45,000 --> 03:30:47,000
now is that we have those two comments we created and we should be able to see the metadata Yep this is great we're

1966
03:30:52,000 --> 03:30:54,000
storing the exact coordinates of where we want to place them and you can see the comments within that thread there we

1967
03:30:59,000 --> 03:31:01,000
go now the reason why they're not showing up is quite obvious we are not

1968
03:31:05,000 --> 03:31:07,000
attaching the X and Y axis to them that means that they have no idea where to go

1969
03:31:11,000 --> 03:31:13,000
so to fix it what we have to do is create a modified version of the thread component provided by live blocks while

1970
03:31:19,000 --> 03:31:21,000
still using it but call it a pinned thread that pinned thread will behave

1971
03:31:25,000 --> 03:31:27,000
like a pin that you put on a board it's going to stay exactly where you created so the complete comments overlay code is

1972
03:31:33,000 --> 03:31:35,000
in the read me down below so you can simply copy it and paste it here and you'll also notice that it uses this

1973
03:31:40,000 --> 03:31:42,000
special pinned thread component as well so let's create it right here by

1974
03:31:45,000 --> 03:31:47,000
creating a new pinned thread. TSX and you can also copy it from the

1975
03:31:52,000 --> 03:31:54,000
readme and paste it right here now that you've done that let's go

1976
03:31:57,000 --> 03:31:59,000
ahead and analyze what are we doing differently with our comments overlay we're still using the used threads hook

1977
03:32:04,000 --> 03:32:06,000
which is the one that gives us access to these comments we introduce the max Z

1978
03:32:09,000 --> 03:32:11,000
index to know where to display them we map over them and then we call the overlay thread instead of a simple

1979
03:32:16,000 --> 03:32:18,000
thread provided by live blocks this overlay thread allows us to edit the

1980
03:32:22,000 --> 03:32:24,000
metadata and we also get the loading once the user uses or consumes that

1981
03:32:27,000 --> 03:32:29,000
thread we create a ref for it because we have to keep track of that element to be able to know where to position it we

1982
03:32:34,000 --> 03:32:36,000
increase the Z index and add it to the metadata so that we know once we create a new comment it should go on top top of

1983
03:32:41,000 --> 03:32:43,000
it and finally we return a div that renders the pin thread and the pin

1984
03:32:47,000 --> 03:32:49,000
thread is nothing more than the original thread coming from live blocks but we

1985
03:32:53,000 --> 03:32:55,000
have wrapped it with a couple of divs to make sure that it shows exactly where it

1986
03:32:58,000 --> 03:33:00,000
should show on the screen on correct X and Y coordinates and would you look at that I

1987
03:33:05,000 --> 03:33:07,000
have added two comments one while I was testing and another real one make it

1988
03:33:11,000 --> 03:33:13,000
ultimate next4 course in the current version we cannot move these around

1989
03:33:16,000 --> 03:33:18,000
that's something that you could explore implementing as well but let's go ahead and try to create another one maybe we

1990
03:33:23,000 --> 03:33:25,000
can say something like change this color to purple and press enter it gets added

1991
03:33:30,000 --> 03:33:32,000
but you can notice that it shifted just a tiny bit one thing we can do is also

1992
03:33:35,000 --> 03:33:37,000
close these threads or resolve them just by clicking on them so so let's try to

1993
03:33:41,000 --> 03:33:43,000
do one more for changing the color I'm going to place it here change color to

1994
03:33:48,000 --> 03:33:50,000
purple and you can see it kind of moves a bit to the top left and you can also

1995
03:33:53,000 --> 03:33:55,000
add the Emoji but it's going to appear after you reopen the comment we can look

1996
03:33:59,000 --> 03:34:01,000
into that later and we also have to look into these emojis right here these are for reactions but when you're actually

1997
03:34:06,000 --> 03:34:08,000
chatting if you try to select an emoji right now it doesn't do anything anything so that's something we also

1998
03:34:13,000 --> 03:34:15,000
have to look into now most of the bugs that you've seen on my end right now

1999
03:34:18,000 --> 03:34:20,000
shouldn't have existed at all for you for you everything should have worked the first time that's because I just

2000
03:34:24,000 --> 03:34:26,000
recently updated the new thread component which I provided to you at the start and in there I added a couple of

2001
03:34:31,000 --> 03:34:33,000
these fixes for the positioning of the thread as well as closing and opening it

2002
03:34:37,000 --> 03:34:39,000
so if we go to line 175 and 6 you you can notice that I just made a change to

2003
03:34:42,000 --> 03:34:44,000
look into the composer chords which are relative to our current canvas so that's a much more precise position and also if

2004
03:34:50,000 --> 03:34:52,000
we go right here you'll notice that we're now properly closing and opening the composer if we click on it and the

2005
03:34:57,000 --> 03:34:59,000
other file where we made some changes is within the pin thread which you also had access to specifically right here we

2006
03:35:04,000 --> 03:35:06,000
added an if statement checking if we click on a specific icon such as emojis

2007
03:35:09,000 --> 03:35:11,000
or anything else then we exit out of the function and not minimize the window that's why we

2008
03:35:16,000 --> 03:35:18,000
weren't able to select emojis before so now if we try to add a new comment with

2009
03:35:21,000 --> 03:35:23,000
those changes right here on the orange part and I say something like test and press enter you can see that it still

2010
03:35:28,000 --> 03:35:30,000
brings it a bit up let's figure out why that is also we have to fix those scroll bars on right side and at the bottom

2011
03:35:35,000 --> 03:35:37,000
we'll do that very soon but first let's fix the positioning I believe we can fix that by modifying ing the classes within

2012
03:35:42,000 --> 03:35:44,000
the live component these ones right here we are never setting the relative

2013
03:35:47,000 --> 03:35:49,000
positioning and that is very important we have to say relative we can give it a

2014
03:35:52,000 --> 03:35:54,000
full height by saying h- full instead of 100 VH we also can give it a flex we can

2015
03:36:00,000 --> 03:36:02,000
also give it a flex one so it expands the full width however much it can we

2016
03:36:05,000 --> 03:36:07,000
are also goinging it a full width item Center justify Center and we don't need

2017
03:36:10,000 --> 03:36:12,000
text Center that was before when we were just playing with the lightblocks features so now if I remove the text

2018
03:36:16,000 --> 03:36:18,000
Center and save it and relo the canvas you can see that now the comment is

2019
03:36:21,000 --> 03:36:23,000
exactly where we placed it that is looking good usually if you had real

2020
03:36:26,000 --> 03:36:28,000
users here you would be able to see their profile photo and also their name the way you close the comment is you

2021
03:36:33,000 --> 03:36:35,000
just click on it great and as soon as we Implement these class names you can also see that no longer can we see those

2022
03:36:40,000 --> 03:36:42,000
scroll barss to the right so that has been fixed as well now let's look into the Emoji issues so for example I'm

2023
03:36:47,000 --> 03:36:49,000
going to say something like let's do this one right here monco DB is great by

2024
03:36:54,000 --> 03:36:56,000
the way notice that we still have those bars I was wrong we'll fix them so I'm going to press enter we have our comment

2025
03:37:03,000 --> 03:37:05,000
Anonymous and let's try to emote to it so we can put a reaction which when you

2026
03:37:08,000 --> 03:37:10,000
reopen you can see the reaction here here and you can also reply and say something like yep it is and you can

2027
03:37:16,000 --> 03:37:18,000
also tag people if you had real users and you can also add emojis to comments

2028
03:37:22,000 --> 03:37:24,000
as well and press enter all of that works in real time and of course if another user had this opened they would

2029
03:37:28,000 --> 03:37:30,000
be able to see it too let's try to replicate the situation where we have those scroll bars I think if we do this

2030
03:37:34,000 --> 03:37:36,000
Yep they're going to appear and now we can navigate to global. CSS and we can

2031
03:37:40,000 --> 03:37:42,000
try to Target the body element and simply do something like overflow and

2032
03:37:46,000 --> 03:37:48,000
then hidden because we cannot scroll through our canvas and as soon as we do that the issue is fixed but of course

2033
03:37:53,000 --> 03:37:55,000
many of these issues that we're experiencing are here only because we're working on such a small screen but as

2034
03:37:59,000 --> 03:38:01,000
soon as we expand it you can see the right sidebar and it looks so much better and of course you're not going to

2035
03:38:05,000 --> 03:38:07,000
have many of these issues that we experienced but hey it's good that we handled the edge cases do so with that

2036
03:38:11,000 --> 03:38:13,000
in mind the comments work we can say great we can add emojis we can do all

2037
03:38:17,000 --> 03:38:19,000
sorts of different things and they're actually being placed exactly where we need them so with that said you have

2038
03:38:23,000 --> 03:38:25,000
successfully implemented the ability to add all kinds of different elements text

2039
03:38:29,000 --> 03:38:31,000
elements as well delete them reset them add overlay comments keep track of the

2040
03:38:34,000 --> 03:38:36,000
layer history as well as modify everything there is to modify about elements like they're colors Strokes

2041
03:38:42,000 --> 03:38:44,000
font families and the width and the height so what do we have to do next the Custom Context Menu

2042
03:38:47,000 --> 03:38:49,000
next thing we can focus on is the menu now the menu right here when I click it allows me to save the image copy help or

2043
03:38:55,000 --> 03:38:57,000
inspect but on the deployed version once I click I have these special options

2044
03:39:01,000 --> 03:39:03,000
that I can do for example even if I don't know that I can press the forward slash to chat I can rightclick and then

2045
03:39:07,000 --> 03:39:09,000
see all the options like chat undo redo and even reactions so let's go ahead and

2046
03:39:14,000 --> 03:39:16,000
Implement that using the shaten menu specifically we'll be using shat 's

2047
03:39:19,000 --> 03:39:21,000
context menu it allows us to display a menu to the user such as a set of actions or functions triggered by a

2048
03:39:26,000 --> 03:39:28,000
button exactly what we need the installation is simple we just have to

2049
03:39:32,000 --> 03:39:34,000
run MPX chat CN UI latest add context menu so let's simply paste it to one of

2050
03:39:38,000 --> 03:39:40,000
our empty terminals it's going to install it and then here is the usage we

2051
03:39:44,000 --> 03:39:46,000
can first import all of the Imports necessary to make the menu we can go back to live and just use them right at

2052
03:39:51,000 --> 03:39:53,000
the top of this page then we can copy its usage and we can scroll all the way

2053
03:39:57,000 --> 03:39:59,000
down to the jsx portion of our live. TSX the only thing we have to do is wrap

2054
03:40:04,000 --> 03:40:06,000
everything we have into a context menu so we can do it right here what will

2055
03:40:10,000 --> 03:40:12,000
temporarily break our application but we'll soon fix it so in this case we

2056
03:40:16,000 --> 03:40:18,000
have the context menu which needs to wrap absolutely everything so let's

2057
03:40:21,000 --> 03:40:23,000
first copy the rest and keep the context menu on top and of course we need to close it right here at the end that is

2058
03:40:29,000 --> 03:40:31,000
the primary wrapper for our menu the second thing we need to do is say where

2059
03:40:34,000 --> 03:40:36,000
the context menu trigger will be and in this case our entire div or the C canvas

2060
03:40:40,000 --> 03:40:42,000
is actually a context menu trigger so we can replace this div to context menu

2061
03:40:46,000 --> 03:40:48,000
trigger like this and of course we have to close that context menu trigger at

2062
03:40:52,000 --> 03:40:54,000
the bottom there we go and the next thing we have to do is scroll all the way down that's going to be right here

2063
03:41:00,000 --> 03:41:02,000
and we want to close the context menu trigger and then after it still within the context menu render the context menu

2064
03:41:08,000 --> 03:41:10,000
content like this we can give it a class name equal to

2065
03:41:14,000 --> 03:41:16,000
write- men- content and I think this is enough for us to get back to our

2066
03:41:19,000 --> 03:41:21,000
application there we go not much to see but we can start playing with it if you right click you'll be able to see an

2067
03:41:26,000 --> 03:41:28,000
empty menu so now let's start adding the menu content right here we can map over our

2068
03:41:32,000 --> 03:41:34,000
shortcuts coming from constant by saying shortcuts. map where we get each individual shortcut item and then for

2069
03:41:40,000 --> 03:41:42,000
each one we return a context menu item like so within the context menu item we

2070
03:41:47,000 --> 03:41:49,000
can simply return a P tag that's going to render the item. name and of course

2071
03:41:52,000 --> 03:41:54,000
each item in a map has to have a key so we can say item. key will be the key

2072
03:41:59,000 --> 03:42:01,000
great now let's first dive into the shortcuts to see what they are this is

2073
03:42:04,000 --> 03:42:06,000
simply an array of predefined objects one is to chat two is to undo three redo

2074
03:42:10,000 --> 03:42:12,000
and four reactions so now if you go here and right click you can see all of these

2075
03:42:15,000 --> 03:42:17,000
elements on which you'll soon be able to click to activate them and we can also render the shortcut right here by

2076
03:42:22,000 --> 03:42:24,000
rendering A P tag with a class name equal to text- XS text- primary DG

2077
03:42:31,000 --> 03:42:33,000
gr-300 and there we can render the item.

2078
03:42:36,000 --> 03:42:38,000
shortcut if you save it and right click you can now see some reactions of course

2079
03:42:42,000 --> 03:42:44,000
it's not so well styled and right now you can just do that reaction by clicking it but you cannot yet click on

2080
03:42:49,000 --> 03:42:51,000
the actual item to activate it so to make that happen we can give the context

2081
03:42:54,000 --> 03:42:56,000
menu item an onclick property which will handle the context menu click and then

2082
03:43:01,000 --> 03:43:03,000
to it we can pass the item. name of course this is the function that we are yet to create so if we scroll a bit up

2083
03:43:09,000 --> 03:43:11,000
we can create a new const handle context menu click that will be a use callback

2084
03:43:18,000 --> 03:43:20,000
hook coming from react and it will accept a key of an action that we want

2085
03:43:23,000 --> 03:43:25,000
to click of a type string and then we can return the actual function since we're using the used callback we also

2086
03:43:30,000 --> 03:43:32,000
need to pass the dependency array the used callback is used when you want to

2087
03:43:35,000 --> 03:43:37,000
memorize the version of the Callback that only changes if one of the inputs has changed

2088
03:43:40,000 --> 03:43:42,000
so if you click on one of these items for the first time for example the chat it will call this function but the

2089
03:43:47,000 --> 03:43:49,000
second time that you call it the same one it's not going to recompute the values because the input hasn't changed

2090
03:43:53,000 --> 03:43:55,000
so we're just making our app more optimized right here we can call a switch statement that's going to look

2091
03:43:59,000 --> 03:44:01,000
into the key and then the case is chat with a Capital C then we want to call

2092
03:44:06,000 --> 03:44:08,000
the set cursor State and to it we can pass has the mode cursor chat. chat

2093
03:44:12,000 --> 03:44:14,000
previous message is null and message is equal to an empty string and then we want to break it now let's test it

2094
03:44:20,000 --> 03:44:22,000
out if I go back we'll see too many renders I think that's because if we

2095
03:44:27,000 --> 03:44:29,000
scroll down you'll notice that I immediately use this function and it's

2096
03:44:32,000 --> 03:44:34,000
even complaining right here you never want a call function like this because as the code is being interpreted it's

2097
03:44:39,000 --> 03:44:41,000
going to start reading on click and then it will start reading handle context

2098
03:44:44,000 --> 03:44:46,000
menu click and hey this is a function call so let me call this function immediately and not on the onclick so to

2099
03:44:51,000 --> 03:44:53,000
remove this error we simply have to put it in a callback function which is going to look something like this open

2100
03:44:58,000 --> 03:45:00,000
parenthesis and then a function call now we won't have too many rerenders it's

2101
03:45:03,000 --> 03:45:05,000
only going to call it once we click there we go now let's go back and let's

2102
03:45:08,000 --> 03:45:10,000
add other pieces off or switch should I say the second one will be case undo

2103
03:45:15,000 --> 03:45:17,000
again make sure to use a capital first letter in that case we simply want to call the undo function which is coming

2104
03:45:22,000 --> 03:45:24,000
from live Block's hook remember we used it before as well so just so we don't have to recall the hook we can also just

2105
03:45:30,000 --> 03:45:32,000
pass it into the live as a prop so if we scroll all the way up you'll notice that we're not passing

2106
03:45:37,000 --> 03:45:39,000
those as props right now let's see where we're calling the live component we're

2107
03:45:43,000 --> 03:45:45,000
calling it within the page and you can see that we're not passing anything to it but what we can pass is the undo

2108
03:45:50,000 --> 03:45:52,000
equal to undo as well as redo is equal to redo now if we go back to live we can

2109
03:45:57,000 --> 03:45:59,000
tell our props that we are expecting it so we can say undo and redo and to the

2110
03:46:03,000 --> 03:46:05,000
props we can say that undo is of a type function that returns void meaning

2111
03:46:09,000 --> 03:46:11,000
nothing and redo is also a function that returns void now if we go back to our

2112
03:46:14,000 --> 03:46:16,000
switch statement we can say undo call the undo function and don't forget to break it

2113
03:46:21,000 --> 03:46:23,000
because we're not returning and of course on case redo we do redo and then break and that's about

2114
03:46:29,000 --> 03:46:31,000
it now finally let's just style this context menu item by giving it a class

2115
03:46:36,000 --> 03:46:38,000
name equal to write- men menu Dash item save it and now if we right click you'll

2116
03:46:44,000 --> 03:46:46,000
see that it looks great you can immediately stop the right menu by clicking out and use the keyboard

2117
03:46:49,000 --> 03:46:51,000
shortcut for example forward slash or you can also just click on it to activate it so for example let's say

2118
03:46:56,000 --> 03:46:58,000
that you like to use your mouse more than your keyboard and you want to create a new element oh for some reason it doesn't

2119
03:47:03,000 --> 03:47:05,000
want to create any elements on my end let me reload the

2120
03:47:08,000 --> 03:47:10,000
canvas oh there we go now it's good so let's say you want to create a

2121
03:47:14,000 --> 03:47:16,000
rectangle and then let's say that you change the color of this rectangle to something like blue as well and maybe

2122
03:47:21,000 --> 03:47:23,000
bring it back to green but then say hey I like the blue one better it matched

2123
03:47:26,000 --> 03:47:28,000
her design more so then you go here and click undo and you can also bring it back to green great also there's

2124
03:47:34,000 --> 03:47:36,000
reactions which don't seem to open right now but when I click the letter e they do do open so let's see what that's

2125
03:47:42,000 --> 03:47:44,000
about I think I forgot to add the switch case for reactions that's why it's not

2126
03:47:48,000 --> 03:47:50,000
working so right here we can say case is reactions make sure to spell it exactly

2127
03:47:54,000 --> 03:47:56,000
like this and then we can set the cursor state to mode cursor mode. reaction

2128
03:48:00,000 --> 03:48:02,000
selector and then break it now if we right click and click reactions they

2129
03:48:05,000 --> 03:48:07,000
show up great that is it for the menu that part is working now as well and as

2130
03:48:12,000 --> 03:48:14,000
we're approaching the end of this amazing build let's try to remember if we still have some little bugs or some Free Drawing Fix

2131
03:48:19,000 --> 03:48:21,000
issues that we have yet to fix I think one of these is our free drawing

2132
03:48:25,000 --> 03:48:27,000
although it technically works it's not being stored or saved anywhere and it

2133
03:48:30,000 --> 03:48:32,000
will not show on other person's screen why is that well you can create it you

2134
03:48:36,000 --> 03:48:38,000
can move it around but you get errors you Cannot drop it and you cannot even

2135
03:48:41,000 --> 03:48:43,000
delete it and if you reload the page you'll notice that it's no longer there

2136
03:48:47,000 --> 03:48:49,000
so let's fix our app to also work with free form drawing to fix our free form

2137
03:48:54,000 --> 03:48:56,000
we have to go back to our page. TSX and there we have to add an additional

2138
03:49:00,000 --> 03:49:02,000
listener we have to add a canvas.on path created so let's

2139
03:49:06,000 --> 03:49:08,000
duplicate this listener right here below collapse it and just modify it to path

2140
03:49:15,000 --> 03:49:17,000
created then we can call a special function handle path created coming from

2141
03:49:21,000 --> 03:49:23,000
lib canvas so make sure to import it and let's see what do we need to pass to it

2142
03:49:26,000 --> 03:49:28,000
we need to pass the options as well as sync shape in storage and the only thing it does is it gets the path object and

2143
03:49:34,000 --> 03:49:36,000
then sets unique ID to that path and then syncs it in storage it is as simp

2144
03:49:39,000 --> 03:49:41,000
simple as that so let's pass sync shape in storage and with that we should be

2145
03:49:46,000 --> 03:49:48,000
good so let's give it a go I'm going to go to our shapes choose free drawing and

2146
03:49:51,000 --> 03:49:53,000
try to draw something right here on our canvas there we go this seems like a Picasso so it should be good now if I

2147
03:49:59,000 --> 03:50:01,000
select it and if I try moving it around that also works and the main question is

2148
03:50:05,000 --> 03:50:07,000
will it sync into other person's device so the first way to test T it is let's

2149
03:50:10,000 --> 03:50:12,000
reload our screen and it's there and the second way to test it is to check it out on another

2150
03:50:17,000 --> 03:50:19,000
browser so if I open up free form and continue drawing right here you can see

2151
03:50:22,000 --> 03:50:24,000
that it actually works but it waits until the shape is completed there we go

2152
03:50:28,000 --> 03:50:30,000
that's interesting now we can also delete all of the individual shapes so

2153
03:50:33,000 --> 03:50:35,000
if we click right here we can delete them there we go so as we're wrapping up I remember that I promised that we're TypeScript Types Fix

2154
03:50:39,000 --> 03:50:41,000
going to fix a couple of typescript any types uh to make it a real proper typescript application so let's start

2155
03:50:46,000 --> 03:50:48,000
from our live. TSX file right here at the top we don't have to import the type

2156
03:50:52,000 --> 03:50:54,000
for the reaction event what we can do instead is just simply remove it from

2157
03:50:57,000 --> 03:50:59,000
where we used it reaction event and just remove it it should be automatically

2158
03:51:03,000 --> 03:51:05,000
understood by live blocks but you can see that these errors are still there

2159
03:51:09,000 --> 03:51:11,000
property value does not exist on type room event well another thing we can do here is where we use this cursor we also

2160
03:51:16,000 --> 03:51:18,000
said as any we don't want to do that we can simply remove it and make it so that

2161
03:51:21,000 --> 03:51:23,000
Li blocks automatically defines the types but for this to work we also have to go into our types so let's navigate

2162
03:51:29,000 --> 03:51:31,000
to types. TS and let's see where we're modifying the presentence so here

2163
03:51:35,000 --> 03:51:37,000
because I wanted to make some quick fixes I put any but we don't don't really need that we don't need to import

2164
03:51:41,000 --> 03:51:43,000
presents or even use it within a live cursor props all of that will work automatically by live blocks automatic

2165
03:51:48,000 --> 03:51:50,000
types so now to make our cursor aware of its existence on the presence we need to

2166
03:51:54,000 --> 03:51:56,000
go to live blocks [Music]

2167
03:52:02,000 --> 03:52:04,000
config.txt type presence and we can say cursor X

2168
03:52:10,000 --> 03:52:12,000
and Y coordinates and we can also make it have a message this way you craft

2169
03:52:16,000 --> 03:52:18,000
your own types like this so now that should help a bit and right in here as

2170
03:52:22,000 --> 03:52:24,000
well we can import that reaction import reaction event that we had from types

2171
03:52:30,000 --> 03:52:32,000
and then we can also export it right from the LI blo config type room event

2172
03:52:35,000 --> 03:52:37,000
is equal to reaction event there we go

2173
03:52:40,000 --> 03:52:42,000
and now if you go back you can see that it's no longer complaining and we know exactly what this cursor is sometimes

2174
03:52:48,000 --> 03:52:50,000
you have to go through a bit of docs to figure out exactly how to use typescript types for a specific package it's going

2175
03:52:54,000 --> 03:52:56,000
to save you in the long run also I noticed we're doing some props drilling here by calling the use others on top of

2176
03:53:02,000 --> 03:53:04,000
live but we're not using it anywhere within the live so let's simply delete

2177
03:53:07,000 --> 03:53:09,000
it from here delete the import as well and then delete where we're passing it

2178
03:53:12,000 --> 03:53:14,000
into the other component we can simply call it within the live cursors it's much cleaner so right here instead of

2179
03:53:19,000 --> 03:53:21,000
just passing the others through props what we can do is just import and use

2180
03:53:26,000 --> 03:53:28,000
others so const others is equal to use others coming from live blocks config

2181
03:53:31,000 --> 03:53:33,000
and I don't believe we have to put it within curly braces so that's now good

2182
03:53:37,000 --> 03:53:39,000
also this message could potentially be n now so we can say or empty string which

2183
03:53:42,000 --> 03:53:44,000
will fix this error tab script is a beautiful Beast once you learn how to

2184
03:53:47,000 --> 03:53:49,000
tame it but if you don't it's just going to annoy you so it's better to invest some time beforehand and then use all of

2185
03:53:54,000 --> 03:53:56,000
the benefits that it provides and stands by your side so with that said we've made our app even better by cleaning

2186
03:54:01,000 --> 03:54:03,000
some of the typescript anyes and check this out if you're having some issues inspecting the collaborative experiences Dev Tool

2187
03:54:08,000 --> 03:54:10,000
you're implementing there's also this crazy developer extension that you can add to your browser there's a cool video

2188
03:54:15,000 --> 03:54:17,000
that shows you exactly how you can use it but in a nutshell it gets added directly to your browser developer tools

2189
03:54:22,000 --> 03:54:24,000
and you can monitor all the collaborative experiences instead of just the components console logs and

2190
03:54:28,000 --> 03:54:30,000
elements pretty cool stuff so you can quickly install it by going to adding to

2191
03:54:35,000 --> 03:54:37,000
Chrome just add it to your browser and once you do that it will be directly

2192
03:54:41,000 --> 03:54:43,000
within your developer tools so if you open it up you'll be able to see live blocks right here and here you can see

2193
03:54:48,000 --> 03:54:50,000
all of the canvas object in this case that is a live map so what we can do is

2194
03:54:54,000 --> 03:54:56,000
I'm going to clear our terminal and you can see that the live map is completely

2195
03:54:59,000 --> 03:55:01,000
empty you can also see inside of which room you are and what is in the storage

2196
03:55:05,000 --> 03:55:07,000
you can track the presents cursor cursor Coler and more so what would happen if

2197
03:55:10,000 --> 03:55:12,000
another user joins I'm going to put this to the side and bring another user in

2198
03:55:16,000 --> 03:55:18,000
and immediately you can see in developer tools that now we can see two other people we can see me and we can see

2199
03:55:22,000 --> 03:55:24,000
other that works very well you can also track their cursor positions cursor colors and more and if we add an element

2200
03:55:30,000 --> 03:55:32,000
right here such as rectangle you can see that it also immediately appears under canvas objects incredible way to just

2201
03:55:38,000 --> 03:55:40,000
Deb bug what's happening track events presentence and just in general improve

2202
03:55:43,000 --> 03:55:45,000
our collaborative experiences now with that said let's get our app live on the Deployment

2203
03:55:49,000 --> 03:55:51,000
internet deploying it won't be as easy as putting it on versel there's one

2204
03:55:55,000 --> 03:55:57,000
extra step we have to do and that's because nextjs will try to render our

2205
03:56:00,000 --> 03:56:02,000
canvas on the server side which can never work canvas has to work within the browser so for that we have to skip s

2206
03:56:08,000 --> 03:56:10,000
SSR and the way to do it is to just wrap everything in a component C and then set

2207
03:56:14,000 --> 03:56:16,000
SSR option to false so let me show you how to do that we can First Take

2208
03:56:20,000 --> 03:56:22,000
absolutely everything we have within our page. TSX so simply select everything by

2209
03:56:27,000 --> 03:56:29,000
saying Commander control a and then Commander control C to copy it delete

2210
03:56:34,000 --> 03:56:36,000
everything from here yeah it's carry I know but just do it and create a new app. TSX file within the app and then

2211
03:56:42,000 --> 03:56:44,000
paste everything there once you do that we'll do a little trick within the page.

2212
03:56:47,000 --> 03:56:49,000
TSX there we'll copy What nextjs suggests us to do and that is Con app is

2213
03:56:56,000 --> 03:56:58,000
equal Dynamic imported from next Dynamic and then callback function with the

2214
03:57:01,000 --> 03:57:03,000
import off in this case are

2215
03:57:07,000 --> 03:57:09,000
slapp and then we simply turn the SSR to false this is how you do it now our

2216
03:57:14,000 --> 03:57:16,000
entire application will be rendered on the client side and we can simply say export default app so let's give it a

2217
03:57:22,000 --> 03:57:24,000
spin if we go back everything works exactly like it did before but now once

2218
03:57:28,000 --> 03:57:30,000
we deploy it we won't have any issues with the client side serice side rendering with that in mind let's create

2219
03:57:34,000 --> 03:57:36,000
a new GitHub repo and push our code to it you can go to to github.com

2220
03:57:40,000 --> 03:57:42,000
slne and create a new repo with a name of something like live blocks figma

2221
03:57:46,000 --> 03:57:48,000
clone I think that will be good and you can create a repo then simply follow the

2222
03:57:53,000 --> 03:57:55,000
commands by opening the terminal stopping it from running we can also delete one and say get in it get ad dot

2223
03:58:04,000 --> 03:58:06,000
get commit DM initial commit

2224
03:58:10,000 --> 03:58:12,000
then you want to modify the branch to main add a remote origin and finally

2225
03:58:17,000 --> 03:58:19,000
push you origin main if you do that and reload you'll be able to see all of your

2226
03:58:23,000 --> 03:58:25,000
code you worked so hard on right here on a public GitHub repo after that you can

2227
03:58:28,000 --> 03:58:30,000
go to ver.com Just create an account or log in and you'll be able to see all of

2228
03:58:34,000 --> 03:58:36,000
your projects on the dashboard we have many project so far most of these belong

2229
03:58:40,000 --> 03:58:42,000
to some of our YouTube videos like this one which will come soon in this 3D portfolio you've seen some time ago we

2230
03:58:47,000 --> 03:58:49,000
definitely need to do another 3D project there's also many projects belonging to

2231
03:58:52,000 --> 03:58:54,000
our master class which is the official JavaScript Mastery boot camp program that helps you advance to Mid and Senior

2232
03:59:00,000 --> 03:59:02,000
positions so if you're interested in joining just go to jm.pro and check it

2233
03:59:05,000 --> 03:59:07,000
out with that in mind look at this there's 's a little issue right here with the Overflow on the vel's card we

2234
03:59:13,000 --> 03:59:15,000
should definitely let them know about that with that in mind we can click add new add a new project and versel should

2235
03:59:22,000 --> 03:59:24,000
be smart enough to automatically see your new project and click Import in this case we do have one

2236
03:59:29,000 --> 03:59:31,000
environment variable so go back to your code go to env. local copy everything

2237
03:59:36,000 --> 03:59:38,000
and simply paste it right here that's going to add the next public live blocks public key and click deploy this process

2238
03:59:44,000 --> 03:59:46,000
usually takes about a minute so let's give it some time and I'll be right back

2239
03:59:50,000 --> 03:59:52,000
and of course we cannot expect that the deployment process of such a long complicated and exciting project will

2240
03:59:57,000 --> 03:59:59,000
just work so we do have a build error right here and it looks like it's

2241
04:00:02,000 --> 04:00:04,000
pointing to the canvas node specifically referencing the loaders belong belonging

2242
04:00:08,000 --> 04:00:10,000
to webpack it looks like we need an appropriate loader to handle this file type so going back to our code we can

2243
04:00:16,000 --> 04:00:18,000
navigate to next. config.js and we need to add a proper weback configuration to

2244
04:00:23,000 --> 04:00:25,000
render canvas we can do that by at the top saying webpack getting its config

2245
04:00:29,000 --> 04:00:31,000
from the Callback function and then specifying

2246
04:00:34,000 --> 04:00:36,000
utf-8 D validate of C commonjs space

2247
04:00:41,000 --> 04:00:43,000
utf-8 DV validate there we go we also need something known as a buffer util

2248
04:00:48,000 --> 04:00:50,000
which is going to be a commonjs buffer util let's make sure to properly enclose this in double quoted strings and

2249
04:00:56,000 --> 04:00:58,000
finally we also need a canvas of a type commonjs canvas now we need to not just

2250
04:01:03,000 --> 04:01:05,000
make this an object or a function block we need to return an object so let's wrap this in in parenthesis there we go

2251
04:01:10,000 --> 04:01:12,000
and then now it will look good without any errors and finally return this

2252
04:01:16,000 --> 04:01:18,000
modified config of course we're just returning the same config right here but what we need to do instead is say config

2253
04:01:27,000 --> 04:01:29,000
externals push and then we do what we have done here so I've made a mistake we

2254
04:01:32,000 --> 04:01:34,000
don't want to enclose it here rather we enclose it right here within this push

2255
04:01:37,000 --> 04:01:39,000
so so that's going to look like this you close it and once we update the externals of the config then we return

2256
04:01:45,000 --> 04:01:47,000
it and now our application should be capable of rendering a canvas and just

2257
04:01:50,000 --> 04:01:52,000
in case we have some tab script errors right here below images we can say tab

2258
04:01:56,000 --> 04:01:58,000
script and we can add ignore build errors which is going to be said to true

2259
04:02:02,000 --> 04:02:04,000
just in case we have a tiny error so it still lets us pass with that in mind you

2260
04:02:07,000 --> 04:02:09,000
can say get add dogit commit dasm and say modify

2261
04:02:13,000 --> 04:02:15,000
config and then get push this will try to automatically redeploy our project so

2262
04:02:18,000 --> 04:02:20,000
no need to try it manually again just go back to your projects open up the

2263
04:02:24,000 --> 04:02:26,000
project go to deployments and you'll see that it's automatically building it and as you can

2264
04:02:31,000 --> 04:02:33,000
see our website has been deployed you can go to project and then click visit

2265
04:02:36,000 --> 04:02:38,000
if you reload you'll see a great loading which is almost instantaneous it just works right up the bat and you can start

2266
04:02:43,000 --> 04:02:45,000
creating additional elements and layouts as if you were in a real figma I'm not a

2267
04:02:49,000 --> 04:02:51,000
great designer but yeah you can definitely do some great stuff here you can also see that this collaboration

2268
04:02:54,000 --> 04:02:56,000
Works immediately because there's another cursor here although it looks like they're away from keyboard there's

2269
04:03:00,000 --> 04:03:02,000
a third one right here as well looks like somebody leaked my deployed URL so let's see if it

2270
04:03:06,000 --> 04:03:08,000
speaks hi there stranger no looks like it's a bit shy

2271
04:03:13,000 --> 04:03:15,000
doesn't matter this is it our live blocks application is now fully complete

2272
04:03:19,000 --> 04:03:21,000
everything works from resizing in real time modifying the elements changing the

2273
04:03:24,000 --> 04:03:26,000
colors as well everything works so seamlessly and you can see it just work

2274
04:03:30,000 --> 04:03:32,000
you can also export to PDF which is great you can create additional elements

2275
04:03:35,000 --> 04:03:37,000
all of that works in real time and and all of that works within your thig pro

2276
04:03:41,000 --> 04:03:43,000
application with that said huge thanks to Li blocks not only for sponsoring

2277
04:03:46,000 --> 04:03:48,000
this video but for building such a phenomenal piece of software that allows us to create these collaborative

2278
04:03:53,000 --> 04:03:55,000
experiences and if you reach the end of this video you truly are the perfect fit

2279
04:03:58,000 --> 04:04:00,000
for our ultimate next gs14 course the course that you just watched building this canvas it's great and it does use

2280
04:04:06,000 --> 04:04:08,000
NEX GS but it does doesn't really dive into depth about all of these cool nextjs features that make it what it is

2281
04:04:14,000 --> 04:04:16,000
such as the hydration error resolving caching Edge versus node runtimes Global State Management client versus server

2282
04:04:21,000 --> 04:04:23,000
data fetching and just ensuring that your app works properly we do that within this course so we have deep dive

2283
04:04:28,000 --> 04:04:30,000
with very detailed lessons build and deploy a complex app and even active

2284
04:04:34,000 --> 04:04:36,000
lessons within which you can test your knowledge not to mention that you'll build one of the best developer apps out

2285
04:04:40,000 --> 04:04:42,000
there which is a modern stack Overflow clone with that said thank you so much

2286
04:04:46,000 --> 04:04:48,000
for being with me of building our figma clone application and have a wonderful

2287
04:04:51,000 --> 04:04:53,000
day 

