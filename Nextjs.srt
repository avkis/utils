1
00:00:00,000 --> 00:00:02,000
do you remember when building a website felt like constructing the Great Wall of China weeks of hard work endless setup

2
00:00:07,000 --> 00:00:09,000
and a maze of steps just to get a simple page online times have changed thanks to

3
00:00:12,000 --> 00:00:14,000
updates in the tech we use you can now host a full-blown Miracle Within hours

4
00:00:18,000 --> 00:00:20,000
to avoid spending time on configuration linting compilation bundling and deployment developers wanted no deserved

5
00:00:26,000 --> 00:00:28,000
a framework that would streamline things meet next year a framework that just

6
00:00:31,000 --> 00:00:33,000
works gets out of your way and lets you do your thing in 2013 Facebook

7
00:00:36,000 --> 00:00:38,000
introduced react a groundbreaking technology that revolutionized web development and created countless job

8
00:00:43,000 --> 00:00:45,000
opportunities fast forward to today and believe it or not the official react documentation now suggests never to use

9
00:00:50,000 --> 00:00:52,000
plain react again instead it recommends building apps using a production grade

10
00:00:55,000 --> 00:00:57,000
full stack react framework nextjs first I'll lead you through a crash course to

11
00:01:01,000 --> 00:01:03,000
explain and visualize essential nextjs Concepts like architecture rendering routing and its full stack features then

12
00:01:08,000 --> 00:01:10,000
together we'll explore those Concepts directly within the code and finally I'll put your skills to the test by

13
00:01:14,000 --> 00:01:16,000
teaching you how to build an Enterprise ready application YC directory now this

14
00:01:20,000 --> 00:01:22,000
crash course will give you a great Foundation but if you're serious about mastering nextjs and taking your skills

15
00:01:25,000 --> 00:01:27,000
to a professional level I've got something special for you the ultimate next GS S course where we go beyond the

16
00:01:32,000 --> 00:01:34,000
basics and tackle next gs's most advanced Enterprise grade features is

17
00:01:37,000 --> 00:01:39,000
now on sale you'll learn everything from optimizing performance and SEO to serverless architecture and handling

18
00:01:44,000 --> 00:01:46,000
realworld production challenges to become a full stack production ready developer check the description for more

19
00:01:51,000 --> 00:01:53,000
details on how to enroll if you're wondering if all companies are shifting to NEX GS and whether it's even worth

20
00:01:56,000 --> 00:01:58,000
learning the answer is a resounding yes at this point what major company isn't

21
00:02:02,000 --> 00:02:04,000
using nextjs big names like Netflix Tik Tok twitch Hulu notion Nike and even

22
00:02:08,000 --> 00:02:10,000
open AI are building their websites with it the nextjs hype is real and if you

23
00:02:13,000 --> 00:02:15,000
don't dive in now you could miss out on some life-changing opportunities so now is the perfect time to impress potential

24
00:02:20,000 --> 00:02:22,000
employers and show them you mean business and how are you going to do that by actually building your own full

25
00:02:27,000 --> 00:02:29,000
stack NEX GS app that's packed with Enterprise features like performance and speed optimizations to achieve Lightning

26
00:02:34,000 --> 00:02:36,000
Fast first contentful paint SEO optimization and server side rendering strategies for high search engine

27
00:02:40,000 --> 00:02:42,000
rankings centuries performance tracking allowing you to monitor your app in real time identify bottlenecks and resolve

28
00:02:47,000 --> 00:02:49,000
user issues quickly improved developer experience to ship apps faster a serverless architecture that will allow

29
00:02:53,000 --> 00:02:55,000
you to scale your apps easy management of all your apps content using sanity

30
00:02:59,000 --> 00:03:01,000
I'll also teach you how and when to implement CDN caching for improved performance and much more to always have

31
00:03:05,000 --> 00:03:07,000
employers knocking at your door but now have you heard of why combinator that famous startup accelerator that gave

32
00:03:12,000 --> 00:03:14,000
birth to so many popular apps we use every day like stripe Airbnb twitch

33
00:03:17,000 --> 00:03:19,000
coinbase and even Reddit today you'll build your version allowing users to

34
00:03:22,000 --> 00:03:24,000
create and share their startup with the world once they submit it it appears instantly without needing to reload the

35
00:03:28,000 --> 00:03:30,000
page they can also search by title username or category to get instant results once you find the startup you

36
00:03:34,000 --> 00:03:36,000
like you can navigate to its details and see how many other people have found it interesting before you you'll integrate

37
00:03:40,000 --> 00:03:42,000
GitHub authentication via next off so users can log in create and submit

38
00:03:45,000 --> 00:03:47,000
startups with markdown support with a dedicated profile page where you can find all other startups from that user

39
00:03:52,000 --> 00:03:54,000
you'll Implement all that using the latest nextjs features like PPR next

40
00:03:57,000 --> 00:03:59,000
after new forms server component HMR cache and server actions you'll also

41
00:04:02,000 --> 00:04:04,000
learn how to use the sanity content operating system an API based platform for structured content that pairs

42
00:04:08,000 --> 00:04:10,000
perfectly with NEX GS and other popular front-end Frameworks that companies like Shopify puma figma and tag group use to

43
00:04:15,000 --> 00:04:17,000
manage their content it lets you skip the boring Parts allowing you to focus on what truly matters bringing your

44
00:04:21,000 --> 00:04:23,000
project to life sanity is doubling down on its role within the next GS ecosystem it has a very generous free tier and no

45
00:04:28,000 --> 00:04:30,000
credit card is required even better you'll get a free upgrade just because you're watching this video click the link in the description click get

46
00:04:35,000 --> 00:04:37,000
started go through a quick onboarding and you'll get your free upgrade so what are you waiting for let's dive right

47
00:04:41,000 --> 00:04:43,000
into the wait I have some breaking and exclusive news webstorm just became free

48
00:04:47,000 --> 00:04:49,000
yep you've heard that right that professional web focused IDE with tons of features that used to cost like a

49
00:04:55,000 --> 00:04:57,000
hundred bucks per year is now completely free for non-commercial use and I'm not talking about a free trial or freemium

50
00:05:02,000 --> 00:05:04,000
but completely free I've been using webstorm for a long time and love its speed search G integration inline type

51
00:05:09,000 --> 00:05:11,000
suggestions and more so if you're a student hobbyist still learning or contributing to open source you can out

52
00:05:15,000 --> 00:05:17,000
try out all of those fancy features that used to be paid and prevented you from using this powerful IDE click the link

53
00:05:22,000 --> 00:05:24,000
in the description and try out webstorm today Next.js Benefits

54
00:05:30,000 --> 00:05:32,000
let me start with a very important first question what does nygs have that react

55
00:05:36,000 --> 00:05:38,000
doesn't in simple terms nextjs simplifies the development process and

56
00:05:41,000 --> 00:05:43,000
optimizes your applications it does that through its primary functionalities some of which you have to actively decide to

57
00:05:47,000 --> 00:05:49,000
use and others that you get out of the box just by switching to nextjs along with the course I've also prepare the

58
00:05:54,000 --> 00:05:56,000
ultimate next gsse book think of it as a handbook that covers everything you need to know to become a Prof professional

59
00:05:59,000 --> 00:06:01,000
nextjs developer from the nextjs road map Concepts and features to Advanced

60
00:06:05,000 --> 00:06:07,000
tips and tricks for building scalable projects you can build and deploy to put on your portfolio it's a premium and

61
00:06:11,000 --> 00:06:13,000
paid ebook with over 200 pages but I've made it entirely free for the first

62
00:06:16,000 --> 00:06:18,000
1,000 developers that downloaded clicking the link in the description so don't miss out the first of NEX gs's

63
00:06:22,000 --> 00:06:24,000
benefits is its architecture originally react had two types of components functional and class-based components

64
00:06:29,000 --> 00:06:31,000
but now components are also categorized by where they run if a component runs in the user's browser it's called a client

65
00:06:36,000 --> 00:06:38,000
component and if it runs on the server it's called a server component this division was released in react 19 and

66
00:06:43,000 --> 00:06:45,000
although Frameworks Like Remix and asro also supported nextjs was the first to adopt it and fully utilize it since

67
00:06:50,000 --> 00:06:52,000
server components are more performant nextjs automatically converts every new component you create into a server

68
00:06:56,000 --> 00:06:58,000
component unless you specifically instructed not to only if you need some browser functionalities but more on that

69
00:07:02,000 --> 00:07:04,000
later the second nextjs benefit is in the way it handles rendering while react

70
00:07:07,000 --> 00:07:09,000
19 supports server components nextjs extends them to more advanced rendering

71
00:07:12,000 --> 00:07:14,000
strategies allowing you to choose exactly where and when they'll be rendered optimizing the performance even

72
00:07:17,000 --> 00:07:19,000
further first is client side rendering which happens on your browser the server sends a basic HTML document and

73
00:07:24,000 --> 00:07:26,000
JavaScript code which the browser executes to render the components and display the website and the second is

74
00:07:30,000 --> 00:07:32,000
serers side rendering which involves rendering the web page on the server before transmitting it to your browser

75
00:07:36,000 --> 00:07:38,000
when you visit a page the server processes and renders the components on the server and sends back fully rendered

76
00:07:41,000 --> 00:07:43,000
HTML and JavaScript code to the client instantly displaying the website but why does this matter well on top of the fact

77
00:07:48,000 --> 00:07:50,000
that your website will load in 300 milliseconds and have page speed insights that look like this service

78
00:07:54,000 --> 00:07:56,000
side rendering will significantly improve your website's search engine optimization client side rendering makes

79
00:07:59,000 --> 00:08:01,000
it almost impossible for search engines to crawl and index your websites as they're completely empty nextjs solves

80
00:08:06,000 --> 00:08:08,000
this issue by sending pre-rendered code giving Google plenty of stuff to rank us on the next big nextjs benefit is of

81
00:08:12,000 --> 00:08:14,000
course routing in react you need to install an additional react router package to create routes on the other

82
00:08:18,000 --> 00:08:20,000
hand nextjs doesn't require installing a separate routing package and uses a much more intuitive approach to routing

83
00:08:25,000 --> 00:08:27,000
called file based routing each folder's name becomes a routes path for example a

84
00:08:31,000 --> 00:08:33,000
folder named about will create a new slab route super simple right and

85
00:08:37,000 --> 00:08:39,000
connecting directly to the routing system the next best thing about NEX GS is its Evolution from a simple frontend

86
00:08:43,000 --> 00:08:45,000
library to a full stack framework using the same file-based routing system I just described you can also create

87
00:08:49,000 --> 00:08:51,000
serverless functions to handle native backend API requests this means you can

88
00:08:54,000 --> 00:08:56,000
create an API endpoint by simply creating a file called route. Js in a specific folder without needing to worry

89
00:09:01,000 --> 00:09:03,000
about the server infrastructure NEX GS takes care of scaling automatically and there are many other scaling features

90
00:09:07,000 --> 00:09:09,000
that NEX GS provides out of the box like automatic code splitting while code splitting in react is possible it

91
00:09:14,000 --> 00:09:16,000
requires manual configuration especially as the application grows next GS automates code splitting by default well

92
00:09:20,000 --> 00:09:22,000
what does that mean it means that when a user navigates to a different page only the code for that page is loaded which

93
00:09:26,000 --> 00:09:28,000
significantly speeds up page load times pretty handy right but that was just one out of many built-in performance

94
00:09:32,000 --> 00:09:34,000
optimizations that NEX GS provides font optimization reduces layout shift improves loading Time by pre-loading

95
00:09:38,000 --> 00:09:40,000
font files and reduces Reliance on external services like Google fonts image optimization automatically

96
00:09:45,000 --> 00:09:47,000
compresses images and applies lazy loading CDN support and more script optimization optimizes even thirdparty

97
00:09:52,000 --> 00:09:54,000
scripts and all of these gr optimizations come right out of the box with nextjs and it's not just

98
00:09:57,000 --> 00:09:59,000
performance nextjs is the definition of Cutting Edge it supports the latest features such as react compiler MDX file

99
00:10:04,000 --> 00:10:06,000
integration managing most SEO related tags analytics that run without blocking UI fast refresh server components hot

100
00:10:11,000 --> 00:10:13,000
module replacement and more oh I know that was a lot right if you want me to slow down a lot and provide you with a

101
00:10:18,000 --> 00:10:20,000
deeper understanding of all of these Concepts like architecture and rendering I'd highly recommend checking out the

102
00:10:23,000 --> 00:10:25,000
ultimate nextjs course it covers all important Concepts spread out throughout many modules and individual ual lessons

103
00:10:30,000 --> 00:10:32,000
and more importantly it also includes active lessons which require you to actively apply what you've learned up to

104
00:10:35,000 --> 00:10:37,000
this point the ultimate next GS course has secured its place as the best nextjs course in the world and from today it

105
00:10:42,000 --> 00:10:44,000
just got updated to the latest nextjs version so check it out in the description with that said if you're not

106
00:10:47,000 --> 00:10:49,000
ready to get that course yet that's totally okay stay with me and I'll teach you everything I know about next GS in

107
00:10:53,000 --> 00:10:55,000
this crash course to get started create a new empty folder on your desktop and Next.js Theory & Practical

108
00:10:58,000 --> 00:11:00,000
open up your terminal once you're there run MPX

109
00:11:03,000 --> 00:11:05,000
create-- apppp add latest and press enter after that press y to install the

110
00:11:10,000 --> 00:11:12,000
installer and you'll be prompted to answer a couple of questions for the project name just type do slash because

111
00:11:16,000 --> 00:11:18,000
we're already in the folder within which we want to create our nygs app in this case say yes for typescript yes for

112
00:11:23,000 --> 00:11:25,000
eslint yes for tailin CSS in this case we don't need a source directory we

113
00:11:28,000 --> 00:11:30,000
definitely will be using the app router with its latest functionalities as well as the turbo pack which runs your

114
00:11:35,000 --> 00:11:37,000
application more smoothly we don't need to customize the import Alias the default one is fine and that's it your

115
00:11:41,000 --> 00:11:43,000
application will soon get initialized with all of the dependencies needed to run it there we go that was a success

116
00:11:48,000 --> 00:11:50,000
now that your project is set up and ready to go you'll notice many fs and folders so let me walk you through them

117
00:11:55,000 --> 00:11:57,000
from bottom to top the first one on our list is TS config f.j Json this is the

118
00:12:01,000 --> 00:12:03,000
configuration file for typescript it defines what should be type checked ignored and the rules to follow next we

119
00:12:09,000 --> 00:12:11,000
have a Tailwind doc config.txt Tailwind by customizing

120
00:12:16,000 --> 00:12:18,000
colors sizes Shadows plugins or anything else you might need you know about read me right it's a simple marked done file

121
00:12:23,000 --> 00:12:25,000
that explains how to run the project next we have a post CSS config MJS it's

122
00:12:28,000 --> 00:12:30,000
a configuration file for post CSS a tool used to process CSS with different

123
00:12:33,000 --> 00:12:35,000
plugins in this case it uses tailin CSS as a plugin which allows you to use

124
00:12:38,000 --> 00:12:40,000
utility first classes in your project package lock Json is a file that locks

125
00:12:44,000 --> 00:12:46,000
the version of dependencies and their

126
00:12:49,000 --> 00:12:51,000
subpena same versions package Jon is a bit simpler and it contains all the

127
00:12:54,000 --> 00:12:56,000
current dependencies and scripts there's a Dev script which starts nextjs in development mode with hot module

128
00:13:01,000 --> 00:13:03,000
reloading error reporting and more build creates an optimized production build of your app starts simply starts next GS in

129
00:13:09,000 --> 00:13:11,000
production mode and there's also lint which runs es lint for all files in the source app directory and more finally

130
00:13:16,000 --> 00:13:18,000
you can also see three very important dependencies react react Dom and the

131
00:13:22,000 --> 00:13:24,000
current version of next by the time you're watching this video you should just be able to see 15 right here after

132
00:13:29,000 --> 00:13:31,000
after package Jon we have a next env. D.S which is a typescript declaration

133
00:13:34,000 --> 00:13:36,000
file for nextjs and as it says right here this file should not be edited it's specifically for

134
00:13:40,000 --> 00:13:42,000
nextjs on the other hand next.

135
00:13:46,000 --> 00:13:48,000
config.sys features such as experimental options image settings build settings

136
00:13:52,000 --> 00:13:54,000
and more and you all know the good old get ignore it's very important not to miss adding something there thankfully

137
00:13:58,000 --> 00:14:00,000
next JS adds the EnV for us that's good no more leaked environment variables

138
00:14:04,000 --> 00:14:06,000
after that we have a lint rc. Json allowing you to configure your linting options then we dive into folders first

139
00:14:11,000 --> 00:14:13,000
we have a public folder which contains static assets always put your images and

140
00:14:17,000 --> 00:14:19,000
other static data here and then of course there's the node modules the heaviest object in the universe Jokes

141
00:14:24,000 --> 00:14:26,000
Aside it is a folder containing all the dependencies or packages needed to run

142
00:14:29,000 --> 00:14:31,000
your application and finally there's the app folder the most important folder in

143
00:14:35,000 --> 00:14:37,000
every nextjs application in the app folder of course we have our primary homepage page. DSX but before we check

144
00:14:43,000 --> 00:14:45,000
out the rest of these pages in detail let's first run our application to see it in the browser I'll open up the

145
00:14:49,000 --> 00:14:51,000
terminal and press mpm run Dev this will run it on Local Host

146
00:14:55,000 --> 00:14:57,000
3000 so open it up there we go nextjs get started by editing app page. DSX

147
00:15:03,000 --> 00:15:05,000
save and see your changes instantly well this is the new version of the boilerplate page I like it you'll also

148
00:15:09,000 --> 00:15:11,000
notice something at the bottom left I'll tell you what that is later on but for now the page you've just seen is right

149
00:15:15,000 --> 00:15:17,000
here within page. DSX this file represents the homepage or the forward

150
00:15:21,000 --> 00:15:23,000
SL route of your site by default it contains some boilerplate code so let's

151
00:15:26,000 --> 00:15:28,000
remove it and return a single H1 that says welcome to next.js we can also give

152
00:15:33,000 --> 00:15:35,000
it a class name of text- 3XL if I save it and go back to the browser you'll see

153
00:15:40,000 --> 00:15:42,000
the changes instantly thanks to HMR hot module replacement among the other

154
00:15:45,000 --> 00:15:47,000
folders that we have here the first one are fonts and this is where you can store your font files it's actually

155
00:15:51,000 --> 00:15:53,000
preferable to using something like Google fonts think of it as self-hosting your own fonts there's a favicon Ico

156
00:15:59,000 --> 00:16:01,000
it's a file that appears on your browser's tab then there's the global. CSS file where you can write all of your

157
00:16:05,000 --> 00:16:07,000
custom CSS or simply import tailin CSS after that we have a layout. DSX this is

158
00:16:13,000 --> 00:16:15,000
the main entry point for your application anything you do here will be applied across all pages and routes

159
00:16:19,000 --> 00:16:21,000
that's why here we're importing the fonts the Styles and the metadata for

160
00:16:25,000 --> 00:16:27,000
example let's change the metadata from create next app to something like hello

161
00:16:31,000 --> 00:16:33,000
nextjs I've even added a waving emoji and even without reloading you can see

162
00:16:37,000 --> 00:16:39,000
the changes in your browser and I know many of you will wonder what kind of browser is this I'm using Arc you can

163
00:16:42,000 --> 00:16:44,000
check it out I like it quite a lot and finally we're getting back to the page. TSX where we initially made those

164
00:16:48,000 --> 00:16:50,000
changes that's it that's the most important folder of your app and all of the changes that you make to your app

165
00:16:53,000 --> 00:16:55,000
will go inside of this app folder okay okay now that you're familiar with the

166
00:16:59,000 --> 00:17:01,000
entire nextjs application structure let's get our hands dirty at the start of the crash course I was telling you a

167
00:17:05,000 --> 00:17:07,000
bit about architecture where you can write two different types of components client and server components if you

168
00:17:12,000 --> 00:17:14,000
remember I said that every component you create nextjs will by default turn into

169
00:17:17,000 --> 00:17:19,000
a server component but is that really the case here on the homepage we have a component saying welcome to nextjs let's

170
00:17:25,000 --> 00:17:27,000
add a conso log before the return statement consol log what am I I was

171
00:17:32,000 --> 00:17:34,000
about to start what am I server or client component but it looks like our AI autocomplete is having a bit of an

172
00:17:38,000 --> 00:17:40,000
existential crisis it's saying what am I doing here but yeah I'll just add server

173
00:17:44,000 --> 00:17:46,000
or client let's see which type of component is this by default we have

174
00:17:50,000 --> 00:17:52,000
absolutely nothing here just export default function home where we have a consol log and an H1 statement where do

175
00:17:56,000 --> 00:17:58,000
you think this consol log will appear do you think will be able to see this conso log in the browser well up to this point

176
00:18:02,000 --> 00:18:04,000
I would tell you no it's not going to appear in your browser because this is a serverside component but would you look

177
00:18:08,000 --> 00:18:10,000
at this xgs steam knew that some of us might be searching for this cons log in the browser so even though technically

178
00:18:15,000 --> 00:18:17,000
it shouldn't be showing here they're still showing it to us but they have added this server tag at the top left so

179
00:18:21,000 --> 00:18:23,000
we know it's actually rendering from the server pretty cool nextjs but if you actually knew what you were doing you

180
00:18:28,000 --> 00:18:30,000
would IM immediately go to the terminal to find your console log and here it is

181
00:18:33,000 --> 00:18:35,000
so now we know that this is actually rendering on the server server components are rendered on the server so

182
00:18:40,000 --> 00:18:42,000
this brings me to the topic of react server components they're the components that are rendered on the server and

183
00:18:46,000 --> 00:18:48,000
their HTML output is then sent to the client since they're rendered in the server they can access serverside

184
00:18:53,000 --> 00:18:55,000
resources directly like databases or defile system this helps reduce the

185
00:18:58,000 --> 00:19:00,000
amount of JavaScript sent to the client improving performance server components are excellent when you need direct

186
00:19:05,000 --> 00:19:07,000
access to serers side resources like accessing files in a file system or you

187
00:19:10,000 --> 00:19:12,000
want to keep sensitive information well sensitive such as access tokens and other Keys safe on the server all right

188
00:19:18,000 --> 00:19:20,000
but if server components really are better why can't everything be a server

189
00:19:23,000 --> 00:19:25,000
component well if your component requires browser interactivity such as clicking buttons navigating to different

190
00:19:30,000 --> 00:19:32,000
pages and submitting forms then you need to turn it into a client component so

191
00:19:36,000 --> 00:19:38,000
what are react client components client components are of course rendered on the

192
00:19:41,000 --> 00:19:43,000
client side and in this case client side simply means the browser to use them in

193
00:19:47,000 --> 00:19:49,000
nextjs you must add a use client directive at the top of the component in our case let's do that by creating a new

194
00:19:55,000 --> 00:19:57,000
folder within the app folder and call it components and within it create a new file called

195
00:20:01,000 --> 00:20:03,000
hello. DSX right at the top you can add that use client directive that I was telling

196
00:20:08,000 --> 00:20:10,000
you about and then you can simply create a new functional component called hello

197
00:20:13,000 --> 00:20:15,000
that simply returns a div with an H1 that says hello and I've also added a

198
00:20:19,000 --> 00:20:21,000
console log saying I am a clan component see this one doesn't have an existential

199
00:20:25,000 --> 00:20:27,000
crisis it knows what it is now that you've created it let's go back to the page. TSX let's wrap this H1 within a

200
00:20:32,000 --> 00:20:34,000
react fragment allowing us to add another adjacent element in this case we'll

201
00:20:38,000 --> 00:20:40,000
simply import the hello component coming from at SLA SL components SLO now let's

202
00:20:46,000 --> 00:20:48,000
check the terminal okay we don't see that conso log there but that makes sense right because hello knows it's a

203
00:20:54,000 --> 00:20:56,000
client component but if we go into the browser there we go I am I am a client

204
00:20:59,000 --> 00:21:01,000
component coming from hello. DSX but wait I think I initially missed it but

205
00:21:04,000 --> 00:21:06,000
now I see it I am a client component is so confident that it appears right here too but why or how is that happening

206
00:21:12,000 --> 00:21:14,000
well this is because server components are rendered only on the server side while client components are pre-rendered

207
00:21:20,000 --> 00:21:22,000
on the server side to create a static shell and then hydrate it on the client

208
00:21:26,000 --> 00:21:28,000
side this means that everything within the the client component that doesn't require interactivity or isn't dependent

209
00:21:33,000 --> 00:21:35,000
on the browser is still rendered on the server the code or parts that rely on

210
00:21:38,000 --> 00:21:40,000
the browser or require interactivity are left as placeholders during server side

211
00:21:44,000 --> 00:21:46,000
pre-rendering when they reach the client the browser then renders the client components and fills in the placeholders

212
00:21:51,000 --> 00:21:53,000
left by the server I hope that makes sense and that answers the question of what is serers side pre-rendering a

213
00:21:58,000 --> 00:22:00,000
pretty cool feature by nextjs I hope that's clear now but if you're still unsure take a second to pause it and

214
00:22:05,000 --> 00:22:07,000
rewatch it until it clicks you can also add some additional cons logs or components and then render them within

215
00:22:11,000 --> 00:22:13,000
the page. DSX don't proceed further if that doesn't make sense and for a deeper

216
00:22:16,000 --> 00:22:18,000
dive with clearer explanations and more visuals I would recommend checking out the ultimate nextjs course where I break

217
00:22:23,000 --> 00:22:25,000
down the entire client server architecture in detail so finally when

218
00:22:29,000 --> 00:22:31,000
should you allow nextjs to turn your components into server side components and when should you manually change them

219
00:22:35,000 --> 00:22:37,000
to client side well A good rule of thumb is to leave it as server side component

220
00:22:40,000 --> 00:22:42,000
until you need some browser interactivity at which point you'll most likely get an error and then you can add

221
00:22:45,000 --> 00:22:47,000
the use client directive at the top but if you want to understand on a deeper level when should you use each one

222
00:22:52,000 --> 00:22:54,000
always refer to this table within the nextjs docs I'll make sure to link it as an essential resource within the ebook

223
00:22:58,000 --> 00:23:00,000
that you can download this is the best table that simply explains when you need something to be a server or a client

224
00:23:04,000 --> 00:23:06,000
component depending on what you need that component to do now it's time to dive into routing nextjs uses a file

225
00:23:12,000 --> 00:23:14,000
based routing system and doing everything on a single page is boring right currently we only have one route

226
00:23:18,000 --> 00:23:20,000
which is the homepage so how do we create a new route like forward

227
00:23:24,000 --> 00:23:26,000
slab it is as simple as creating a new folder and a file in the app directory create a new folder

228
00:23:32,000 --> 00:23:34,000
and name it about and within that folder create a new page. TSX file within there you can

229
00:23:39,000 --> 00:23:41,000
create a single functional component that returns a div that says about now go back to the browser and simply add

230
00:23:47,000 --> 00:23:49,000
for slab to your URL and if I zoom it in a lot there we

231
00:23:54,000 --> 00:23:56,000
go the route is being displayed this is how you create routes in xgs it uses an

232
00:24:01,000 --> 00:24:03,000
intuitive file-based routing system where folders are used to define routes

233
00:24:06,000 --> 00:24:08,000
the folder name becomes the route name and the page that the aect inside of it becomes a file that gets rendered for

234
00:24:13,000 --> 00:24:15,000
that route it's a special file naming convention for displaying that route's content but in most cases that won't be

235
00:24:20,000 --> 00:24:22,000
enough you'll need nested routes let's say you're developing an admin dashboard within this application and you want to

236
00:24:26,000 --> 00:24:28,000
create a Route 4 dashboard users and dashboard analytics of course you can't

237
00:24:33,000 --> 00:24:35,000
create two folders with the same name this is where nested routes come in handy let's create a new folder called

238
00:24:40,000 --> 00:24:42,000
dashboard inside of which we'll create two additional folders one will be

239
00:24:45,000 --> 00:24:47,000
called users and another one will be called analytics and both of them will

240
00:24:51,000 --> 00:24:53,000
contain a special page. DSX file there we go you get one and you get one too

241
00:24:59,000 --> 00:25:01,000
within them we can simply run our afce if you don't have that Quick Command you can install it as a package it's called

242
00:25:06,000 --> 00:25:08,000
react Snippets and then within this one we can call it users we can duplicate that and we can

243
00:25:12,000 --> 00:25:14,000
also add it within analytics and if you go back to your browser go to forward SL

244
00:25:18,000 --> 00:25:20,000
dashboard slash users you can see users and if you go to/ analytics you can see

245
00:25:26,000 --> 00:25:28,000
analytics but of course if you go just to dashboard itself it's going to be a 404 here's a quick question for you do

246
00:25:33,000 --> 00:25:35,000
you know how you would create a separate dashboard homepage if you wanted to the

247
00:25:39,000 --> 00:25:41,000
answer is simply add another page. DSX within the dashboard folder itself yes

248
00:25:45,000 --> 00:25:47,000
you can have a dashboard page and then dashboard nested routes but this still

249
00:25:50,000 --> 00:25:52,000
may not be enough in many cases you'll also need Dynamic routes what if you

250
00:25:56,000 --> 00:25:58,000
want to display each user's profile in the dashboard let's say we have four

251
00:26:01,000 --> 00:26:03,000
predefined users in the dashboard users page that's going to look something like this users with in div and then we have

252
00:26:08,000 --> 00:26:10,000
an H1 and a UL with four different users now let's say you want to show full user

253
00:26:13,000 --> 00:26:15,000
details on the page when you click on each one of these users say we want to direct them to dashboard users user one

254
00:26:21,000 --> 00:26:23,000
and then dashboard users user 2 and so on we can't create these folders

255
00:26:27,000 --> 00:26:29,000
manually as we don't know how many users will there be this is what dynamic routing is all about a route where part

256
00:26:35,000 --> 00:26:37,000
of the URL can change or be dynamic typically based on the user input or

257
00:26:40,000 --> 00:26:42,000
specific data in the database creating Dynamic routes in nextjs is simple all

258
00:26:46,000 --> 00:26:48,000
you have to do is wrap the part that changes that is dynamic in square brackets in our case it'll be the user

259
00:26:53,000 --> 00:26:55,000
ID so let's create a new folder called ID within the users folder and make sure

260
00:27:01,000 --> 00:27:03,000
to wrap it within square brackets that's the rule inside of that file create a

261
00:27:06,000 --> 00:27:08,000
new page. TSX and run RFC to create a

262
00:27:12,000 --> 00:27:14,000
generic user Details page now let's go back to the users page

263
00:27:18,000 --> 00:27:20,000
and let's make these users clickable doing that is pretty simple we just have to use NEX gs's link

264
00:27:26,000 --> 00:27:28,000
component it looks like this you import it from next SL link you give it an hre

265
00:27:33,000 --> 00:27:35,000
to where you want to go and in this case let's make it point to dashboard slash

266
00:27:39,000 --> 00:27:41,000
users slash1 and let's say user one we can of

267
00:27:45,000 --> 00:27:47,000
course duplicate this a few more times so let's put it within an Li and

268
00:27:50,000 --> 00:27:52,000
properly close it and 1 2 3 there we go and we can also

269
00:27:57,000 --> 00:27:59,000
change their name GES 2 3 4 now if I go back to the browser I can actually click

270
00:28:03,000 --> 00:28:05,000
on these links and look they let me to the user Details page but they all do

271
00:28:09,000 --> 00:28:11,000
right three four they're all relating to the same user Details page or the page

272
00:28:16,000 --> 00:28:18,000
is technically different because right here you can see it says users one and if you go to users 2 it's going to say

273
00:28:22,000 --> 00:28:24,000
users 2 but how do we extract the different information about each one of the the users let me show you I'll go

274
00:28:30,000 --> 00:28:32,000
back to user Details page and we can extract this Dynamic parameter from the

275
00:28:36,000 --> 00:28:38,000
folder from the params object you destructure right here at the top of the

276
00:28:41,000 --> 00:28:43,000
function and then you say params since we're using typescript we also need to define the type of the params it'll be

277
00:28:48,000 --> 00:28:50,000
an object containing a single ID which will be of a type string and how do I know that it will contain a single

278
00:28:54,000 --> 00:28:56,000
property called ID of a typ string well that's because we called this Dynamic route ID by saying ID within square

279
00:29:03,000 --> 00:29:05,000
brackets if you said something like name here you would be able to extract it by saying something like name in this case

280
00:29:10,000 --> 00:29:12,000
let's destructure the ID from pams by saying const ID is equal to pams or you

281
00:29:17,000 --> 00:29:19,000
can also use the dot notation saying pam. ID finally now we can say user profile

282
00:29:25,000 --> 00:29:27,000
and then we can show the actual ID let's actually turn this into H1 and give it a

283
00:29:31,000 --> 00:29:33,000
class name of text- 3XL so we can see it better now if you go back you can see

284
00:29:37,000 --> 00:29:39,000
user profile 2 user profile 3 4 and so on and in real life this would work

285
00:29:44,000 --> 00:29:46,000
exactly the same you will always be fetching just the user ID but then from

286
00:29:49,000 --> 00:29:51,000
that page you can make a call to the database that'll give you all the other user information such as their Avatar

287
00:29:56,000 --> 00:29:58,000
full name username and more more so now you know what prams are and if you want

288
00:30:01,000 --> 00:30:03,000
to get access to this information such as this ID elsewhere and not within an xgs page you can use a client component

289
00:30:09,000 --> 00:30:11,000
hook called use params that lets you read routes Dynamic parameters filled in

290
00:30:14,000 --> 00:30:16,000
by the current URL next let's learn about layout earlier I told you that the

291
00:30:19,000 --> 00:30:21,000
layout. TSX file is the main starting point of our app to demonstrate this let

292
00:30:25,000 --> 00:30:27,000
me add a text of root before run in the children I'll do that right here and

293
00:30:31,000 --> 00:30:33,000
once again I'll make it H1 with a class name of text- 3XL and

294
00:30:38,000 --> 00:30:40,000
I'll say root now if you check out the homepage it'll say root welcome to nextjs then if

295
00:30:45,000 --> 00:30:47,000
you go to slab you'll see root about or if you go to dashboard SL users if it

296
00:30:53,000 --> 00:30:55,000
doesn't appear automatically for you you might need to reload your server by opening up the ter Al pressing contrl C

297
00:31:00,000 --> 00:31:02,000
to stop it and then rerunning mpm runev but you get the point rout appears on

298
00:31:06,000 --> 00:31:08,000
top of all the pages this is because layout. TSX acts as the parent for all

299
00:31:12,000 --> 00:31:14,000
of these routes it allows you to share UI elements across multiple Pages for

300
00:31:19,000 --> 00:31:21,000
example you can place features like a navbar or a footer in the layout and

301
00:31:25,000 --> 00:31:27,000
they'll appear on all children routes saving you you from having to import them on every page simply add them once

302
00:31:32,000 --> 00:31:34,000
in layout. TSX and they'll be available wherever needed in nextjs a root layout

303
00:31:38,000 --> 00:31:40,000
is always required but you can create additional layouts if necessary let's say you want to render a

304
00:31:45,000 --> 00:31:47,000
specific UI just for the dashboard routes we can do that by adding another

305
00:31:52,000 --> 00:31:54,000
layout. TSX right here within the dashboard the name has to be layout

306
00:31:58,000 --> 00:32:00,000
don't try something else otherwise nextjs won't recognize it creating a new layout is as simple as creating a new

307
00:32:05,000 --> 00:32:07,000
functional component and then getting children right here just to make typescript happy you can also Define

308
00:32:12,000 --> 00:32:14,000
additional types such as children is equal to react node and you might need

309
00:32:17,000 --> 00:32:19,000
to import react there we go now everybody's happy within this div we can then render

310
00:32:23,000 --> 00:32:25,000
children and the children in this case will be all other pages that you showing within this layout but if you want to

311
00:32:31,000 --> 00:32:33,000
add some kind of a special dashboard nav bar so let's say dashboard then you can

312
00:32:36,000 --> 00:32:38,000
add it to the layout and let's also apply the same styles by giving it a class name equal to text- 3XL so now if

313
00:32:44,000 --> 00:32:46,000
you reload you can see root this is coming from the root layout and then dashboard is coming from the dashboard

314
00:32:51,000 --> 00:32:53,000
layout just imagine that these are different pieces of the UI that we're showing on different screens so

315
00:32:57,000 --> 00:32:59,000
dashboard users and dashboard analytics has both root and dashboard but as soon

316
00:33:02,000 --> 00:33:04,000
as you exit the dashboard route group you're back to just rout I hope this makes sense but there's more route

317
00:33:11,000 --> 00:33:13,000
groups let's say you don't want the rot layout to appear in the dashboard routes

318
00:33:16,000 --> 00:33:18,000
and only show up in non dashboard routes like home about and more this means that

319
00:33:22,000 --> 00:33:24,000
you'd need a separate nav bar for the dashboard and another one for the non- dashboard routes that's pretty similar

320
00:33:28,000 --> 00:33:30,000
how things work in real life right in such scenarios you can use route groups

321
00:33:34,000 --> 00:33:36,000
they allow you to organize your route segments and project structure without impacting the URL path this means that

322
00:33:42,000 --> 00:33:44,000
you can create folders but unlike nested routes they won't show up in the URL you

323
00:33:47,000 --> 00:33:49,000
do that by wrapping the folder name inside parentheses in our case let's create two different folders one will be

324
00:33:55,000 --> 00:33:57,000
called dashboard in parentheses and the other one will be called root in

325
00:34:00,000 --> 00:34:02,000
parenthesis as well now move the dashboard folder within the dashboard in

326
00:34:06,000 --> 00:34:08,000
parenthesis and move the homepage and the about folder in the

327
00:34:11,000 --> 00:34:13,000
root now remove the root from the root layout file this let's say this is a

328
00:34:17,000 --> 00:34:19,000
root navigation bar and add another layout. TSX file within the root route

329
00:34:23,000 --> 00:34:25,000
group once again it is a single functional component that accepts children and then now you can render the

330
00:34:31,000 --> 00:34:33,000
nav bar right here so let's do an H1 and this case let's give it a class name

331
00:34:36,000 --> 00:34:38,000
equal to text- 3XL and let's simply say navbar and you must render children in

332
00:34:43,000 --> 00:34:45,000
every layout file so let's render them below and one last change is to move the

333
00:34:48,000 --> 00:34:50,000
layout. TSX from this dashboard folder to this dashboard folder right

334
00:34:55,000 --> 00:34:57,000
here now each route group has its own layout now if you go back to

335
00:35:01,000 --> 00:35:03,000
the website you'll see everything is as it was we have nav bar on top of the

336
00:35:06,000 --> 00:35:08,000
home and slout Route and if we go to dashboard and then users you can see

337
00:35:13,000 --> 00:35:15,000
that we have only a dashboard navigation bar everything works as expected so why

338
00:35:18,000 --> 00:35:20,000
are we using these route groups in the first place well take a look they're making our code more organized without

339
00:35:26,000 --> 00:35:28,000
affecting the URL to go to the homepage or to the about page you don't have to say forward SL

340
00:35:32,000 --> 00:35:34,000
root forward slab you simply say about so whenever you place a folder name

341
00:35:38,000 --> 00:35:40,000
within parenthesis that means you're creating a route group and it will not be map to a URL path and why is this

342
00:35:46,000 --> 00:35:48,000
useful well one for organizing your code you can see everything is cleaner now

343
00:35:51,000 --> 00:35:53,000
and the second reason is that you can have separate layouts for different route groups which are going to give you

344
00:35:57,000 --> 00:35:59,000
different UI but without affecting the URL so let's rewind one more time route

345
00:36:03,000 --> 00:36:05,000
groups allow you to create folders without affecting the URL and even

346
00:36:08,000 --> 00:36:10,000
though creating route groups isn't taken into account you can still create files like layout. DSX inside of them and it's

347
00:36:16,000 --> 00:36:18,000
important that this Ru route group still points to the homepage so this page right here is the primary homepage if

348
00:36:23,000 --> 00:36:25,000
you were to copy and paste this file into the dashboard that would work because now we have two parallel routes

349
00:36:31,000 --> 00:36:33,000
that resolve to the same path I hope this is clear understanding route groups is extremely useful because they allow

350
00:36:38,000 --> 00:36:40,000
you to separate concerns manage route segments and render content properly all

351
00:36:44,000 --> 00:36:46,000
without showing them in the URL next let's talk about airor handling in

352
00:36:49,000 --> 00:36:51,000
nextjs there's a special file called error. JS or TS if you're using

353
00:36:55,000 --> 00:36:57,000
typescript that catches errors and and displays them on the UI similar to how

354
00:37:00,000 --> 00:37:02,000
we were able to create multiple layout files for each folder be that a route group or a route folder we can do the

355
00:37:07,000 --> 00:37:09,000
same for the error. TS file let's throw an error on purpose in the about page

356
00:37:12,000 --> 00:37:14,000
I'll head over to that page and I'll say Throw new

357
00:37:17,000 --> 00:37:19,000
error I'll say something like not implemented and don't forget to delete

358
00:37:23,000 --> 00:37:25,000
this duplicate of a p TSX within the dashboard that one is still throwing as the old error once you do that and go to

359
00:37:30,000 --> 00:37:32,000
about you'll see an error that is fine for as developers but you never want to

360
00:37:35,000 --> 00:37:37,000
show it to the end user rather if there has to be an error let's show it within a nice UI at least the user will feel

361
00:37:42,000 --> 00:37:44,000
better that way to do that let's create a new error. TSX file in the root

362
00:37:49,000 --> 00:37:51,000
folder error. TSX in it I'll copy the code provided to us by the next year's

363
00:37:55,000 --> 00:37:57,000
documentation this component is is nicely handling the error save and

364
00:38:00,000 --> 00:38:02,000
revisit the about page check it out we don't see that red popup anymore rather

365
00:38:06,000 --> 00:38:08,000
we see what we have implemented in the error. TSX file something went wrong try

366
00:38:12,000 --> 00:38:14,000
again super simple and straightforward to handle errors in xgs right and as I

367
00:38:17,000 --> 00:38:19,000
said you can even create these error files specific to different routes if you just want to have one Global error

368
00:38:24,000 --> 00:38:26,000
then you can do it by creating a global error TSX file in the root of the app

369
00:38:29,000 --> 00:38:31,000
folder that's going to look something like this I'll go into the app and create a new file called

370
00:38:36,000 --> 00:38:38,000
Global error. TSX the code will look something like

371
00:38:43,000 --> 00:38:45,000
this I'm not sure why my indentation is not working when copying but you get the idea you can specify the HTML and the

372
00:38:51,000 --> 00:38:53,000
body and simply show some kind of an error take a note that error boundaries must be client comp components now going

373
00:38:58,000 --> 00:39:00,000
back to our app can we see this error well not really unlike layout. TSX which

374
00:39:05,000 --> 00:39:07,000
displays everything from its parent the error file Works differently only the closest error file

375
00:39:12,000 --> 00:39:14,000
to the route takes priority meaning you won't see the content both from Global

376
00:39:18,000 --> 00:39:20,000
a. TSX and from the root error TSX errors will bubble up to the nearest

377
00:39:24,000 --> 00:39:26,000
parent error file not all of them make sense and to talk about something else other

378
00:39:30,000 --> 00:39:32,000
than errors let's talk about loading uis loading uis in nextjs works very

379
00:39:37,000 --> 00:39:39,000
similarly to error handling you want to show some kind of a loading progress while data is being fetched for users

380
00:39:44,000 --> 00:39:46,000
with a slow internet connection it is as simple as adding a new loading. TSX file

381
00:39:52,000 --> 00:39:54,000
in the folder in there you can create any kind of a loader or a Nic looking

382
00:39:58,000 --> 00:40:00,000
spinner now as your page reloads this file will show I'll keep reloading the

383
00:40:03,000 --> 00:40:05,000
screen so you can see that loading bar adding loadings to your nextjs really doesn't get simpler than that while the

384
00:40:09,000 --> 00:40:11,000
data is loading nextjs will show the content you specified in the loading file and once the data is received the

385
00:40:17,000 --> 00:40:19,000
content in the page you're trying to render will be shown it's super useful and surprisingly easy to do I've covered

386
00:40:23,000 --> 00:40:25,000
this in more detail in the ultimate nextjs course as you can see here there's an entire section dedicated to

387
00:40:30,000 --> 00:40:32,000
it complete with challenges to help you practice but in this crash course you'll

388
00:40:35,000 --> 00:40:37,000
also see this in action in the next segment where we'll actually do some real world data fetching and in addition

389
00:40:41,000 --> 00:40:43,000
to these main file conventions like page layout error and loading nextjs also

390
00:40:48,000 --> 00:40:50,000
provides other features like parallel routes intercepting routes and localization routes that display content

391
00:40:54,000 --> 00:40:56,000
based on the user's language you can explore all of these in the next GSS documentation but for now let's move

392
00:41:02,000 --> 00:41:04,000
over to data fetching the most interesting Concept in nextjs there are

393
00:41:08,000 --> 00:41:10,000
different ways in which we can fetch content a traditional way is using a use

394
00:41:13,000 --> 00:41:15,000
effect for example this is what you would do let's say that you have a homepage where you're trying to set and

395
00:41:20,000 --> 00:41:22,000
fetch some albums you create a new empty use State you declare a use effect

396
00:41:26,000 --> 00:41:28,000
Within which you declare an asynchronous fetching function within it you have an await

397
00:41:33,000 --> 00:41:35,000
fetch where you're trying to get some albums and then you return that Json and set it to the state finally going a bit

398
00:41:41,000 --> 00:41:43,000
down you map over those albums and show the data but this isn't super efficient

399
00:41:47,000 --> 00:41:49,000
there is a better alternative to fetch and it's happening on the server side not only is it faster and more efficient

400
00:41:55,000 --> 00:41:57,000
the code is also so much cleaner check this out you declare a new functional component called home and immediately on

401
00:42:02,000 --> 00:42:04,000
top of it you make a fetch request you check if it fails if it doesn't you

402
00:42:07,000 --> 00:42:09,000
simply declare it and set its response. Json to the album's variable you map

403
00:42:13,000 --> 00:42:15,000
over it and display the details go ahead pause this video and test it out you

404
00:42:19,000 --> 00:42:21,000
don't necessarily have to do all the Styles but you can at least try to fetch the data map over the albums and show

405
00:42:26,000 --> 00:42:28,000
each album title if you do it visit the website and see if it works you'll not

406
00:42:31,000 --> 00:42:33,000
see anything you'll have to refresh to see the result and it's not because HMR

407
00:42:37,000 --> 00:42:39,000
is not working but rather HMR is caching your content in latest versions of

408
00:42:43,000 --> 00:42:45,000
nextjs there is a new feature called server components HMR cache that allows

409
00:42:49,000 --> 00:42:51,000
you to cash fetch responses in server components across hot module replacement

410
00:42:55,000 --> 00:42:57,000
refreshes in local development ment what this means is you'll have faster responses and reduced costs for build

411
00:43:02,000 --> 00:43:04,000
API calls but now coming back to the difference between server side fetching versus client side fetching first of all

412
00:43:10,000 --> 00:43:12,000
you'll notice the code difference between the two strategies with server side fetching you wrote fewer lines of

413
00:43:16,000 --> 00:43:18,000
code which improves the DX developer experience but that's not the only

414
00:43:22,000 --> 00:43:24,000
benefit server side fetching has so many more benefits like improved initial low

415
00:43:27,000 --> 00:43:29,000
time as a server side data fetching allows the page to be rendered with the data already included it reduces the

416
00:43:34,000 --> 00:43:36,000
time to First contentful paint FCP in the client side example the user sees an

417
00:43:41,000 --> 00:43:43,000
empty page until the data is fetched and then rendered the second and most important benefit of server side

418
00:43:47,000 --> 00:43:49,000
fetching is better SEO search engine crawlers can more easily index content

419
00:43:54,000 --> 00:43:56,000
rendered on the server as the content is already provided in HTML

420
00:43:59,000 --> 00:44:01,000
format in contrast client side fetching may result in content not being visible

421
00:44:05,000 --> 00:44:07,000
to crawlers right away since it first needs to be fetched and then displayed on the UI which can negatively impact

422
00:44:12,000 --> 00:44:14,000
your SEO next not only is the code shorter but the logic is

423
00:44:19,000 --> 00:44:21,000
simplified server components allow you to keep data fetching Logic on the server closer to your data source this

424
00:44:26,000 --> 00:44:28,000
can simplify your component logic and reduce the need for use effect and use State Hooks and the next benefit is not

425
00:44:33,000 --> 00:44:35,000
that easy to understand that first and it is automatic request D duplication

426
00:44:39,000 --> 00:44:41,000
nextjs provides that automatic request D duplication when fetching data on the server which can improve performance and

427
00:44:46,000 --> 00:44:48,000
reduce unnecessary API calls basically request the duplication makes sure that

428
00:44:52,000 --> 00:44:54,000
when the same data is requested multiple times at once only one request is sent

429
00:44:58,000 --> 00:45:00,000
it stops duplicate requests from being made and when talking about benefits of

430
00:45:03,000 --> 00:45:05,000
the server side fetching versus client side fetching I really can't miss on

431
00:45:08,000 --> 00:45:10,000
improved security keeping API calls on the server allows you to better protect

432
00:45:14,000 --> 00:45:16,000
sensitive information like API Keys which should never be exposed on the client side and adding to the list of

433
00:45:21,000 --> 00:45:23,000
benefits we have reduced Network waterfall client side data fetching

434
00:45:26,000 --> 00:45:28,000
often leads to to a network waterfall where requests are made sequentially server side fetching can more

435
00:45:32,000 --> 00:45:34,000
efficiently parallelize those requests I'll teach you how to do these parallel requests in our build and deploy project

436
00:45:39,000 --> 00:45:41,000
so keep watching but this isn't just about fetching you can server render any

437
00:45:44,000 --> 00:45:46,000
other calls maybe a direct database call to Prisma to get the list of posts or

438
00:45:50,000 --> 00:45:52,000
even with Mongoose and mongodb like this that's the beauty of nextjs this is achievable because these

439
00:45:57,000 --> 00:45:59,000
components are react server components which allow you to access server related

440
00:46:04,000 --> 00:46:06,000
resources directly this means we can make direct database calls instead of needing to create an API and then fetch

441
00:46:12,000 --> 00:46:14,000
that API once again and if you're still not convinced you can always go for client side fetching how just add Ed

442
00:46:19,000 --> 00:46:21,000
client to the top bring back the use effects the use States and you're all set nextjs will allow you to do whatever

443
00:46:26,000 --> 00:46:28,000
you think is is best and let's be honest this is how we all used to use next GS

444
00:46:31,000 --> 00:46:33,000
when we first transitioned over from react it only feels natural but it is the wrong way to use nextjs and that's

445
00:46:39,000 --> 00:46:41,000
what made me create the whole ultimate nextjs course in the first place to teach NEX GS the right way but now take

446
00:46:46,000 --> 00:46:48,000
a moment to test both client side and server side rendering you'll notice the

447
00:46:51,000 --> 00:46:53,000
differences I mentioned such as seeing the blank page initially with client side rendering or if you inspect it

448
00:46:57,000 --> 00:46:59,000
source and see that nothing is there or client side not functioning at all if you disable JavaScript in contrast

449
00:47:04,000 --> 00:47:06,000
serers side fetching will still display the results even if JavaScript is turned off in the browser but now that we know

450
00:47:12,000 --> 00:47:14,000
that serers side fetching is preferable let's explore different server side

451
00:47:17,000 --> 00:47:19,000
strategies that allow you to manage how and when you render your content on the

452
00:47:22,000 --> 00:47:24,000
server side you see this is a crucial part of nextjs and I know that some of

453
00:47:28,000 --> 00:47:30,000
you might be thinking I just want to code already but without understanding these Concepts you'll probably end up

454
00:47:35,000 --> 00:47:37,000
saying I hate nygs it never works the truth is it does work just not for you

455
00:47:42,000 --> 00:47:44,000
you just need to write skills to make it happen that's why even on my platform I dedicate an entire section to breaking

456
00:47:48,000 --> 00:47:50,000
down these strategies before we touch a single line of code and we'll be doing the same thing in this video trust me

457
00:47:56,000 --> 00:47:58,000
it'll will make your life a whole lot easier the first technique is static

458
00:48:01,000 --> 00:48:03,000
site generation or SSG a technique where HTML pages are

459
00:48:07,000 --> 00:48:09,000
generated at build time this means that the content is created when you deploy

460
00:48:13,000 --> 00:48:15,000
your site not when a user requests it it's extremely fast and can be served

461
00:48:19,000 --> 00:48:21,000
from a CDN but it's not suitable for websites that need frequently updated

462
00:48:24,000 --> 00:48:26,000
content by default xgs uses a static rendering strategy your result is cached

463
00:48:31,000 --> 00:48:33,000
and delivered through a CDN Network ideally you want to use this strategy for blogs documentation sites or

464
00:48:38,000 --> 00:48:40,000
marketing pages but in many cases you'll have to go for incremental static

465
00:48:44,000 --> 00:48:46,000
regeneration or ISR for short it's an extension of SSG that allows you to

466
00:48:51,000 --> 00:48:53,000
update static content after you've built your site this means that it'll create static p PES and build time behaving

467
00:48:59,000 --> 00:49:01,000
like SSG and then after some time has passed it'll create or update those

468
00:49:04,000 --> 00:49:06,000
static Pages once again after you've deployed your site basically it combines

469
00:49:10,000 --> 00:49:12,000
the benefits of static generation with the ability to refresh or update content

470
00:49:16,000 --> 00:49:18,000
if you want to use ISR as a strategy you can do this in two ways the first one is

471
00:49:22,000 --> 00:49:24,000
time based revalidation you can revalidate your entire page after some

472
00:49:27,000 --> 00:49:29,000
time by simply exporting a variable called revalidate and set it equal to

473
00:49:32,000 --> 00:49:34,000
the number of seconds of when you want to revalidate isn't that crazy expert cons revalidate and then that changes

474
00:49:39,000 --> 00:49:41,000
your rendering strategy super simple and the second way is to revalidate the request after some time and that would

475
00:49:47,000 --> 00:49:49,000
look something like this you have a Fetch and then you provide the options object with next

476
00:49:53,000 --> 00:49:55,000
revalidate the difference between these two is that the first approach uses the revalidate export which is a route

477
00:50:00,000 --> 00:50:02,000
segment config it sets the revalidation time for the entire page to 3600 seconds or 1

478
00:50:08,000 --> 00:50:10,000
hour this means that the entire page including all data fetches within it

479
00:50:13,000 --> 00:50:15,000
will be revalidated every hour while the second approach uses the next revalidate

480
00:50:19,000 --> 00:50:21,000
option in the fetch function it sets the revalidation time specifically for this

481
00:50:24,000 --> 00:50:26,000
data fetch to 1 hour this means that only this particular data fetch will be

482
00:50:30,000 --> 00:50:32,000
revalidated every 3600 seconds while other parts of the page or

483
00:50:36,000 --> 00:50:38,000
other data fetches if any are not affected at all and there's also OnDemand validation instead of doing it

484
00:50:43,000 --> 00:50:45,000
on time you can also revalidate using revalidate path and revalidate tag for

485
00:50:50,000 --> 00:50:52,000
on demand validation of content I hope that's clear enough that's how you can use ISR are it's perfect for those

486
00:50:58,000 --> 00:51:00,000
websites whose content changes occasionally but still doesn't need realtime updates the next rendering

487
00:51:05,000 --> 00:51:07,000
strategy is server side rendering or SSR it generates the HTML for a page on the

488
00:51:12,000 --> 00:51:14,000
server in response to a user's request this means that the content is

489
00:51:18,000 --> 00:51:20,000
created dynamically for each user request and not only for each deployment

490
00:51:24,000 --> 00:51:26,000
it's slower than SSG and puts more load on the server but you'll always have

491
00:51:30,000 --> 00:51:32,000
up-to-date content this is ideal for highly Dynamic content or pages that

492
00:51:35,000 --> 00:51:37,000
need real-time data similar to what we did with ISR you can use the same configs for SSR for timebase

493
00:51:42,000 --> 00:51:44,000
revalidation instead of setting it to some random number of seconds you simply set it to zero telling nextjs to render

494
00:51:49,000 --> 00:51:51,000
the page every time the user requested and if you only want to do it for specific requests you can use the cash

495
00:51:55,000 --> 00:51:57,000
no store or or set the revalidate to zero there and same thing happens with the on demand validation like revalidate

496
00:52:02,000 --> 00:52:04,000
path and revalidate tag you can learn more about them in the documentation but so far everything is super intuitive and

497
00:52:11,000 --> 00:52:13,000
finally there's the partial pre-rendering PPR it's a new rendering

498
00:52:16,000 --> 00:52:18,000
model that combines static and dynamic rendering it allows you to render a

499
00:52:21,000 --> 00:52:23,000
static shell of a page while streaming Dynamic content the key key difference

500
00:52:27,000 --> 00:52:29,000
with PPR is that it allows for a hybrid approach within a single page unlike

501
00:52:32,000 --> 00:52:34,000
other strategies that work on a page level here's how PPR works during build

502
00:52:38,000 --> 00:52:40,000
time nextjs generates a static shell of the pages this shell includes the layout

503
00:52:45,000 --> 00:52:47,000
and any static parts of the page in the form of components this static shell

504
00:52:51,000 --> 00:52:53,000
includes placeholders for dynamic content we do it by wrapping Dynamic components in a suspense tag when a user

505
00:52:59,000 --> 00:53:01,000
requests the page the static shell is served immediately and then the dynamic

506
00:53:05,000 --> 00:53:07,000
content is streamed in as it becomes available so what does this mean well with PPR you can have static components

507
00:53:13,000 --> 00:53:15,000
Dynamic components and components that are partially static and partially Dynamic depending on what you need

508
00:53:20,000 --> 00:53:22,000
you'll actually learn about all of these strategies in action in the application you'll develop today so for now now

509
00:53:26,000 --> 00:53:28,000
let's keep going we're almost there and ready to start building the app but first I have to tell you a bit about API

510
00:53:34,000 --> 00:53:36,000
routes enough with front-end stuff optimization caching performance and all

511
00:53:39,000 --> 00:53:41,000
that it's time for some backend work if you've ever done some backend even creating a simple hello world from

512
00:53:46,000 --> 00:53:48,000
server message requires a fair bit of setup it involves setting up a project

513
00:53:52,000 --> 00:53:54,000
installing necessary packages like Express for node right writing server code setting up Express the port and

514
00:53:59,000 --> 00:54:01,000
then making that Port listen running it and then deploying it using some paid or free service so you can finally use it

515
00:54:06,000 --> 00:54:08,000
on the front end it might not seem like a big deal when you're just reading or looking at

516
00:54:11,000 --> 00:54:13,000
the code but things quickly start getting complicated when you have to write various routes middle Wares and so

517
00:54:18,000 --> 00:54:20,000
on but in the newest version of next GS it's super simple much closer to what we

518
00:54:23,000 --> 00:54:25,000
did on the front end you just create a special file within a folder for the specific route and you're all set

519
00:54:29,000 --> 00:54:31,000
there's no need to set up manage or monitor an active server separately if you want to show the same message hello

520
00:54:36,000 --> 00:54:38,000
world from backend in nextjs you simply need to create a folder with any name

521
00:54:42,000 --> 00:54:44,000
and then create a special file named route. DS inside it from there you can

522
00:54:48,000 --> 00:54:50,000
immediately begin writing server code export async function get return

523
00:54:53,000 --> 00:54:55,000
response. Json message hello world from backend that's all there is to it your

524
00:55:01,000 --> 00:55:03,000
folder name serves as your API route name with your business logic neatly

525
00:55:06,000 --> 00:55:08,000
encapsulated within this special route file if you now go to the browser modify the URL and add hello world to it you'll

526
00:55:14,000 --> 00:55:16,000
see Hello World from backend as a response but how can you create other API endpoints like post patch delete and

527
00:55:21,000 --> 00:55:23,000
more well for that let's create a book endpoint with a local array as a

528
00:55:26,000 --> 00:55:28,000
database a common practice when creating route handlers is to create a folder

529
00:55:32,000 --> 00:55:34,000
called API and write all the routes inside it so create this API folder in

530
00:55:37,000 --> 00:55:39,000
the app directory and add a database file for storing some dummy books then

531
00:55:43,000 --> 00:55:45,000
you can create two routes get and post in app API books route.

532
00:55:50,000 --> 00:55:52,000
TSX these are nested routes similar to what you explored previously in the routing part the UI for the delete and

533
00:55:58,000 --> 00:56:00,000
put you'll have to create Dynamic route handlers and you already know how to do that app API books and then Dynamic

534
00:56:07,000 --> 00:56:09,000
square brackets ID SL routts and inside of it you can export

535
00:56:13,000 --> 00:56:15,000
async function put for the update request and then export async function

536
00:56:18,000 --> 00:56:20,000
delete for the delete request and then you can add the logic so far this feels

537
00:56:24,000 --> 00:56:26,000
good similar to what we did with UI routes but this time for writing server

538
00:56:29,000 --> 00:56:31,000
code and creating apis so let's test them one by one to see if they work or not and there you go

539
00:56:37,000 --> 00:56:39,000
everything works perfectly this is how route handlers or apis work in nextjs

540
00:56:43,000 --> 00:56:45,000
it's super simple and straightforward and the creation of apis in nextjs was

541
00:56:48,000 --> 00:56:50,000
nice but how can you use them on the UI well it's a simple fetch just create a

542
00:56:54,000 --> 00:56:56,000
books route real quick and call the get API route to fetch the content const

543
00:56:59,000 --> 00:57:01,000
responed await fetch Local Host 3000 API books you get them from the response

544
00:57:05,000 --> 00:57:07,000
send them to the state and render them if you visit the books route you'll see all of your books as easy as it could be

545
00:57:14,000 --> 00:57:16,000
thanks to the serverless architecture of NEX GS and react 19 react server

546
00:57:19,000 --> 00:57:21,000
components and there's one final thing I want to teach you before you're ready to start creating your next GS application

547
00:57:26,000 --> 00:57:28,000
and that is search engine optimization specifically how we use metadata in

548
00:57:32,000 --> 00:57:34,000
nextjs to improve our SEO and when I mention metadata I'm referring to the

549
00:57:38,000 --> 00:57:40,000
look and feel of our website when we share it with others on messenging platforms or posted on social media

550
00:57:45,000 --> 00:57:47,000
platforms or on internet in general like for example in search engines in today's

551
00:57:50,000 --> 00:57:52,000
world we need to ensure that our content is sharable so there are two ways in which we can manage met data in our

552
00:57:56,000 --> 00:57:58,000
nextg application the first one is config based all you have to do is

553
00:58:02,000 --> 00:58:04,000
create a JavaScript object into the layout or any kind of page file and Export it nextjs will automatically

554
00:58:09,000 --> 00:58:11,000
detect it and turn it into relevant meta tags for those routes something like

555
00:58:14,000 --> 00:58:16,000
export const metadata is equal to and then in there you can provide all sorts

556
00:58:20,000 --> 00:58:22,000
of different SEO properties such as title description thumbnail and more we

557
00:58:25,000 --> 00:58:27,000
already already have a config file in our app layout. DSX however if you

558
00:58:30,000 --> 00:58:32,000
navigate over to the homepage and add an additional metadata something like home

559
00:58:35,000 --> 00:58:37,000
next GS then that one will be taken into account because it's higher on the priority list and it'll override the

560
00:58:43,000 --> 00:58:45,000
default specified in the global layout this allows you to either define unique

561
00:58:48,000 --> 00:58:50,000
metadata for each route or rely on the metadata from the root layout it's

562
00:58:54,000 --> 00:58:56,000
entirely up to you but everything with this discussed so far is just static metadata means that it's not going to

563
00:59:00,000 --> 00:59:02,000
change home is always going to be home but there also going to be cases in which you want to create Dynamic

564
00:59:06,000 --> 00:59:08,000
metadata based on some kind of content on the page such as a Blog title for

565
00:59:11,000 --> 00:59:13,000
example let me show you how I implemented this strategy on JS mastery. proo for the resources page on the main

566
00:59:19,000 --> 00:59:21,000
Resource page you'll see different titles and descriptions and if you click on one of the resources you'll see a

567
00:59:25,000 --> 00:59:27,000
change in the title and description as well same thing happens for the other resources each has its own title

568
00:59:32,000 --> 00:59:34,000
description and image which helps web crawlers index these pages and makes them much more sharable on social media

569
00:59:39,000 --> 00:59:41,000
but how can we achieve this in xgs it's super simple the only thing you have to do is export a new async

570
00:59:47,000 --> 00:59:49,000
function called generate metadata which gets access to params pams being the

571
00:59:53,000 --> 00:59:55,000
same pams that we had before from dynamic routes you can extract the ID or

572
00:59:58,000 --> 01:00:00,000
the name or anything else based on that ID you can get full resource details or

573
01:00:05,000 --> 01:00:07,000
user profile details whatever it is then you can use those details to formulate

574
01:00:11,000 --> 01:00:13,000
SEO title descriptions thumbnails and more and you can simply return a dynamic

575
01:00:17,000 --> 01:00:19,000
object of all of these properties that's it as simple as that are you with me so

576
01:00:22,000 --> 01:00:24,000
far good and the other way in which we can set metadata in nextjs is file based

577
01:00:29,000 --> 01:00:31,000
metadata as the name suggests you can put files like a robot sitemap favicon

578
01:00:35,000 --> 01:00:37,000
open graph images or other site icons directly inside the app folder and

579
01:00:40,000 --> 01:00:42,000
nextjs will automatically detect and generate corresponding meta tags for

580
01:00:46,000 --> 01:00:48,000
example you can have an app and then a favicon and then an icon and then an open graph image Twitter image all of

581
01:00:53,000 --> 01:00:55,000
these properties will get added to your metatags it's just about adding the files with the right names they have to

582
01:01:00,000 --> 01:01:02,000
be proper names directly inside the app folder it'll work out the same as the

583
01:01:05,000 --> 01:01:07,000
config based approach you can find a full list of all files that can be created to Define metadata here but for

584
01:01:13,000 --> 01:01:15,000
the time being I still prefer creating it by exporting the config file from layouts or individual pages and it's

585
01:01:20,000 --> 01:01:22,000
worth noting that file-based metadata has a higher priority and will override

586
01:01:26,000 --> 01:01:28,000
any config based metadata so if you set it in a file it'll be used instead of the ones that you set in the

587
01:01:32,000 --> 01:01:34,000
configuration so now you know how to make your apps sharable SEO optimized

588
01:01:38,000 --> 01:01:40,000
and search engine cable with that in mind I think you're ready first there

589
01:01:43,000 --> 01:01:45,000
was a lot of theory and then there was more Theory disguised in this practical part but now you're ready to dive into

590
01:01:51,000 --> 01:01:53,000
code you're ready to Dive Right In and build and deploy your nextjs app with

591
01:01:57,000 --> 01:01:59,000
all of these optimizations performance updates and new features baked right

592
01:02:02,000 --> 01:02:04,000
into it application you will develop and deploy along with the specific nextjs Demo of the App

593
01:02:07,000 --> 01:02:09,000
features you'll use on the homepage you'll find a list of startups fetch directly from sanity and the great part

594
01:02:15,000 --> 01:02:17,000
is that whenever someone anywhere in the world submits a new startup it'll instantly appear for all the other users

595
01:02:22,000 --> 01:02:24,000
here without needing to reload the page you can also search for any startup by title Creator name or category in real

596
01:02:29,000 --> 01:02:31,000
time in this case let's go with category of Health you just click it right here and you can see that search works

597
01:02:36,000 --> 01:02:38,000
instantly for this we're using next gs's latest next form feature which

598
01:02:41,000 --> 01:02:43,000
automatically manages the URL State and allows form submissions via keyboard events with minimal code required now if

599
01:02:49,000 --> 01:02:51,000
you click on any one of these startups you can view its details including the title date when it was published a

600
01:02:55,000 --> 01:02:57,000
description thumbnail more information about the author and then finally the pitch details in this case we just use

601
01:03:02,000 --> 01:03:04,000
regular text for the details but if we go to another post you can see that it supports full markdown capabilities and

602
01:03:10,000 --> 01:03:12,000
at the bottom we have some other recommended posts but maybe the most important part of this entire pitch

603
01:03:16,000 --> 01:03:18,000
Details page besides this great looking image of course is the number of times that this post has been viewed and you

604
01:03:22,000 --> 01:03:24,000
can see that right here at the bottom right even though it might feel like a small feature it's actually quite

605
01:03:28,000 --> 01:03:30,000
significant here you'll be using NEX gs's latest rendering strategy known as

606
01:03:34,000 --> 01:03:36,000
PPR partial pre-rendering with this approach everything except the view counter is kept as static content for 60

607
01:03:42,000 --> 01:03:44,000
seconds using incremental static regeneration while the views counter is handled with server side

608
01:03:48,000 --> 01:03:50,000
rendering this means that whenever a user requests a page most of the details are served from the CDN cache but the

609
01:03:55,000 --> 01:03:57,000
views are recalculated with each request and aren't cached that is what PPR is

610
01:04:01,000 --> 01:04:03,000
all about giving you control over which parts of the page remain static and which are regenerated dynamically we're

611
01:04:07,000 --> 01:04:09,000
also applying the same strategy on the user profile page where the user details are cached but the content such as

612
01:04:14,000 --> 01:04:16,000
submitted startups is always generated fresh with each request this ensures that the latest

613
01:04:21,000 --> 01:04:23,000
data is displayed without caching using the PPR approach to to submit a startup

614
01:04:26,000 --> 01:04:28,000
you'll need to create an account first by signing up with GitHub using social authentication I already authenticated

615
01:04:33,000 --> 01:04:35,000
before so you'd log me right in you'll do this using the latest version of next off and once you signed in your account

616
01:04:39,000 --> 01:04:41,000
will be stored in sanity and you'll be able to go over to the create startup page here we're utilizing react 19's

617
01:04:46,000 --> 01:04:48,000
highly anticipated use action State hook along with nextjs server actions all

618
01:04:53,000 --> 01:04:55,000
Fields right here including the image URL are val validated using Zod ensuring that no validation is kept now I'll

619
01:05:00,000 --> 01:05:02,000
split my screen in half keeping one side on the homepage and another one on the startup creation page I've entered some

620
01:05:07,000 --> 01:05:09,000
details and I'll go ahead and submit my pitch the second I click this it's submitting the success I got rated and

621
01:05:15,000 --> 01:05:17,000
check this out immediately without a Reload this startup appeared right here

622
01:05:20,000 --> 01:05:22,000
on the homepage that's how real time updates work and I'll teach you how to do it isn't all this amazing pretty cool

623
01:05:27,000 --> 01:05:29,000
app that purposefully features so many of the new NEX GS features so now let's

624
01:05:32,000 --> 01:05:34,000
build it together and let's explore everything that next GS has to offer to develop this great application we'll use

625
01:05:39,000 --> 01:05:41,000
react but not just playing old react will power it up with nextjs

626
01:05:45,000 --> 01:05:47,000
specifically with the latest and greatest of what nextjs has to offer even though nextjs comes with many

627
01:05:52,000 --> 01:05:54,000
built-in optimizations as you might know if you watch the crash course I'll also teach you how to use it to the fullest

628
01:05:58,000 --> 01:06:00,000
potential by handling things that are not coming out of the box such as implementing Dynamic HTML streaming

629
01:06:05,000 --> 01:06:07,000
react server components many different ways of data fetching depending on the use case client and server rendering and

630
01:06:12,000 --> 01:06:14,000
much more for styling we'll of course use stnd CSS a utility first CSS

631
01:06:17,000 --> 01:06:19,000
framework that allows you to style your applications very quickly but still gives you the possibility to keep your

632
01:06:23,000 --> 01:06:25,000
design completely custom and on top of tailin CSS we'll also use shaten a

633
01:06:29,000 --> 01:06:31,000
component library that provides you with the necessary components that you can simply copy and paste into your apps

634
01:06:36,000 --> 01:06:38,000
finally I know you've been waiting for this day you'll Implement o from scratch

635
01:06:42,000 --> 01:06:44,000
using next off specifically we'll do a GitHub integration and on top of all of

636
01:06:47,000 --> 01:06:49,000
that I'll teach you how to manage the content of your application using sanity

637
01:06:53,000 --> 01:06:55,000
so with that in mind let's go ahead and and set up our new nextjs project to get Setup new project

638
01:06:58,000 --> 01:07:00,000
started create a new empty folder on your desktop name it something like YC

639
01:07:03,000 --> 01:07:05,000
directory and then open it up within your code editor within it open up your terminal run MPX

640
01:07:11,000 --> 01:07:13,000
create-- apppp at latest. SL to create it in the current repository it's going

641
01:07:17,000 --> 01:07:19,000
to ask you a couple of questions and we just want to press enter for all of them since we'll be using the default

642
01:07:23,000 --> 01:07:25,000
recommended options of course we would like to use typescript to make her project type safe we would like to use

643
01:07:29,000 --> 01:07:31,000
eslint to make sure that our codebase is clean Tailwind CSS sign us up no need to

644
01:07:34,000 --> 01:07:36,000
put everything inside of the source directory just putting it within the app is fine we will be using the app router

645
01:07:41,000 --> 01:07:43,000
turbo pack for smoother development environment no need to customize the default import Alias and that's it the

646
01:07:48,000 --> 01:07:50,000
packages are getting installed there we go our project has been initialized but

647
01:07:53,000 --> 01:07:55,000
before we run it there's one more thing we have to do head over to your package.json and here you can see that

648
01:08:00,000 --> 01:08:02,000
we're using the latest versions of react as well as nextjs but we also have to

649
01:08:06,000 --> 01:08:08,000
make sure that all the other packages and dependencies that we use such as next o also use those latest versions

650
01:08:13,000 --> 01:08:15,000
and not go back to using react 18 for example for that reason we have to add two additional properties to our

651
01:08:20,000 --> 01:08:22,000
package.json let's add it right below the scripts one

652
01:08:25,000 --> 01:08:27,000
one is to set a specific version of your package manager in this case I'm using mpm so I'll set it to mpm at

653
01:08:34,000 --> 01:08:36,000
10.5.2 and then also set the overrides react dollar sign react and react Dom

654
01:08:39,000 --> 01:08:41,000
dollar sign react Dom this will ensure that the latest versions of react are being used across all the packages in

655
01:08:47,000 --> 01:08:49,000
your project and after you do this make sure to not delete node modules and then reinstall them because that might break

656
01:08:54,000 --> 01:08:56,000
some things if you were thinking of doing that then just copy the exact versions of react and react Dom and put

657
01:09:00,000 --> 01:09:02,000
them right here in the overrides in that case it'll work great now that we have done this we can simply run mpm runev to

658
01:09:07,000 --> 01:09:09,000
see the server in action so let's open up the terminal and say mpm runev and

659
01:09:13,000 --> 01:09:15,000
there we go our application is now live on Local Host 3000 which means that we are ready to start developing Authentication with NextAuth

660
01:09:21,000 --> 01:09:23,000
it this time we'll start straight with Authentication which we'll be implementing using OJs or also known as

661
01:09:29,000 --> 01:09:31,000
next o so let's head over to installation and we'll choose nextjs of course first things first we have to run

662
01:09:36,000 --> 01:09:38,000
the installation command so let's copy it and I've opened up a new terminal inside of which we can run those

663
01:09:42,000 --> 01:09:44,000
installation commands so let's install it there we go that was super simple next we'll have to set up the

664
01:09:48,000 --> 01:09:50,000
environment by setting up our off secret so let's copy this command and run MPX

665
01:09:54,000 --> 01:09:56,000
off Secret press y to proceed and this just created a newv local with your odd

666
01:10:00,000 --> 01:10:02,000
secret next we'll have to implement our configuration I'll Zoom this in so you can see it a bit better but you can also

667
01:10:06,000 --> 01:10:08,000
follow along with your own docs the goal of these videos is for me to teach you how to replicate what I'm working not

668
01:10:13,000 --> 01:10:15,000
just follow along so sometimes it's totally okay to pause and try to implement things on your own next we

669
01:10:19,000 --> 01:10:21,000
have to create the ajs config file and object this is where you can control the behavior of the library and specify

670
01:10:26,000 --> 01:10:28,000
custom authentication logic adapters and more create an off THS file in the

671
01:10:32,000 --> 01:10:34,000
project here we can pass all the custom authentication options so let's create

672
01:10:37,000 --> 01:10:39,000
it in the root of your app and copy this config now there directly in the root of your application create a new file

673
01:10:44,000 --> 01:10:46,000
called O.S and paste what you just copied import next o from next o and here we're

674
01:10:52,000 --> 01:10:54,000
exporting a next o object with the complete configuration next we'll have

675
01:10:57,000 --> 01:10:59,000
to add a route Handler under app API o and then we'll have to make this a new

676
01:11:03,000 --> 01:11:05,000
Dynamic rout so let's do just that I'll create a new folder within the app

677
01:11:08,000 --> 01:11:10,000
folder and I'll call it API within the API folder I'll create a

678
01:11:14,000 --> 01:11:16,000
new folder called off and within the off folder I'll create another folder which

679
01:11:19,000 --> 01:11:21,000
is going to be a dynamic one so we'll use square brackets dot dot dot next off

680
01:11:26,000 --> 01:11:28,000
and then I'll close it like this and within it we'll create a new route. TS

681
01:11:32,000 --> 01:11:34,000
file within the route you can copy and paste this code import handlers from at slof and then we export those handlers

682
01:11:39,000 --> 01:11:41,000
the third step is an optional step to add the middleware in this case we'll skip it and next we have to set up the

683
01:11:45,000 --> 01:11:47,000
authentication methods the basic setup is complete but now you can choose the providers which you want to allow your

684
01:11:52,000 --> 01:11:54,000
users to authenticate with so let's head over to authentication and go to ooth here you can jump to one of the

685
01:12:00,000 --> 01:12:02,000
most popular providers for authentication we typically do Google but now I'll do GitHub on this

686
01:12:06,000 --> 01:12:08,000
documentation page you just get a call back URL that we need to call but in this case we need to set it up from

687
01:12:12,000 --> 01:12:14,000
scratch so let's go over to connections providers and then here search for

688
01:12:17,000 --> 01:12:19,000
GitHub there we go and here you'll get all the information how we can create a new GitHub oov app which we need for

689
01:12:24,000 --> 01:12:26,000
this setup so head over to this documentation page and here you get the steps needed to create a GitHub OA app

690
01:12:31,000 --> 01:12:33,000
you have to go to settings developer settings allo apps and then create a new allo app and then add the authorization

691
01:12:39,000 --> 01:12:41,000
callback URL so let's do all of that together head over to github.com go to your

692
01:12:46,000 --> 01:12:48,000
profile go to settings head over to developer settings right at the bottom

693
01:12:51,000 --> 01:12:53,000
left and then don't create a new GitHub app rather head over to oov apps and

694
01:12:57,000 --> 01:12:59,000
then create a new oov app enter the application name such as YC directory

695
01:13:04,000 --> 01:13:06,000
and you'll have to enter the homepage URL for the time being we don't really have a URL yet because it'll be rendered

696
01:13:10,000 --> 01:13:12,000
on Local Host so let's just say Local Host 3000 right here we can switch it later

697
01:13:18,000 --> 01:13:20,000
on once we deploy our application application description well this will be a directory for the new era of

698
01:13:26,000 --> 01:13:28,000
startups I like that and authorization call back URL to know what we need to

699
01:13:31,000 --> 01:13:33,000
put there we can refer to next odds documentation so let's simply copy this and then paste it right here in this

700
01:13:37,000 --> 01:13:39,000
case we'll use Local Host 3000 as the URL and click register well

701
01:13:45,000 --> 01:13:47,000
yeah this is the thing now it's asking us to have a real homepage URL which starts with HTTP or

702
01:13:51,000 --> 01:13:53,000
https so if you just add HTTP col SL slash and press create it'll work great

703
01:13:59,000 --> 01:14:01,000
and now here we got a client ID and we can generate a new client secret so

704
01:14:04,000 --> 01:14:06,000
let's copy the client ID and add it to our env. loal We'll add it as o uncore

705
01:14:11,000 --> 01:14:13,000
GitHub ID and set it equal to this string similarly we can generate a new

706
01:14:17,000 --> 01:14:19,000
client secret for that you'll have to confirm access and once it's generated copy it

707
01:14:24,000 --> 01:14:26,000
as you won't be able to see it again once you do that you can say o GitHub secret and set it right here if

708
01:14:33,000 --> 01:14:35,000
you want to you can also upload your apps logo and that's the perfect time to refer to the complete figma design for

709
01:14:40,000 --> 01:14:42,000
this project the link is down in the description just enter your email and you can get it immediately once you're

710
01:14:45,000 --> 01:14:47,000
there you can explore the entire design and you can get this logo simply double click it and then export it right here

711
01:14:53,000 --> 01:14:55,000
once you export it you can upload it here I'll use just YC perfect let's update our application

712
01:15:02,000 --> 01:15:04,000
and we'll revisit this page at the end of this video to put our new deployed URL right here but for the time being we

713
01:15:08,000 --> 01:15:10,000
can go back to the next odd setup and we can copy the configuration the only thing this is doing is updating our

714
01:15:15,000 --> 01:15:17,000
existing aths file where now we are adding a GitHub provider right within it

715
01:15:21,000 --> 01:15:23,000
so how do we make it work well let's go back to our homepage let's remove everything we have from this home right

716
01:15:27,000 --> 01:15:29,000
now I'll keep just a single react fragment right here for now completely empty we can simply say home now we can

717
01:15:35,000 --> 01:15:37,000
improve our file and folder structure currently our homepage is right here but I actually want to organize this a bit

718
01:15:42,000 --> 01:15:44,000
and create a new route Group which is going to be called root so these are all

719
01:15:47,000 --> 01:15:49,000
our homepages I'll move this page over to this rout and I'll also create a new

720
01:15:53,000 --> 01:15:55,000
layout file right here layout. TSX that means that what we apply to this layout

721
01:16:00,000 --> 01:16:02,000
will only be applied to the pages within this route group so let's say export

722
01:16:05,000 --> 01:16:07,000
default function layout it accepts children as a prop and we need to define

723
01:16:11,000 --> 01:16:13,000
the type of that children and we'll set it to read only because we're not going to modify it and then you can say

724
01:16:17,000 --> 01:16:19,000
children is of a type react. react node finally we can return a new main tag

725
01:16:24,000 --> 01:16:26,000
with a a class name equal to font DW work- sense so this is a special font

726
01:16:30,000 --> 01:16:32,000
we'll apply later on then as you know within every layout we need to render the children but what this specific

727
01:16:37,000 --> 01:16:39,000
layout will do is it'll render a Navar right here on top of it so let's create

728
01:16:43,000 --> 01:16:45,000
a new components folder and within it let's create a new file called navbar

729
01:16:49,000 --> 01:16:51,000
TSX let's run rafc within it to create a react Arrow function component and if

730
01:16:56,000 --> 01:16:58,000
this didn't work for you that must mean that you don't have the necessary plugin the plugin I'm using is called modern

731
01:17:03,000 --> 01:17:05,000
react Snippets so just install it and it should work once you do that we can go back to the layout and we can autoimport

732
01:17:10,000 --> 01:17:12,000
this SV bar as a self-closing component right here so now we have the nav bar we have the layout and we have the homepage

733
01:17:17,000 --> 01:17:19,000
let's actually turn this home into an H1 that will say home and we can give it a class name equal to text Dash to excel

734
01:17:25,000 --> 01:17:27,000
to make it a bit larger now if you go back to Local Host and you reload you should be able to see the Navar at the

735
01:17:32,000 --> 01:17:34,000
top and then home right here below it that's perfect because right within the nav bar we'll Implement our next off

736
01:17:39,000 --> 01:17:41,000
let's style it just a bit by giving it a class name equal to padding xl5 to give

737
01:17:44,000 --> 01:17:46,000
it a bit of spacing on left and right padding Y3 to give it some space on top and bottom BG white shadow DSM for a

738
01:17:53,000 --> 01:17:55,000
small shadow and font DW work- sense and that's going to be within an HTML 5

739
01:17:59,000 --> 01:18:01,000
semantic header tag within which we can render a nav tag with a class name equal

740
01:18:06,000 --> 01:18:08,000
to flex justify Dash between items Das

741
01:18:11,000 --> 01:18:13,000
Center within it we can render a nextjs link tag with an href pointing to forward slash meaning it's going to go

742
01:18:18,000 --> 01:18:20,000
just to the homepage and within here we can show our logo that's going to be a nextjs image tag with a source equal to/

743
01:18:27,000 --> 01:18:29,000
logo.png an Al tag of logo a width of about 144

744
01:18:32,000 --> 01:18:34,000
pixels and a height of about 30 pixels if we save this currently the image will

745
01:18:38,000 --> 01:18:40,000
not load that's because we don't yet have it in our public folder so let's remove all of the files from the public

746
01:18:44,000 --> 01:18:46,000
folder that we have there right now and let's get the logo directly from

747
01:18:51,000 --> 01:18:53,000
figma you can export it as you already know you can drag and drop it from your downloads and then you can just rename

748
01:18:58,000 --> 01:19:00,000
it to logo.png if you do that there we go now we know that you're starting to build

749
01:19:04,000 --> 01:19:06,000
the YC directory moving forward we're going to go below the link and we'll render another div with a class name

750
01:19:12,000 --> 01:19:14,000
equal to flex items Das Center and a gap of

751
01:19:18,000 --> 01:19:20,000
five within here we only want to render things if our user is logged in so so

752
01:19:25,000 --> 01:19:27,000
how can we know whether a user is logged in well we can look into a user session

753
01:19:30,000 --> 01:19:32,000
that is coming directly from next off so let's say con session is equal to await

754
01:19:38,000 --> 01:19:40,000
o which we have to import from at SL off and since we used a weight here we need

755
01:19:44,000 --> 01:19:46,000
to turn this into an async function and we can do that because this is a server rendered component how cool is that you

756
01:19:51,000 --> 01:19:53,000
would never be able to do this in client components so so now that we have the session we can do a quick check and say

757
01:19:58,000 --> 01:20:00,000
if session exists and if session has a user then render this additional

758
01:20:05,000 --> 01:20:07,000
information about that user or give them the possibility to perform some actions such as a link that will have a

759
01:20:13,000 --> 01:20:15,000
span within it and it'll say something like create it'll also have an hre of

760
01:20:19,000 --> 01:20:21,000
slst startup slre pointing the user to that create page and below the link link

761
01:20:25,000 --> 01:20:27,000
will have a button with an onclick property equal to sign out and this is

762
01:20:32,000 --> 01:20:34,000
something we have to import from o so let's get O Let's Get sign out and let's

763
01:20:37,000 --> 01:20:39,000
get sign in as well so in this case we want to Simply sign out within the

764
01:20:42,000 --> 01:20:44,000
button we can create a span and say log out finally we're also going to have one

765
01:20:48,000 --> 01:20:50,000
more link which will point to the user's profile so let's say href is equal to

766
01:20:54,000 --> 01:20:56,000
Dynamic URL of sluser SL sessionm

767
01:21:00,000 --> 01:21:02,000
mark. so we want to go to the ID of that specific user for the time moment within

768
01:21:06,000 --> 01:21:08,000
it we can simply render a span which will render a session question mark. user question mark. name and since I

769
01:21:14,000 --> 01:21:16,000
opened up a tary operator right here we also need to provide a second half of that operation what happens if we don't

770
01:21:21,000 --> 01:21:23,000
already have a user and in that case I'll create a button with an onclick equal to sign in

771
01:21:31,000 --> 01:21:33,000
and when you call sign in you also need to pass the provider in this case it'll be GitHub this button will have a span

772
01:21:39,000 --> 01:21:41,000
which will say login if I save this and collapse her editor so we can see the browser at the

773
01:21:45,000 --> 01:21:47,000
same time you should be able to see the button on the right side but it's barely noticeable because the color of the font

774
01:21:51,000 --> 01:21:53,000
is not dark so on this D let's simply give it a text- black property and there

775
01:21:58,000 --> 01:22:00,000
we go we can see a login button because our session has not yet been established

776
01:22:04,000 --> 01:22:06,000
and before we go ahead and click it you can see that our on clicks are complaining both this one and this one

777
01:22:10,000 --> 01:22:12,000
here if you hover or sign in you can see that it's saying missing a weit for an

778
01:22:16,000 --> 01:22:18,000
async function call yes sign in is asynchronous meaning we have to add a

779
01:22:22,000 --> 01:22:24,000
weight in front of it so if I do that you can see that that's not really a valid syntax that means

780
01:22:29,000 --> 01:22:31,000
that we have to turn this into a server action let me show you how I'll create a

781
01:22:35,000 --> 01:22:37,000
new callback function right here and then wrap this call within it makes

782
01:22:41,000 --> 01:22:43,000
sense so far right then since we're using a weight I'll add a sync right here and I'll add a use server directed

783
01:22:49,000 --> 01:22:51,000
right here which will ensure that this gets called on the server but but if you

784
01:22:55,000 --> 01:22:57,000
click login no luck we still get an error and this one is a bit weird but

785
01:23:01,000 --> 01:23:03,000
essentially what it's saying is hey you cannot use a server action within a

786
01:23:07,000 --> 01:23:09,000
component that is maybe the best example of a client component a button with an

787
01:23:13,000 --> 01:23:15,000
onclick so let me show you what you have to do instead actually you'll be using the

788
01:23:19,000 --> 01:23:21,000
latest react 19 server actions with a new form feature

789
01:23:25,000 --> 01:23:27,000
you can pass a server action to a form and automatically submit the form to the

790
01:23:30,000 --> 01:23:32,000
server this is quite new so bear with me essentially you define an HTML 5 form

791
01:23:37,000 --> 01:23:39,000
give it an action which can be a server action and it'll execute on the server

792
01:23:42,000 --> 01:23:44,000
and I also have an example from nextjs docs saying that react extends the HTML form and you can provide a server action

793
01:23:50,000 --> 01:23:52,000
with the action prop so let's explore it in action no pun intended and I'll turn this

794
01:23:57,000 --> 01:23:59,000
onclick into an action specifically it is an asynchronous server action trying

795
01:24:03,000 --> 01:24:05,000
to sign us in now within it I can render a button that'll have a type is equal to

796
01:24:09,000 --> 01:24:11,000
submit it'll simply submit the form and we can say something like login right

797
01:24:15,000 --> 01:24:17,000
here now if you press the login button check this out we got redirected to

798
01:24:21,000 --> 01:24:23,000
GitHub authentication but we get a bit of a warning saying that the redirect URI is not associated with this

799
01:24:27,000 --> 01:24:29,000
application pointing to a slight misconfiguration believe it or not the fix is in one single letter sometimes

800
01:24:36,000 --> 01:24:38,000
issues like these are the worst just go back to your oo setup scroll down and

801
01:24:42,000 --> 01:24:44,000
then go to the authorization callback URL I copy this over from next off

802
01:24:47,000 --> 01:24:49,000
documentation and here they have a live deployed URL under https security but

803
01:24:54,000 --> 01:24:56,000
Local Host by default is HTTP security so let's put it like this go back to our

804
01:25:01,000 --> 01:25:03,000
app and click login and there we go we can authorize YC directory so let's

805
01:25:08,000 --> 01:25:10,000
click authorize and for the second time we get an error that you now know how to

806
01:25:13,000 --> 01:25:15,000
fix it's referring to turning this client component props such as onclick

807
01:25:19,000 --> 01:25:21,000
into an actual form action so let's do just that first I would recommend that

808
01:25:24,000 --> 01:25:26,000
you try it out on your own and then we can do it together so if you want to give it a shot pause the video if not

809
01:25:31,000 --> 01:25:33,000
let's continue I'll turn this button into a form and I'll turn the onclick

810
01:25:37,000 --> 01:25:39,000
it's called a client side prop which is interesting onclick and I'll turn the onclick which is specifically called a

811
01:25:45,000 --> 01:25:47,000
client component prop interesting name if you think about it into an action

812
01:25:51,000 --> 01:25:53,000
which is no longer a client component prop in the action I'll turn this into an

813
01:25:57,000 --> 01:25:59,000
asynchronous callback function and I'll Define you server here

814
01:26:02,000 --> 01:26:04,000
to the note that it's being used on the server then I'll say await sign out and

815
01:26:09,000 --> 01:26:11,000
I'll even pass an additional option of redirect to equal to forward slash so

816
01:26:15,000 --> 01:26:17,000
after log out we redirect back to homepage if I save this you can see

817
01:26:22,000 --> 01:26:24,000
we're now good you can see my full name right here at top right and also the create and log out buttons this means

818
01:26:29,000 --> 01:26:31,000
that next o is properly reading the user session great for the time being I also

819
01:26:35,000 --> 01:26:37,000
have to turn this span into a button with a type equal to submit so now if we press log out we are

820
01:26:43,000 --> 01:26:45,000
out and if we press log in we're back in perfect I hope that made sense you have

821
01:26:49,000 --> 01:26:51,000
officially learned how to set up authentication from scratch using next off as well as some goas with using

822
01:26:56,000 --> 01:26:58,000
server actions within client component props and how to fix those issues within

823
01:27:02,000 --> 01:27:04,000
new react 19 forms and I even prepared a quick diagram for you so we can do a

824
01:27:08,000 --> 01:27:10,000
quick recap as a user you first click that sign in with GitHub button at the top of course I'm referring to our login

825
01:27:15,000 --> 01:27:17,000
button once we click it our nextjs app will initiate authentication over to

826
01:27:20,000 --> 01:27:22,000
next off which will then redirect to GitHub oo GitHub oath will then request

827
01:27:26,000 --> 01:27:28,000
our user for authorization that looks something like this I click it and then if we haven't

828
01:27:32,000 --> 01:27:34,000
been logged in previously it would redirect us to that GitHub page but in this case it redirected us and we

829
01:27:39,000 --> 01:27:41,000
directly granted permissions now it's time for GitHub and next o to communicate GitHub sent over the

830
01:27:45,000 --> 01:27:47,000
authorization code to next O next o exchanged that code for the access token

831
01:27:50,000 --> 01:27:52,000
GitHub returned that access token and then next o requested user data GitHub

832
01:27:56,000 --> 01:27:58,000
returned it and that was enough for us to create a session once the session was created we were redirected to the

833
01:28:03,000 --> 01:28:05,000
homepage and this is how the entire o flow works from scratch using next next

834
01:28:09,000 --> 01:28:11,000
o and a thirdparty oop provider in this case GitHub but it's more or less the

835
01:28:14,000 --> 01:28:16,000
same for Google Facebook or any other if you'd like me to do more of these graphs and deeper explanations in future videos

836
01:28:21,000 --> 01:28:23,000
let me know in the comments down below and I'll make sure to include it every website also has its unique Theming and Fonts

837
01:28:29,000 --> 01:28:31,000
theme and if you compare the font family of our links you'll notice that it's

838
01:28:35,000 --> 01:28:37,000
different from the logo and it'll become even more apparent once we continue building at our homepage here we have a

839
01:28:42,000 --> 01:28:44,000
really bold font so let's ensure that our entire app actually uses it for that we'll have to set up our tailan config

840
01:28:49,000 --> 01:28:51,000
so if you go to the description down below click the GitHub repo and then go to Snippets right here you'll see our

841
01:28:56,000 --> 01:28:58,000
Tailwind config and this time I'll make sure to explain it thoroughly so let's

842
01:29:02,000 --> 01:29:04,000
copy it let's go to our file explorer open up our tailwind config.txt

843
01:29:11,000 --> 01:29:13,000
and CSS works you extend the theme to provide some specific variables that you

844
01:29:18,000 --> 01:29:20,000
can use later on in the code so for example when you're saying EXs Max with

845
01:29:23,000 --> 01:29:25,000
something then you're referring to 475 pixels to apply this property or with colors it's

846
01:29:31,000 --> 01:29:33,000
even simpler instead of every time saying text Dash and then providing a special

847
01:29:38,000 --> 01:29:40,000
property like this ff8 F0 and then closing it every time you can just

848
01:29:44,000 --> 01:29:46,000
simply say text- 100 basically you're providing

849
01:29:49,000 --> 01:29:51,000
your own custom colors which you can more easily reuse across the entire project and where are you going to get

850
01:29:56,000 --> 01:29:58,000
these colors from well if you go to the figma design and you show the UI you can

851
01:30:02,000 --> 01:30:04,000
select a specific element and then right here under properties you can see the padding the width and everything and for

852
01:30:10,000 --> 01:30:12,000
elements that have a background or a font you can also see background colors so if you go right here to our hero

853
01:30:17,000 --> 01:30:19,000
section you can see E2 b69 and right here that is the default color of our

854
01:30:23,000 --> 01:30:25,000
application so what we're going to do is just take these colors and put them right here with proper naming different

855
01:30:29,000 --> 01:30:31,000
versions of blacks the primary secondary the white and then we're also adding a

856
01:30:35,000 --> 01:30:37,000
font family of font work SS I hope that makes sense and if you'd like me to do a

857
01:30:40,000 --> 01:30:42,000
detailed video on setting up a Tailwind config just let me know with that in mind we get one more error in our

858
01:30:46,000 --> 01:30:48,000
application saying that we haven't installed Tailwind CSS animate it is a great plugin for Tailwind CSS allowing

859
01:30:54,000 --> 01:30:56,000
to further animate your Styles so in this case I'll simply run mpm install tailin CSS animate to add it to our pek

860
01:31:01,000 --> 01:31:03,000
adjacent alongside Tailwind CSS animate we also have Tailwind CSS typography

861
01:31:07,000 --> 01:31:09,000
which will allow us to further play with fonts so just run mpm install at tailin

862
01:31:12,000 --> 01:31:14,000
CSS typography as well if you reload we're good to go now let's go over to

863
01:31:17,000 --> 01:31:19,000
our primary layout it is this one right here directly within the app we'll use

864
01:31:23,000 --> 01:31:25,000
this this one to set up the right fonts you could of course use Google fonts to set this up but it is actually

865
01:31:30,000 --> 01:31:32,000
preferable to have them hosted locally so I provided all the fonts and assets

866
01:31:35,000 --> 01:31:37,000
for this project right here within the assets directory so just open it up press download open up the assets and

867
01:31:42,000 --> 01:31:44,000
unzip them and then simply drag and drop them to the root of your directory in the assets we currently have a new

868
01:31:49,000 --> 01:31:51,000
favicon so let's simply pull it into the app which is going to place the old one

869
01:31:55,000 --> 01:31:57,000
there we go this is the new one kind of like a light bulb idea for our startup next in the assets folder we also have

870
01:32:02,000 --> 01:32:04,000
the fonts so let's delete the current font folder and drag and drop the new one into the app and finally we have the

871
01:32:09,000 --> 01:32:11,000
public which is outside of the app this one right here below the node modules so delete it and drag and drop the one from

872
01:32:17,000 --> 01:32:19,000
the assets outside of the assets into the root not into the app Remember the

873
01:32:23,000 --> 01:32:25,000
public folder has to be outside of the app now for the time being this will break our application because we have

874
01:32:29,000 --> 01:32:31,000
added new fonts so let's delete the existing ones and say const work sense which is

875
01:32:36,000 --> 01:32:38,000
the font family is equal to local font pass an options object with a source

876
01:32:42,000 --> 01:32:44,000
equal to and now we have to point to different font styles of that font here we're using the new nextjs functionality

877
01:32:49,000 --> 01:32:51,000
where we can define local fonts directly within our application each one will have a path of that SL fonts slor sense

878
01:33:00,000 --> 01:33:02,000
dblack dttf so we're simply pointing to the path of that specific font this one

879
01:33:06,000 --> 01:33:08,000
is black so it'll have a weight of 900 and a style equal to normal now we'll

880
01:33:14,000 --> 01:33:16,000
have to duplicate this a few times so let's do that 1 2 3 4 5 6 7 maybe even

881
01:33:21,000 --> 01:33:23,000
because we'll want to have all different weights of that font so we'll have something like 800 which is going to be

882
01:33:28,000 --> 01:33:30,000
work sense-- extra bold then we're going to have 700 which is going to be bold

883
01:33:37,000 --> 01:33:39,000
then we'll have something like 600 which is going to be semi bold then we have

884
01:33:42,000 --> 01:33:44,000
500 which is going to be medium we have 400 which is regular then we have 200

885
01:33:50,000 --> 01:33:52,000
which is thin and I'll duplicate it one final time this time it'll be extra light and

886
01:34:00,000 --> 01:34:02,000
it'll be 100 finally we need to provide a variable name right here below this

887
01:34:06,000 --> 01:34:08,000
array by saying variable to Define which class will set this font up it'll be

888
01:34:12,000 --> 01:34:14,000
font dwor sense great and you can see that it's still complaining here because

889
01:34:17,000 --> 01:34:19,000
we're using the previous Sans font instead of this right here we'll render

890
01:34:23,000 --> 01:34:25,000
work sense. variable there we

891
01:34:29,000 --> 01:34:31,000
go and you can see our font family immediately changed for all elements within our Navar another thing we can do

892
01:34:36,000 --> 01:34:38,000
in this layout as you've learned at the start of this course is that you can change the title in this case let's call

893
01:34:42,000 --> 01:34:44,000
it YC directory and we can also provide some kind of a description like pitch vote

894
01:34:51,000 --> 01:34:53,000
and grow if I save this you can see that our favicon as well as the title have changed immediately

895
01:34:58,000 --> 01:35:00,000
that's great you've just set up the primary layout of our application to allow for Tailwind CSS theming as well

896
01:35:05,000 --> 01:35:07,000
as you have learned how to use local fonts allowing you not to depend on external services like Google fonts you

897
01:35:12,000 --> 01:35:14,000
have added your own fonts within your application which will always be here no matter what great job now we can move to

898
01:35:20,000 --> 01:35:22,000
an exciting part that will turn this black screen into something much more engaging so let's focus on the hero

899
01:35:27,000 --> 01:35:29,000
section next to get started with our homepage Hero Section

900
01:35:32,000 --> 01:35:34,000
you can go into the root route group and dive into the page. DSX this is where

901
01:35:39,000 --> 01:35:41,000
our home is now remember when we were talking about theming not that long ago

902
01:35:44,000 --> 01:35:46,000
well in this case we'll extend our theming even further if you take a look

903
01:35:50,000 --> 01:35:52,000
at the design you'll notice that there are some shared styles that we can read use such as the heading right here you

904
01:35:56,000 --> 01:35:58,000
can notice that this picture startup connect with entrepreneurs is also shared here and here same thing for this

905
01:36:04,000 --> 01:36:06,000
yellow thing at the top the styles for this description so instead of declaring the Styles every single time we can

906
01:36:11,000 --> 01:36:13,000
create a utility class called heading or subheading and then we can reuse it

907
01:36:17,000 --> 01:36:19,000
further let me show you how to do that I'll head over to global. CSS and here

908
01:36:23,000 --> 01:36:25,000
we import in Tailwind which is great but what Tailwind CSS also allows you to do

909
01:36:28,000 --> 01:36:30,000
is to add something known as ADD layer and then utilities these are called

910
01:36:34,000 --> 01:36:36,000
utility classes and if you say something like do heading right here you can use a

911
01:36:40,000 --> 01:36:42,000
property of apply meaning once you use this class which tailin CSS classes will

912
01:36:46,000 --> 01:36:48,000
be applied well let's think about it for example you'll apply a property of

913
01:36:52,000 --> 01:36:54,000
uppercase right here because all of the text is uppercased so let's do

914
01:36:57,000 --> 01:36:59,000
uppercase Also let's do BG black because it'll have a black background padding X

915
01:37:03,000 --> 01:37:05,000
of six to provide some spacing on the left and right and padding y of three to provide spacing on top and bottom

916
01:37:09,000 --> 01:37:11,000
usually it was easier to get these styles from the figma design but nowadays figma wants you to pay for the

917
01:37:15,000 --> 01:37:17,000
dev mode if you had it you would be able to extract some more additional CSS properties from it but don't think that

918
01:37:21,000 --> 01:37:23,000
you would immediately get everything and then paste it here um typically many things in the design are hardcoded like for example this

919
01:37:28,000 --> 01:37:30,000
padding values you're not going to put these exact values because we have to ensure it works across all devices so

920
01:37:36,000 --> 01:37:38,000
it's good to sometimes try to figure it out on your own and then convert those styles from figma to here we'll change

921
01:37:43,000 --> 01:37:45,000
the font to font work sense we'll change the font to extra bold we'll make the

922
01:37:49,000 --> 01:37:51,000
text white because we have a dark background here let's also set on small devices the text size to 54 pixels on

923
01:37:57,000 --> 01:37:59,000
small devices we can also set the leading which is the space in between the characters to 64 pixels typically

924
01:38:04,000 --> 01:38:06,000
the text can be set to 36 pixels oh it's jumping out of my screen right here because it's so long there we go the

925
01:38:12,000 --> 01:38:14,000
text will be set to 36 pixels typically the leading will be set to 46 pixels if

926
01:38:18,000 --> 01:38:20,000
we're on regular devices Max W will be set to 5 XL

927
01:38:23,000 --> 01:38:25,000
text will be centered and margin y will be set to five that's a lot of classes

928
01:38:29,000 --> 01:38:31,000
for one single heading but it's much better to have them here in the utilities rather than to have all of

929
01:38:37,000 --> 01:38:39,000
those things copied and then we can paste them right here for this heading I

930
01:38:43,000 --> 01:38:45,000
mean just look at this right it will be too much and if it go back sure we have

931
01:38:48,000 --> 01:38:50,000
a nice looking heading but even the fact that here we have all the Styles is not a problem that's how Tailwind CSS is

932
01:38:55,000 --> 01:38:57,000
designed what is a problem is that back right here on our create we'll have to

933
01:39:01,000 --> 01:39:03,000
copy and paste all of those Styles and then imagine if one thing changes not good right same thing here so for that

934
01:39:10,000 --> 01:39:12,000
reason we create a utility class give it a name and now when you want to reuse

935
01:39:15,000 --> 01:39:17,000
that same thing you just say heading okay so now if we go back before it

936
01:39:21,000 --> 01:39:23,000
works we actually have to import the font right here in the global and we do get a slight error here but it just

937
01:39:28,000 --> 01:39:30,000
looks like I forgot it to add a dash right here in the font Works hands so if I add it we're good you can see the home

938
01:39:35,000 --> 01:39:37,000
right here and our code right here is looking incredibly clean now you can head to the read me file of this video

939
01:39:42,000 --> 01:39:44,000
and copy the global. CSS from there and override everything we have here if you

940
01:39:48,000 --> 01:39:50,000
do that you'll notice that we're adding a few more of these utility classes to make the styling of our app a bit easier

941
01:39:54,000 --> 01:39:56,000
but at any point in time you can just refer to the global. CSS and see exactly

942
01:40:00,000 --> 01:40:02,000
what CSS are we applying as you can see the heading we just wrote is right here among the tag

943
01:40:07,000 --> 01:40:09,000
the pin container the subheading and more I hope this makes sense now alongside improving our theming with the

944
01:40:13,000 --> 01:40:15,000
global. CSS to make our Tailwind CSS classes more reusable it's also the

945
01:40:18,000 --> 01:40:20,000
perfect time to install shaten to be able to reuse some of the components

946
01:40:24,000 --> 01:40:26,000
that will help us make the UI of our application so go to ui. shen.com and

947
01:40:30,000 --> 01:40:32,000
search for the CLI they just released it it is completely new and it's something

948
01:40:35,000 --> 01:40:37,000
I want to teach you in this course as well the Shian CLI provides an init

949
01:40:41,000 --> 01:40:43,000
command allowing you to configure and add dependencies for your project so let's do it together we can copy this

950
01:40:47,000 --> 01:40:49,000
command and add it to our terminal MPX Shad CN add latest in

951
01:40:54,000 --> 01:40:56,000
it it's going to ask us a couple of questions you can choose the style of New York in this case let's go with

952
01:41:00,000 --> 01:41:02,000
slate and for CSS variables you can choose either yes or no and this will update our tailin config and our Global

953
01:41:07,000 --> 01:41:09,000
CSS so let's check them out by going to globals looking at the globals it

954
01:41:13,000 --> 01:41:15,000
remains very similar but they have modified the one that we have copied so

955
01:41:18,000 --> 01:41:20,000
it's better to stay on the safe side and copy and paste it one more time from the read me that I provided to you and the

956
01:41:25,000 --> 01:41:27,000
same things goes for the Tailwind config because they modify that as well so if you just override both of

957
01:41:32,000 --> 01:41:34,000
these two new files and go back to Local Host 3000 everything should look great

958
01:41:37,000 --> 01:41:39,000
and we are ready to start coding the header of our application first I'll create a new section it's an HTML 5

959
01:41:46,000 --> 01:41:48,000
Section component and I'll give it a class name equal to

960
01:41:51,000 --> 01:41:53,000
pinkcore container and this will provide this container right here and within it I'll put this

961
01:41:58,000 --> 01:42:00,000
H1 with a property of heading instead of simply saying home it can say something

962
01:42:05,000 --> 01:42:07,000
like pitch your startup then we can add a Break Tag and right below we can say

963
01:42:11,000 --> 01:42:13,000
connect with entrepreneurs okay this is looking great and below this H1 we can

964
01:42:18,000 --> 01:42:20,000
also create a P tag that will have a class name equal to

965
01:42:24,000 --> 01:42:26,000
subheading and exclamation mark Max dw-3 XL we use exclamation mark when we want

966
01:42:31,000 --> 01:42:33,000
to override some other styles previously provided to this element and here we can

967
01:42:36,000 --> 01:42:38,000
say submit ideas vote on

968
01:42:43,000 --> 01:42:45,000
pitches and get noticed in Virtual

969
01:42:50,000 --> 01:42:52,000
competitions there we go sounds exciting if you make your screen a bit

970
01:42:55,000 --> 01:42:57,000
smaller like this or if you make it even larger you'll notice those lines appear

971
01:43:02,000 --> 01:43:04,000
right here and those lines form a very important part of our visual design so where are they coming from well we can

972
01:43:08,000 --> 01:43:10,000
further inspect the pink container class which is right in the globals and here

973
01:43:14,000 --> 01:43:16,000
we apply a pattern class name to it let's explore that pattern further it

974
01:43:20,000 --> 01:43:22,000
is right here below and you can see that we're applying a background image where

975
01:43:25,000 --> 01:43:27,000
it's just a single line being repeated now we can collapse it even further let's go somewhere on the mobile view

976
01:43:33,000 --> 01:43:35,000
right here and this is already looking great and what do we have to do below

977
01:43:38,000 --> 01:43:40,000
our P tag well let's refer to the design it'll be the input field and while we

978
01:43:44,000 --> 01:43:46,000
could create it right here it's better to create a new component for it because while the homepage is server side

979
01:43:50,000 --> 01:43:52,000
rendered the search input will have to have some client functionality right to manage keyboard presses and button

980
01:43:57,000 --> 01:43:59,000
clicks at least that's what we expected so far right so let's see if that's still true with the latest versions of

981
01:44:03,000 --> 01:44:05,000
react and nextjs is there maybe a way to allow us to keep this component as a

982
01:44:09,000 --> 01:44:11,000
server rendered component well let's give that a shot in the next

983
01:44:14,000 --> 01:44:16,000
chapter let's create a new component in the components folder which I'll call Search Form

984
01:44:20,000 --> 01:44:22,000
search form. TSX run rafc right inside of it to create a

985
01:44:27,000 --> 01:44:29,000
simple functional component and then import it right here below the speed tag that's going to look something like

986
01:44:33,000 --> 01:44:35,000
this search form there we go my IDE Auto imported

987
01:44:40,000 --> 01:44:42,000
for me coming from at slapp SL components SL search form and right here

988
01:44:47,000 --> 01:44:49,000
in the hero section you can see the search form appear right here which means we are ready to dive into it and

989
01:44:53,000 --> 01:44:55,000
start implementing it but let's get to the elephant in the room if this is going to be a form and it surely will

990
01:44:59,000 --> 01:45:01,000
can we still ensure that this is rendered on the server side and not client side up to this point that would

991
01:45:06,000 --> 01:45:08,000
have been impossible but with react 19 forms and the way that nextjs is

992
01:45:11,000 --> 01:45:13,000
extending them even further the new form element now provides prefetching and UI

993
01:45:17,000 --> 01:45:19,000
loading client side navigation on submission and Progressive enhancements in simple terms nextjs now supports a

994
01:45:24,000 --> 01:45:26,000
new form component which is used to automatically update URL search parameters and reduce the boilerplate

995
01:45:31,000 --> 01:45:33,000
code needed to achieve anything the basic usage looks something like this so let's implement it together first I'll

996
01:45:39,000 --> 01:45:41,000
wrap everything in a form coming from nextjs that form will have an action

997
01:45:44,000 --> 01:45:46,000
equal to forward slash and it also has a scroll property which we can set to

998
01:45:50,000 --> 01:45:52,000
false we don't want to scroll anywhere once we sub submitted and we can also give it a class name equal to search

999
01:45:57,000 --> 01:45:59,000
form there we go quite a simple form right within it we will render just a

1000
01:46:02,000 --> 01:46:04,000
regular HTML input with a name equal to query the default value equal to an

1001
01:46:08,000 --> 01:46:10,000
empty string for now a class name equal to search- input and a

1002
01:46:14,000 --> 01:46:16,000
placeholder equal to search startups there we go that looks great

1003
01:46:21,000 --> 01:46:23,000
finally if the user has sted something into it then we can provide a button to reset the form so let's create a div

1004
01:46:29,000 --> 01:46:31,000
with a class name equal to flex and the gap of two and now we'll want to

1005
01:46:35,000 --> 01:46:37,000
implement this button right here but before the button if we type something and search for it we want to also

1006
01:46:40,000 --> 01:46:42,000
implement this x right here so we can clear our search so later on we'll have some kind of a query right here so let's

1007
01:46:48,000 --> 01:46:50,000
define a fake query and let's say that it's equal to something like test we can

1008
01:46:53,000 --> 01:46:55,000
use this query as a default query here as well that's going to look something like this and now if we have an active

1009
01:47:01,000 --> 01:47:03,000
query then we want to render some kind of a button that would allow us to reset

1010
01:47:06,000 --> 01:47:08,000
it so for now this can be a regular button of a type equal to

1011
01:47:14,000 --> 01:47:16,000
reset and on click it'll call the reset function so we can declare it right here

1012
01:47:21,000 --> 01:47:23,000
above const reset set is equal to a functional component where we first have

1013
01:47:27,000 --> 01:47:29,000
to get access to the form by saying form is equal to document. query selector

1014
01:47:33,000 --> 01:47:35,000
we're going to search it by a DOT search- form and since we're in typescript we have to define the type as

1015
01:47:40,000 --> 01:47:42,000
HTML form element like this and if a form exists then we're going to Simply

1016
01:47:47,000 --> 01:47:49,000
run form. reset which will reset the form on that button click but here's an

1017
01:47:53,000 --> 01:47:55,000
issue even though the form itself will be a server side component the button

1018
01:47:58,000 --> 01:48:00,000
and the onclick recalling here is still client side so we have to extract it

1019
01:48:03,000 --> 01:48:05,000
into a new component that's going to be pretty simple we can create a new component called search form reset.

1020
01:48:13,000 --> 01:48:15,000
TSX run rafc within it then we can take this

1021
01:48:21,000 --> 01:48:23,000
button and and place it right here and we can also take this reset

1022
01:48:31,000 --> 01:48:33,000
form and we can place it right here within this component now going back instead of this

1023
01:48:37,000 --> 01:48:39,000
button we can simply render the component that we just created search form reset as a self

1024
01:48:47,000 --> 01:48:49,000
closing component and now if we go into that component for the first time in this video

1025
01:48:53,000 --> 01:48:55,000
we can use use client directive to turn only this small part of the UI into a

1026
01:48:59,000 --> 01:49:01,000
client component but the rest will still be serers side rendered this button will

1027
01:49:04,000 --> 01:49:06,000
render a link right within it coming from next link it'll have an HRA of forward slash and a class name equal to

1028
01:49:13,000 --> 01:49:15,000
search- BTN and within it we can just render an X character we can also give

1029
01:49:19,000 --> 01:49:21,000
it a text- white so we can see that X there we go this is looking good now

1030
01:49:26,000 --> 01:49:28,000
right below it we'll render another button and this one will have a type is

1031
01:49:32,000 --> 01:49:34,000
equal to submit to submit the form with a class name of search- BTN and it can

1032
01:49:38,000 --> 01:49:40,000
say something like s for search of course later on we'll turn this into an actual icon but for now we can give it s

1033
01:49:46,000 --> 01:49:48,000
and then text- white so we can know that we can clear the search as well as actually search for something so how

1034
01:49:53,000 --> 01:49:55,000
does this work right now we're not really submitting anything or clearing anything because the query is always set

1035
01:50:00,000 --> 01:50:02,000
to test but let me show you how easy it is to now make this into a fully

1036
01:50:06,000 --> 01:50:08,000
functional URL modifying server rendered form for a moment we'll go back to this

1037
01:50:13,000 --> 01:50:15,000
page and there we'll try to access the query from the search parameters so you

1038
01:50:20,000 --> 01:50:22,000
know how I taught you that right here through prop on every single nextjs page you have access to search prams we have

1039
01:50:26,000 --> 01:50:28,000
to define the type of search prams as well so we can say search params will be equal of a type promise

1040
01:50:35,000 --> 01:50:37,000
which then results in a query which is going to be of a type string then we can

1041
01:50:41,000 --> 01:50:43,000
extract that query by saying const query is equal to we can wrap it in

1042
01:50:46,000 --> 01:50:48,000
parenthesis say await search for rams. query and if we provide await there we

1043
01:50:52,000 --> 01:50:54,000
have to turn this function into a sync and now that we have the query we can simply pass it into the search form as a

1044
01:50:59,000 --> 01:51:01,000
prop so let's say query is equal to query back in the search form we can now

1045
01:51:04,000 --> 01:51:06,000
accept this query as a prop query and it'll be query optional of a type

1046
01:51:13,000 --> 01:51:15,000
string and now we can remove this fake query reload our application clear this

1047
01:51:19,000 --> 01:51:21,000
test and you can see that now if we search for something like let's say startup for robots have you seen Elon

1048
01:51:26,000 --> 01:51:28,000
musk's latest wi robot event that was pretty crazy so let's search for we

1049
01:51:31,000 --> 01:51:33,000
robot and press enter check this out it worked immediately even though you might

1050
01:51:37,000 --> 01:51:39,000
not know that it's doing something but it's actually modifying the query in the URL saying we robot it's automatically

1051
01:51:44,000 --> 01:51:46,000
doing all the pars sync such as adding a Plus instead of a space and it is as easy as that I can now actually clear it

1052
01:51:51,000 --> 01:51:53,000
which clears it from the URL and it works perfectly you can continue modifying it and it's just

1053
01:51:59,000 --> 01:52:01,000
Flawless it's super simple yet super effective because it is a robust serers

1054
01:52:06,000 --> 01:52:08,000
side rendered form which just works it's connected through nextjs search prrams

1055
01:52:12,000 --> 01:52:14,000
query and yeah that's it to be honest I'm pretty amazed at how simple it is to implement forms typically it is much

1056
01:52:20,000 --> 01:52:22,000
more complicated now to finish it off let's actually add icons here instead of

1057
01:52:25,000 --> 01:52:27,000
an S we can use a search icon coming from shaten or if I'm going to be more

1058
01:52:32,000 --> 01:52:34,000
precise it's coming from Lucid react which is a dependency of shat xen which provides all sorts of great icons so we

1059
01:52:40,000 --> 01:52:42,000
can give it a class name equal to size of five there we go that's much better

1060
01:52:48,000 --> 01:52:50,000
and we can do the same thing within the search form right here where we can turn

1061
01:52:53,000 --> 01:52:55,000
this into an X icon with a class name which is equal to size all five and

1062
01:52:59,000 --> 01:53:01,000
there we go this is now looking great while we're on the topic of shaten we installed it but we haven't really used

1063
01:53:06,000 --> 01:53:08,000
it up to this point so let's say that we want to turn these buttons into shat CN buttons how would we do that well head

1064
01:53:14,000 --> 01:53:16,000
over to the terminal and run MPX shaten add latest add and then you typee the

1065
01:53:20,000 --> 01:53:22,000
name of the component you want to add such as is a button the code for that button will automatically be installed

1066
01:53:27,000 --> 01:53:29,000
and added to your codebase that's the benefit of using Shaden over some other

1067
01:53:32,000 --> 01:53:34,000
component libraries like material UI because they actually provide you with the full code for this button and it's

1068
01:53:39,000 --> 01:53:41,000
completely yours you own it and you can change any properties even though in most cases it's not necessary because

1069
01:53:45,000 --> 01:53:47,000
you can style it further by simply providing additional tailin CSS classes now the chat CN created this new

1070
01:53:51,000 --> 01:53:53,000
components folder I I notice that we have our own right here in the app and that's actually not a recommended

1071
01:53:56,000 --> 01:53:58,000
practice so I'm really glad that this has happened typically in nextjs I would recommend keeping within the app only

1072
01:54:03,000 --> 01:54:05,000
the things that nygs specifically needs there such as the routes or API folders

1073
01:54:08,000 --> 01:54:10,000
or fonts or favicons or layouts but components are additional pieces of UI

1074
01:54:14,000 --> 01:54:16,000
that you can put outside of it so for now let's simply take these three components and move them over to the

1075
01:54:21,000 --> 01:54:23,000
components folder that is outside of the app folder and let's delete this components

1076
01:54:29,000 --> 01:54:31,000
folder now the shaten components will be within the UI and our own components

1077
01:54:35,000 --> 01:54:37,000
will be just within the components folder and we might need to modify some paths to make this work so let's head

1078
01:54:40,000 --> 01:54:42,000
over to root and then layout. TSX and let's fix the import for this snap bar

1079
01:54:47,000 --> 01:54:49,000
by removing the app folder and same thing in the page remove the app folder from the

1080
01:54:53,000 --> 01:54:55,000
import and one more time in the search form remove the app from search form

1081
01:54:59,000 --> 01:55:01,000
reset and we are good great in this chapter you learned how you can use the

1082
01:55:06,000 --> 01:55:08,000
latest and greatest of react and NEX gs's new form to handle it all on the

1083
01:55:11,000 --> 01:55:13,000
server side with less Boiler blate code in the next chapter let's focus on what

1084
01:55:16,000 --> 01:55:18,000
comes after the hero section which is a list of all the startups of course to create all we only only need to create

1085
01:55:23,000 --> 01:55:25,000
one proper reusable startup card and the rest will simply follow so let's do that All Startups & Startup Card

1086
01:55:30,000 --> 01:55:32,000
next right below the Ping container or the hero section I'll create another

1087
01:55:35,000 --> 01:55:37,000
section which will wrap all of our startups or startup cards I'll give it a

1088
01:55:40,000 --> 01:55:42,000
class name equal to section uncore container and there I'll render a new P

1089
01:55:47,000 --> 01:55:49,000
tag with a class name equal to text D30 D semi Bold And if a query exists then

1090
01:55:55,000 --> 01:55:57,000
I'll render something like search results for and let's make this a template string so we can modify it

1091
01:56:02,000 --> 01:56:04,000
query pretty simple right search results for the following query but if a query

1092
01:56:08,000 --> 01:56:10,000
doesn't exist we'll simply say something along the lines of all

1093
01:56:15,000 --> 01:56:17,000
startups great let's save it and you can see all startups but if I search for

1094
01:56:21,000 --> 01:56:23,000
some something like programming keyboards you can see search results for programming keyboards pretty

1095
01:56:28,000 --> 01:56:30,000
straightforward right now let's go down and let's create a UL an unordered list

1096
01:56:35,000 --> 01:56:37,000
with a class name equal to margin top of seven and cardor

1097
01:56:42,000 --> 01:56:44,000
grid now this cardor grid is a very interesting utility class so let's

1098
01:56:48,000 --> 01:56:50,000
explore it further I typically select it and then press command shift F which

1099
01:56:53,000 --> 01:56:55,000
opens up the global search in this IDE and then you can just automatically find it within the globals or you can just

1100
01:57:00,000 --> 01:57:02,000
copy it go to Global CSS and search for card grid perfect now this card grid

1101
01:57:08,000 --> 01:57:10,000
right here applies a three column grid on medium devices and a two column grid

1102
01:57:13,000 --> 01:57:15,000
on regular devices basically for devices of about 768 pixels or about 800 pixels

1103
01:57:20,000 --> 01:57:22,000
and larger it'll show three columns and for smaller devices it'll show two and

1104
01:57:26,000 --> 01:57:28,000
then a gap of five applies about 20 pixels of space in between the elements

1105
01:57:32,000 --> 01:57:34,000
now within there we can map over our posts later on of course we'll fetch

1106
01:57:37,000 --> 01:57:39,000
those posts directly from sanity but for the time being I can create a new array

1107
01:57:43,000 --> 01:57:45,000
const posts which is equal to an array where we have some objects and let's say that each object contains an underscore

1108
01:57:51,000 --> 01:57:53,000
created at property here we can say something like yesterday it can also contain the number of views that the

1109
01:57:58,000 --> 01:58:00,000
post has so let's do something like 55 we'll need to have an author of the post

1110
01:58:04,000 --> 01:58:06,000
and that author will be an object because it will contain more information such as the ID of the author and that

1111
01:58:10,000 --> 01:58:12,000
can be an underscore ID we also need the underscore ID of the post itself so we

1112
01:58:15,000 --> 01:58:17,000
can set that to something like one as well of course what would a post be without a description so we can say this

1113
01:58:22,000 --> 01:58:24,000
this is a description and we can also render an image so for the time being we need to find a live URL of an image oops

1114
01:58:30,000 --> 01:58:32,000
it looks like while I was searching for that live image the recording actually stopped so you can find any image online

1115
01:58:37,000 --> 01:58:39,000
put the link here and then after that add the category in this case I typed robots and then also add the title I

1116
01:58:45,000 --> 01:58:47,000
said we robots right here once you do that you can head over to the UL that

1117
01:58:50,000 --> 01:58:52,000
you created before and we'll need to map over the posts by saying posts question

1118
01:58:55,000 --> 01:58:57,000
mark. length is greater than zero and if it is greater then we can map over the

1119
01:59:01,000 --> 01:59:03,000
posts where we get each post of a type startup card type and an index and for

1120
01:59:07,000 --> 01:59:09,000
each one we can render a new component called startup card so now let's create

1121
01:59:12,000 --> 01:59:14,000
this startup card component by going to the components folder and creating a new file called startup card. TSX you know

1122
01:59:21,000 --> 01:59:23,000
the run rafc and then go ahead here and just import it automatically and this will

1123
01:59:28,000 --> 01:59:30,000
fix the issue you should be able to see one startup card appear because we only have one Post in our fake posts array to

1124
01:59:35,000 --> 01:59:37,000
this startup card we can pass the key because we're mapping over things such as index but typically passing an index

1125
01:59:41,000 --> 01:59:43,000
as a key is not the best practice so what I would recommend is just getting the post and then underscore ID as the

1126
01:59:48,000 --> 01:59:50,000
ID because that's going to be always unique and we can pass the entire post

1127
01:59:54,000 --> 01:59:56,000
itself great now we have to go into the startup card to accept those props and

1128
01:59:59,000 --> 02:00:01,000
to render them nicely on the screen so let's get access to the post and that is

1129
02:00:05,000 --> 02:00:07,000
of a type post is a startup type

1130
02:00:11,000 --> 02:00:13,000
card we'll add this one later on once we Implement sanity because one of San's

1131
02:00:16,000 --> 02:00:18,000
great features is automatic type checking for the documents in our collections for now this should

1132
02:00:21,000 --> 02:00:23,000
shouldn't break our application so let's turn this div into an Li because we are now within an unordered list and each Li

1133
02:00:29,000 --> 02:00:31,000
will have a class name equal to Startup dasc card and group there we go that'll

1134
02:00:36,000 --> 02:00:38,000
immediately provide some nice borders within it we can create a div with a

1135
02:00:41,000 --> 02:00:43,000
class name is equal to flex between within it we can render a P tag that'll

1136
02:00:47,000 --> 02:00:49,000
have a class name equal to Startup undor cardor date and within there we can

1137
02:00:53,000 --> 02:00:55,000
render the post. created at property or underscore

1138
02:00:59,000 --> 02:01:01,000
created at is how we defined it and now we can see that it was created yesterday

1139
02:01:04,000 --> 02:01:06,000
what do you say that we immediately turn this into a real date property for now we're just passing yesterday but what if

1140
02:01:11,000 --> 02:01:13,000
we used a new date like this which will actually generate a date

1141
02:01:17,000 --> 02:01:19,000
JavaScript object which is how we want to do it if you pass a new date we won't be able to render it just like string

1142
02:01:24,000 --> 02:01:26,000
we'll have to somehow turn it into a meaningful date string so let's head over to the utils file this is typically

1143
02:01:31,000 --> 02:01:33,000
where you want to add functions that do those sorts of things so let's say export function format date which

1144
02:01:39,000 --> 02:01:41,000
accepts a date of a type string and then it returns a new date of that date that

1145
02:01:46,000 --> 02:01:48,000
we pass in but we call do to Locale date

1146
02:01:51,000 --> 02:01:53,000
string in the loc of enus and we can pass the month as the

1147
02:01:58,000 --> 02:02:00,000
option to be set to long a day to be numeric and a year to be numeric as well

1148
02:02:06,000 --> 02:02:08,000
now if we save that we can wrap this post that created ad into format date

1149
02:02:13,000 --> 02:02:15,000
coming from lib utils and just pass it in if you do that now we can see October

1150
02:02:18,000 --> 02:02:20,000
133 2024 looking great right below this B tag we can create a div with a class

1151
02:02:26,000 --> 02:02:28,000
name equal to flex and a gap of

1152
02:02:31,000 --> 02:02:33,000
1.5 within it we can create an i icon which will tell us how many views we

1153
02:02:38,000 --> 02:02:40,000
have so let's give it a class name equal to size of six and text- primary and

1154
02:02:44,000 --> 02:02:46,000
below it let's render a span that'll render post. views if I save it we can

1155
02:02:51,000 --> 02:02:53,000
see 50 5 use we can also give this pan a class name equal to text- 16- medium

1156
02:02:59,000 --> 02:03:01,000
going to divs down let's create the second part of the card by giving it a class name equal to flex Dash between

1157
02:03:07,000 --> 02:03:09,000
margin top of five and the gap of five within it we can have another div with a

1158
02:03:13,000 --> 02:03:15,000
class name of flex D1 and within it we can have a link

1159
02:03:18,000 --> 02:03:20,000
element coming from next link this link element will just wrap the

1160
02:03:25,000 --> 02:03:27,000
author's name so we can point its href to SL user SL post. author questionmark

1161
02:03:34,000 --> 02:03:36,000
doore ID and within it we can render a ptag with a class name equal to text 16

1162
02:03:41,000 --> 02:03:43,000
medium and line- cl-1 which will ensure that this username stays on one line and

1163
02:03:49,000 --> 02:03:51,000
within it we can render the post. author question mark. name if I save this we should be able to see something here but

1164
02:03:56,000 --> 02:03:58,000
there's nothing appearing so if I go here oh I forgot to pass a name to our imaginary author let me use Adrien in

1165
02:04:04,000 --> 02:04:06,000
this case there we go I forgot what kind of startup is it oh it's about Elon musk's new humanoid robots Okay looks

1166
02:04:11,000 --> 02:04:13,000
like I'll be working with him on that now you can see that we're often repeating post. views post. author post.

1167
02:04:18,000 --> 02:04:20,000
author that something well it'll be easier to just destructure the properties coming out of that post you

1168
02:04:25,000 --> 02:04:27,000
can do that right here const D structure is equal to post and then you can think

1169
02:04:31,000 --> 02:04:33,000
things out of it such asore created at or views or

1170
02:04:37,000 --> 02:04:39,000
author and then from the author you can further take out the ID and the name what else do we have we have a post

1171
02:04:45,000 --> 02:04:47,000
title we have a category the post ID the post image you get the idea right

1172
02:04:52,000 --> 02:04:54,000
we can later on destructure some additional properties if needed oh here's an interesting gotcha with

1173
02:04:57,000 --> 02:04:59,000
destructuring if you're destructuring a subproperty from another property and in the same line you're destructuring

1174
02:05:03,000 --> 02:05:05,000
another property with the same name you need to rename one of those so let's actually rename the author ID the

1175
02:05:11,000 --> 02:05:13,000
underscore ID belonging to the author to author ID like this there we go and now

1176
02:05:19,000 --> 02:05:21,000
instead of saying post. created ad you can just say underscore created ad views

1177
02:05:25,000 --> 02:05:27,000
here you can just say author ID and right here you can also say name

1178
02:05:33,000 --> 02:05:35,000
much simpler right same code but makes more sense below this link we'll use another link and this one will have a

1179
02:05:40,000 --> 02:05:42,000
bit of a different href this href will point to SL startup

1180
02:05:47,000 --> 02:05:49,000
slost doore ID or just uncore ID and here we can render an

1181
02:05:53,000 --> 02:05:55,000
H3 with a class name equal to text- 26- semibold and line- clamp

1182
02:06:02,000 --> 02:06:04,000
D1 and it'll actually render just the title right here great oh make sure to

1183
02:06:08,000 --> 02:06:10,000
properly close the link there we go we are good and you can already notice that we're using two links one next to

1184
02:06:14,000 --> 02:06:16,000
another and we'll use many more links going forward so why are we using different links for the same card well

1185
02:06:20,000 --> 02:06:22,000
that's because each one of these these links will lead to another place if you click the person's name well that goes

1186
02:06:27,000 --> 02:06:29,000
to the profile page if you click on the title that goes right here to the startup Details page click on the image

1187
02:06:34,000 --> 02:06:36,000
project details click on the user Avatar well that's going to go to the profile details you get the idea right and since

1188
02:06:41,000 --> 02:06:43,000
we cannot have children link elements meaning one below another such as if we had the entire card wrapped as a link

1189
02:06:48,000 --> 02:06:50,000
pointing to project details and then have these children elements pointing to the profile I decided to create more

1190
02:06:55,000 --> 02:06:57,000
adjacent links pointing to different routes in our application now let's go below this link and below the div and

1191
02:07:01,000 --> 02:07:03,000
let's create another link this one will point to the user

1192
02:07:06,000 --> 02:07:08,000
once again so let me copy the atref from the user within it will'll show the Avatar image so let's render a nextjs

1193
02:07:14,000 --> 02:07:16,000
image tag with a source of https Colin

1194
02:07:20,000 --> 02:07:22,000
SL placehold doco SL600 by 400 and we'll give it an

1195
02:07:28,000 --> 02:07:30,000
ALT tag of placeholder with a width of about 48 height of about 48 and since

1196
02:07:36,000 --> 02:07:38,000
this is the Avatar image I'll also give it a class name equal to rounded -

1197
02:07:43,000 --> 02:07:45,000
full now if you close it and go back you'll see that nextjs will prevent us

1198
02:07:48,000 --> 02:07:50,000
from rendering this image because it doesn't know whether we trust this placehold doco Source but we do we just

1199
02:07:56,000 --> 02:07:58,000
have to let it know within the next config so let's head over to N.C config.txt

1200
02:08:11,000 --> 02:08:13,000
TPS and a host name in this case we'll leave it to as asterisk to allow for

1201
02:08:17,000 --> 02:08:19,000
images from all sources there we go now if you reload you should be able to see a placeholder right here but it doesn't

1202
02:08:24,000 --> 02:08:26,000
seem to be appearing and if you open up the terminal you can see why the requested resource has type of SVG XML

1203
02:08:32,000 --> 02:08:34,000
but dangerously allow SVG is disabled so what you can do is copy this dangerously

1204
02:08:38,000 --> 02:08:40,000
allow SVG head over to next config go within images and then add dangerously

1205
02:08:45,000 --> 02:08:47,000
allow SVG set to true and then if you reload you should be able to see the image appear right here I think even

1206
02:08:52,000 --> 02:08:54,000
setting it to 4848 would make more sense in this case there we go perfect now

1207
02:08:57,000 --> 02:08:59,000
later on we will remove this dangerously allow SVG we're only adding it right now for our placeholder images but keep in

1208
02:09:04,000 --> 02:09:06,000
mind later on these will be coming from different sources and they won't be in SVG but it's good to know that nextjs is

1209
02:09:11,000 --> 02:09:13,000
actually protecting us from things like this now let's go below this link and below the div and let's create

1210
02:09:18,000 --> 02:09:20,000
another link this will be the container for startup details so let's copy the href pointing to the startup details and

1211
02:09:27,000 --> 02:09:29,000
within it let's create a new P tag with a class name equal to Startup dasc

1212
02:09:34,000 --> 02:09:36,000
cardor description or DC for short and we can just render the description in

1213
02:09:40,000 --> 02:09:42,000
there make sure that we have these structured it right here at the top looks like we

1214
02:09:46,000 --> 02:09:48,000
haven't there we go so now we have this is a description right below this P tag

1215
02:09:52,000 --> 02:09:54,000
we can add an image and sure you could use the next gs's image component but in

1216
02:09:58,000 --> 02:10:00,000
this case I want to tell you that you don't have to nextjs is very generous with its free plan but if you have a lot

1217
02:10:04,000 --> 02:10:06,000
of images you can use up some of those optimization calls but you don't have to

1218
02:10:09,000 --> 02:10:11,000
if you just use a regular HTML image pass it some kind of a source like image

1219
02:10:15,000 --> 02:10:17,000
an Al tag of placeholder and a class name of startup dasc card under _ IMG

1220
02:10:22,000 --> 02:10:24,000
you can show a nice looking image right here as well without spending additional optimizations for now I'll leave it like

1221
02:10:29,000 --> 02:10:31,000
this now let's go below this link and let's create the footer of the card by

1222
02:10:34,000 --> 02:10:36,000
creating a div with a class name equal to flex Dash between gap of three and a margin top of

1223
02:10:43,000 --> 02:10:45,000
five within it we can create a link this link will have an href equal to a

1224
02:10:49,000 --> 02:10:51,000
dynamic template string of SL question mark query so it'll actually update the

1225
02:10:55,000 --> 02:10:57,000
query based on the category of our post and we have to set it to lower case

1226
02:11:03,000 --> 02:11:05,000
within the P tag we can simply say class name of text 16 medium and we can render

1227
02:11:10,000 --> 02:11:12,000
our category below this link we can render a Shad CN

1228
02:11:17,000 --> 02:11:19,000
button with a class name equal to Startup

1229
02:11:22,000 --> 02:11:24,000
up- cardor BTN as child because we have a link

1230
02:11:28,000 --> 02:11:30,000
within it so we want to take the form of a link and here we'll point to the

1231
02:11:33,000 --> 02:11:35,000
startup details one more time so we can say for SL startup

1232
02:11:39,000 --> 02:11:41,000
slore ID and we can say details right here there we go so now we have a nice

1233
02:11:46,000 --> 02:11:48,000
looking card with the info about the user pointing to user page and

1234
02:11:51,000 --> 02:11:53,000
additional info about the startup pointing to the startup Details page great job so far this is looking amazing

1235
02:12:00,000 --> 02:12:02,000
and if I go full screen it is looking even better you have implemented the

1236
02:12:05,000 --> 02:12:07,000
navigation bar that allows you to log in or log out we have a search which is

1237
02:12:10,000 --> 02:12:12,000
technically working because it actually modifies the URL query based on what you type and finally you have developed a

1238
02:12:17,000 --> 02:12:19,000
card UI which will'll reuse for all of our startups but right now with one limitation which

1239
02:12:23,000 --> 02:12:25,000
is that we have fake data for it right now we have no way to add new startups

1240
02:12:29,000 --> 02:12:31,000
to our application so that's exactly what we'll do next I'll teach you how to use and Implement Sanity Setup

1241
02:12:37,000 --> 02:12:39,000
sanity let me tell you a bit about why we'll be using sanity for this video

1242
02:12:42,000 --> 02:12:44,000
sanity is not just a CMS the one that you hand over to your clients and let them manage data in sanity's case you

1243
02:12:49,000 --> 02:12:51,000
can truly leverage their apis to build a whole operating system around the

1244
02:12:54,000 --> 02:12:56,000
content you'll have the studio that will mirror the content workspace of your application that you can hand over to

1245
02:13:00,000 --> 02:13:02,000
your clients so they can manage it as well and that studio is built on top of powerful apis that allow you to

1246
02:13:07,000 --> 02:13:09,000
completely customize the way that you create and manage content and finally they actually store it for you don't

1247
02:13:14,000 --> 02:13:16,000
think of this as some kind of low code no code tool it's far more than that

1248
02:13:19,000 --> 02:13:21,000
some of the biggest companies in the worlds such as Puma Tata digital or even morning Brew use them for managing their

1249
02:13:26,000 --> 02:13:28,000
content you can also use them for many different use cases such as marketing media e-commerce and more it's built for

1250
02:13:33,000 --> 02:13:35,000
Enterprise so many Fortune 500 companies use it so if you're saying something like oh but our companies actually using

1251
02:13:39,000 --> 02:13:41,000
sanity the answer is yes and you can be the one that's going to implement them within their team to make them recognize

1252
02:13:46,000 --> 02:13:48,000
the power and speed and efficiency that allows them to manage their content in and the best thing they're very neatly

1253
02:13:53,000 --> 02:13:55,000
integrated with NEX GS everything works seamlessly everything from development

1254
02:13:59,000 --> 02:14:01,000
to deployment to verell so merge changes instantly go live on the global Edge

1255
02:14:04,000 --> 02:14:06,000
Network there's the SSL encryption asset compression cash in validation a lot of things that together sanity and versel

1256
02:14:11,000 --> 02:14:13,000
do very well and then the thing that we just have to discuss the pricing sanity's pricing is incredibly generous

1257
02:14:19,000 --> 02:14:21,000
if you're just experimenting or even if want to ship smaller projects it is completely free forever you can even add

1258
02:14:26,000 --> 02:14:28,000
20 users two data sets and you also get all other features such as unlimited content types locals hosted real-time

1259
02:14:34,000 --> 02:14:36,000
content database and more those are the reasons why I chose to use sanity for this project now you can click the

1260
02:14:39,000 --> 02:14:41,000
special link down in the description to be able to follow along and see exactly what I'm seeing once you do that click

1261
02:14:46,000 --> 02:14:48,000
Start building and create an account enter your project name you you can make it start with something like

1262
02:14:53,000 --> 02:14:55,000
JSM and then YC directory or in your case it can be JSM and then you can

1263
02:14:59,000 --> 02:15:01,000
enter some other name of the project we'll start from scratch with the CLI so

1264
02:15:04,000 --> 02:15:06,000
click create project and there we go now we can initialize our project with the CLI so let's copy this command go back

1265
02:15:12,000 --> 02:15:14,000
to the code and paste it right here it'll ask you whether you want to install create sanity the CLI so just

1266
02:15:19,000 --> 02:15:21,000
say yes and it's going to ask you to log in so you can choose the login type that you used initially I'll go with

1267
02:15:26,000 --> 02:15:28,000
Google and you'll be authenticated once that is done you'll be asked whether you

1268
02:15:31,000 --> 02:15:33,000
want to add configuration files for the sanity project in the nextjs folder press y yes do you want to use

1269
02:15:39,000 --> 02:15:41,000
typescript that's going to be a big yes as well do you want to use embedded sanity Studio that's going to be a yes

1270
02:15:47,000 --> 02:15:49,000
what route do you want to be studio in by default it's for/ Studio so that's okay with us in this case we'll go with

1271
02:15:54,000 --> 02:15:56,000
a clean project no template we'll do everything from scratch and would you like to add the project ID and data set

1272
02:16:01,000 --> 02:16:03,000
to your env. loal let's say yes and there we go our dependencies are getting installed and soon enough we'll be able

1273
02:16:08,000 --> 02:16:10,000
to explore sanity studio in more detail there we go sanity configuration files

1274
02:16:13,000 --> 02:16:15,000
have been added successfully and next we'll have to install the latest version of Sanity to use the live API feature

1275
02:16:19,000 --> 02:16:21,000
they offer so I'll type mpm install next sanity at Canary and press enter now

1276
02:16:26,000 --> 02:16:28,000
let's explore the files that have been created for us if you head over right here you'll see sanity C.S it

1277
02:16:33,000 --> 02:16:35,000
automatically added environment variables for us and we also have our config pointing to the base path of the

1278
02:16:39,000 --> 02:16:41,000
studio so we should be able to explore this route let's give it a shot back in the browser I'll head over to Local Host

1279
02:16:46,000 --> 02:16:48,000
3000 SL studio and press enter but if you visit

1280
02:16:51,000 --> 02:16:53,000
this page it'll probably cause an issue and show this error could not parse module this happens because sanity

1281
02:16:57,000 --> 02:16:59,000
Studio doesn't work with turbo yet so let's head over to the package.json and under scripts where we have a Dev script

1282
02:17:04,000 --> 02:17:06,000
we'll remove the-- turbo for now now if you stop your application from running and rerun it by running mpm runev if you

1283
02:17:12,000 --> 02:17:14,000
go back and reload you can now sign into sanity studio with the same email and

1284
02:17:18,000 --> 02:17:20,000
password that you used initially and here we are we're successfully authenticated you'll be able to visit

1285
02:17:24,000 --> 02:17:26,000
the studio but you won't be able to see anything there as we chose a clean Project without any schemas when setting

1286
02:17:31,000 --> 02:17:33,000
up the project so before we can start adding some content right here which is going to be super easy and intuitive we

1287
02:17:37,000 --> 02:17:39,000
can go back to the code and explore the new files that have been created for us

1288
02:17:42,000 --> 02:17:44,000
let's start with sanity C.S this is a config file so we can use

1289
02:17:48,000 --> 02:17:50,000
sanity operations via the sanity C CLI such as the project ID data set and more

1290
02:17:54,000 --> 02:17:56,000
below that we have a sanity config this is a simple configuration file used for sanity Studio where we set the base path

1291
02:18:01,000 --> 02:18:03,000
and connect it to a specific project ID data set schema and add specific plugins

1292
02:18:07,000 --> 02:18:09,000
next we have some more important files and those are going to be within the sanity folder specifically we're going

1293
02:18:13,000 --> 02:18:15,000
to look into the sanity lib and then client. TS this is the sanity read

1294
02:18:20,000 --> 02:18:22,000
client for fetching data through queries if you set the use CDN part to false

1295
02:18:26,000 --> 02:18:28,000
this will make sure to cache whatever content you request for 60 seconds after 60 seconds you'll get a newer version of

1296
02:18:32,000 --> 02:18:34,000
the data but in between the content will be delivered from the sanity CDN network

1297
02:18:38,000 --> 02:18:40,000
if you remember this is the ISR data fetching strategy next we have a lib

1298
02:18:43,000 --> 02:18:45,000
image. DS and this is simply an image URL builder for images uploaded on

1299
02:18:49,000 --> 02:18:51,000
sanity studio so we can use on the front and side we won't need it as we'll use a markdown plugin instead so we can remove

1300
02:18:56,000 --> 02:18:58,000
it from here next we have sanity schema types right now with empty types later on

1301
02:19:03,000 --> 02:19:05,000
we'll create our own sanity schemas and Export them so that our entire application knows what kind of fields

1302
02:19:10,000 --> 02:19:12,000
will each startup or each document will have we have our envs where we list which kind of envs we need for our

1303
02:19:16,000 --> 02:19:18,000
application and finally there's the structure where you can decide how do you arrange your schemas do you want to

1304
02:19:22,000 --> 02:19:24,000
group them add specific schemas on top or others at the bottom you do it here and finally you're asking how does the

1305
02:19:30,000 --> 02:19:32,000
sanity Studio get surrendered within our app well they have added a studio page right here where they show their Studio

1306
02:19:37,000 --> 02:19:39,000
as simple as that so in this chapter we have successfully set up sanity I also

1307
02:19:42,000 --> 02:19:44,000
told you a bit about why I think it's super useful and the reasons why we're using it and we also went through all

1308
02:19:48,000 --> 02:19:50,000
the files that it autogenerated for us to make the setup easier now in the next chapter we'll focus on creating your own

1309
02:19:55,000 --> 02:19:57,000
sanity schemas so we can structure the types of the documents in our database let's do that Sanity Schema

1310
02:20:02,000 --> 02:20:04,000
next now that you know everything about sanity how to set it up and which files it generates let's use it to create our

1311
02:20:09,000 --> 02:20:11,000
own database structure whenever you're starting to work on any backend or any kind of database structure specifically

1312
02:20:17,000 --> 02:20:19,000
first think about what do you need in our example we need to store startups

1313
02:20:22,000 --> 02:20:24,000
submitted by a user of course that includes the user information that submitted those startups in the first

1314
02:20:29,000 --> 02:20:31,000
place and then we need to group those startups into some kind of playlists so we can show them as editor pics or

1315
02:20:36,000 --> 02:20:38,000
startup of the month day honors and so on so in simple words this is how a

1316
02:20:41,000 --> 02:20:43,000
database structure will look like we'll have a startup and each startup will have a title a slug which is kind of a

1317
02:20:49,000 --> 02:20:51,000
unique name or ident identifier for that startup the author that created it so let's quickly talk about that the author

1318
02:20:56,000 --> 02:20:58,000
will be authenticated through GitHub so we'll automatically get its ID name username email image and bio each

1319
02:21:04,000 --> 02:21:06,000
startup also has to have views descriptions category image and then the pitch itself which is going to be in

1320
02:21:10,000 --> 02:21:12,000
markdown format and once we have the actual startup then we can have

1321
02:21:16,000 --> 02:21:18,000
different playlists in which we can categorize those startups and then retri them I'll either put the link to this

1322
02:21:22,000 --> 02:21:24,000
entire flow somewhere in the GitHub readme of this project or images pointing to these different documents

1323
02:21:28,000 --> 02:21:30,000
either way creating these additional documents that would further explain the application to you is something new that

1324
02:21:34,000 --> 02:21:36,000
I'm trying out so if you like that please let me know down in the comments but with that said let's explore this

1325
02:21:40,000 --> 02:21:42,000
second graph that in even more detail explains how the app will work this is our app which will then hook up to next

1326
02:21:48,000 --> 02:21:50,000
a to authenticate our users and create a session if a session does not exist

1327
02:21:53,000 --> 02:21:55,000
we'll head over to GitHub ooth authenticate the user get the user information and then create the session

1328
02:22:00,000 --> 02:22:02,000
for that user if a user exists then we'll make a call to sanity to find that

1329
02:22:06,000 --> 02:22:08,000
user as an author if that user is not an author yet if they don't exist we'll

1330
02:22:11,000 --> 02:22:13,000
create a new author but if the author exists then we'll return that author and

1331
02:22:16,000 --> 02:22:18,000
then they'll be able to create different startups I hope this makes sense so let's get started by doing exactly that

1332
02:22:22,000 --> 02:22:24,000
let's create a schema for our author I'll head back over to Sandy schema

1333
02:22:28,000 --> 02:22:30,000
types and I'll create a new file right here which is going to be called author.

1334
02:22:34,000 --> 02:22:36,000
TS pretty straight forward right you will Define the author here as you would

1335
02:22:40,000 --> 02:22:42,000
in let's say you say export const author is equal to Define type and this

1336
02:22:48,000 --> 02:22:50,000
is coming from sanity and then you pass in an object with a schema definition where you can pass the

1337
02:22:54,000 --> 02:22:56,000
name equal to author you can pass the title which is going to be the capitalized version of that then you can

1338
02:23:01,000 --> 02:23:03,000
pass the type of this which will be a document finally you can use an icon for this document which is going to be a

1339
02:23:08,000 --> 02:23:10,000
user icon and we'll import this from sanity icons and then you define the fields that each author will have which

1340
02:23:15,000 --> 02:23:17,000
is going to be an array of fields where each field will be a defin field

1341
02:23:21,000 --> 02:23:23,000
call inside of which you pass a schema field definition such as name of the

1342
02:23:27,000 --> 02:23:29,000
field is going to be an ID and then the type of the ID will be number and we can

1343
02:23:33,000 --> 02:23:35,000
now duplicate this a few times to create all of the other necessary Fields so let me do just that 1 2 3 4 5 I think that

1344
02:23:42,000 --> 02:23:44,000
should be enough the second field will be name each author has to have a name of a type string then we'll have a

1345
02:23:49,000 --> 02:23:51,000
username as as well which will'll pick from GitHub that'll be of a type string

1346
02:23:55,000 --> 02:23:57,000
we also need an email of a type string we're going to have an image which is going to be their Avatar image of a type

1347
02:24:02,000 --> 02:24:04,000
URL and finally we'll have their bio which is going to be of a type text we

1348
02:24:07,000 --> 02:24:09,000
get all of this from GitHub ooth finally we can go outside of this array of fields and say

1349
02:24:13,000 --> 02:24:15,000
preview Select Title name so this allow us to select

1350
02:24:20,000 --> 02:24:22,000
those authors by name and preview them great believe it or not this is our

1351
02:24:26,000 --> 02:24:28,000
author type we're already exporting it so the only thing we have to do now is to use it we can first use it within the

1352
02:24:33,000 --> 02:24:35,000
index DS within the schema types and here we can use it by simply saying author within this array and then

1353
02:24:40,000 --> 02:24:42,000
importing it from the schema types author next we need to structure this schema in structure. DS so let's head

1354
02:24:47,000 --> 02:24:49,000
over to structure. DS and here we can list different things that sanity provides so as that list we list them by

1355
02:24:55,000 --> 02:24:57,000
content and then we can Define the items here instead of just having one items

1356
02:25:01,000 --> 02:25:03,000
and then a single s document type list item I'll copy this part right here and

1357
02:25:07,000 --> 02:25:09,000
open up an array of items where the first one will be a document type list

1358
02:25:13,000 --> 02:25:15,000
items of a name author with a title of authors and it looks like have an extra

1359
02:25:19,000 --> 02:25:21,000
s right here it's list item and there we go now we're good while we're added why don't we go ahead

1360
02:25:25,000 --> 02:25:27,000
and create a startup schema as well you now already know how to do that you can go to schema types and create a new type

1361
02:25:33,000 --> 02:25:35,000
startup. TS to quickly get us going we can copy everything over from the author

1362
02:25:39,000 --> 02:25:41,000
paste it in the startup in this case we won't be needing the icon so we can delete it and we can modify the name of

1363
02:25:45,000 --> 02:25:47,000
this type such as startup capital S for startup in the

1364
02:25:50,000 --> 02:25:52,000
title also of a type document and now we can Define all the fields in this case

1365
02:25:56,000 --> 02:25:58,000
we don't need the ID because we'll have the slug so let's say slug type Slug and

1366
02:26:02,000 --> 02:26:04,000
check this out we can provide options and say source of this slug will come from title so it will actually be

1367
02:26:09,000 --> 02:26:11,000
autogenerated for us by sanity based on the title for example if a title is this

1368
02:26:15,000 --> 02:26:17,000
is a great post or a great startup it'll simply generate something like

1369
02:26:21,000 --> 02:26:23,000
this is a great startup or if necessary it'll also provide some additional

1370
02:26:27,000 --> 02:26:29,000
unique identifier info to make sure that it's not the same as any other slug or title next we can have a title which is

1371
02:26:34,000 --> 02:26:36,000
going to be of a type string and let's actually put the title above right

1372
02:26:39,000 --> 02:26:41,000
here next instead of the username we can have the author and this author will

1373
02:26:45,000 --> 02:26:47,000
actually be of a type reference and then we have to give it an additional property of two so reference to what and

1374
02:26:53,000 --> 02:26:55,000
it'll be a reference to a type of author next we can Define the number of views

1375
02:26:59,000 --> 02:27:01,000
that each startup has and it'll be of a type number we can define a description

1376
02:27:04,000 --> 02:27:06,000
for each startup which will be of a type text next we'll have to define the category of each startup it'll be of a

1377
02:27:11,000 --> 02:27:13,000
type string for now there's definitely a more fitting type for this category such as an enam or just providing couple of

1378
02:27:17,000 --> 02:27:19,000
options that they can pre-select from but in this case I'll just keep it a regular open string for the sake of

1379
02:27:23,000 --> 02:27:25,000
Simplicity and I'll also show you how to add additional validation on it you can

1380
02:27:28,000 --> 02:27:30,000
open up a new Arrow function here get the rule through params and then Define

1381
02:27:33,000 --> 02:27:35,000
the rule by saying rule. Min it's going to be minimum one it's going to be Max

1382
02:27:40,000 --> 02:27:42,000
20 characters it's going to be required and if we don't pass it we'll say

1383
02:27:45,000 --> 02:27:47,000
something like please enter a category let's also create two additional feed so

1384
02:27:50,000 --> 02:27:52,000
I'll copy this description one and paste it below this one will have a name of image and type of URL of course you

1385
02:27:58,000 --> 02:28:00,000
could use sanity to store images here in this case I just opted for pasting the URL of an already uploaded image just

1386
02:28:06,000 --> 02:28:08,000
for the sake of Simplicity but after this video is done this is definitely one of the many optimizations that you

1387
02:28:11,000 --> 02:28:13,000
can make and we can also add a validation for this one by defining a rule and saying that this image is

1388
02:28:19,000 --> 02:28:21,000
required finally we can duplicate theine type one more time and we can call this

1389
02:28:24,000 --> 02:28:26,000
pitch which will be of a type markdown great our second schema is done we can

1390
02:28:30,000 --> 02:28:32,000
just change the variable name to Startup and then go back to index.ts and add it

1391
02:28:36,000 --> 02:28:38,000
right here next to author we can also go to the structure we can create a second

1392
02:28:41,000 --> 02:28:43,000
part of this array I'll actually make sure to duplicate it here and instead of authors this time we can say startup

1393
02:28:50,000 --> 02:28:52,000
and startups now let's go back to the startup for a second and in this case we

1394
02:28:55,000 --> 02:28:57,000
won't need this preview by name so we can remove that and keep in mind that the last field is of a type markdown

1395
02:29:03,000 --> 02:29:05,000
markdown field is a custom field which uses the official markdown plugin by sanity so let's go ahead and install it

1396
02:29:10,000 --> 02:29:12,000
by running mpm install sanity Das plugin Das

1397
02:29:15,000 --> 02:29:17,000
markdown this is also a pretty good lesson so I can show you how we can add additional plugins

1398
02:29:21,000 --> 02:29:23,000
and once it gets installed you'll have to go to sanity doc config.sys

1399
02:29:50,000 --> 02:29:52,000
array also for this to work we have to go back to one of the first files we worked on and that is app layout. TSX

1400
02:29:58,000 --> 02:30:00,000
where we have to add all of the general configuration in this case the marked and plug-in also requires additional CSS

1401
02:30:06,000 --> 02:30:08,000
so right here we can say import easy mde

1402
02:30:11,000 --> 02:30:13,000
slist SL md. min. CSS this will make sure that our

1403
02:30:18,000 --> 02:30:20,000
editor looks great now if you go back to your sanity Studio which is just localhost 3000 for/ Studio you should no

1404
02:30:26,000 --> 02:30:28,000
longer see an empty slate rather we should be able to create a few startups

1405
02:30:31,000 --> 02:30:33,000
directly from the dashboard let's first create one mock author by creating a new

1406
02:30:37,000 --> 02:30:39,000
author document for now we're still mocking all of this data but very soon we'll connect two santies database from

1407
02:30:45,000 --> 02:30:47,000
our application using their API for now I'll say one the name can be

1408
02:30:51,000 --> 02:30:53,000
Adrian username can be something like JS Mastery any email we'll do right now so

1409
02:30:58,000 --> 02:31:00,000
let's say contact JS mastery. proo I'll head over to Google and just copy the

1410
02:31:03,000 --> 02:31:05,000
image address of the JavaScript Mastery logo you can take out any other image address based it here and for the bio

1411
02:31:10,000 --> 02:31:12,000
I'll say nextjs Enthusiast and I'll publish the author great you can now see

1412
02:31:16,000 --> 02:31:18,000
one author in the author's array let's also go to startups and let's create a

1413
02:31:21,000 --> 02:31:23,000
new startup I'll actually go to the finished version of the application which you can find linked below and then

1414
02:31:27,000 --> 02:31:29,000
I'll copy some of the properties light here such as the title we can also get

1415
02:31:32,000 --> 02:31:34,000
the description right here the slug can be autogenerated based on the title pretty cool check this out author is the

1416
02:31:39,000 --> 02:31:41,000
reference to all existing authors so I can set it to Adrien the number of views can be set to one or zero by default we

1417
02:31:47,000 --> 02:31:49,000
have to add a category in this case the C category can be set to something like education and we have to add the image

1418
02:31:54,000 --> 02:31:56,000
so I will simply copy the image address that I already have here and finally you can write the entire pitch details using

1419
02:32:01,000 --> 02:32:03,000
markdown so I can say something like this is great all of you should vote for

1420
02:32:09,000 --> 02:32:11,000
my startup and of course you get all the benefit of including code blocks images

1421
02:32:14,000 --> 02:32:16,000
and more right here through the typical markdown editor that you're used to you can also see the Finish version right

1422
02:32:20,000 --> 02:32:22,000
here great with that said I'll go ahead and click publish it was published I got to say everything is behaving super

1423
02:32:26,000 --> 02:32:28,000
smoothly right here and now that we have one author and one startup the question is how can we now see them within our

1424
02:32:33,000 --> 02:32:35,000
application so in the next chapter I'll teach you how we can go from having this one fake card to fetching the real card

1425
02:32:41,000 --> 02:32:43,000
generated by a user from sanity studio and then later on in the course we'll of

1426
02:32:46,000 --> 02:32:48,000
course create our own create page so that our users can create new startups

1427
02:32:52,000 --> 02:32:54,000
without necessarily going to sanity Studio rather they're going to be able to do it straight from the app great now

1428
02:32:59,000 --> 02:33:01,000
let's learn how we can fetch real data from the database in order to fetch data from Fetching Data and Type Safety

1429
02:33:05,000 --> 02:33:07,000
sanity we'll have to use something known as Gro queries Gro is sanity's open

1430
02:33:11,000 --> 02:33:13,000
source querying language which is powerful and intuitive so it's easy enough to learn you can describe exactly

1431
02:33:18,000 --> 02:33:20,000
what information your a needs join information from different sets of documents stitch them together and

1432
02:33:24,000 --> 02:33:26,000
basically do whatever you want you can go through a tutorial reading about how it works but I'll teach you all of that

1433
02:33:30,000 --> 02:33:32,000
in this video and even better than learning we can visualize and see exactly how this works in real time so

1434
02:33:37,000 --> 02:33:39,000
let's head over to for/ studio and then open the vision tab here you can write

1435
02:33:42,000 --> 02:33:44,000
the query and the params and see the results in real time check this out as the query I'll just enter an Ask risk

1436
02:33:48,000 --> 02:33:50,000
meaning give me everything related to sanity project from members to Grants

1437
02:33:54,000 --> 02:33:56,000
startups authors everything here you can see that the first property is our user

1438
02:33:59,000 --> 02:34:01,000
JS Mastery nextjs Enthusiast then if we go a bit down we should be able to see

1439
02:34:04,000 --> 02:34:06,000
our post as well now if you do something like asterisk and then zero inside of

1440
02:34:10,000 --> 02:34:12,000
square brackets you can just get the first property pretty straightforward right but what if you want to get all

1441
02:34:16,000 --> 02:34:18,000
startups well you would say give me everything where the underscore type property is

1442
02:34:23,000 --> 02:34:25,000
equal to Startup it's very similar to just writing PL all JavaScript and there

1443
02:34:28,000 --> 02:34:30,000
we go we get one property where we have all the information about that startup what's pretty cool is that it doesn't

1444
02:34:35,000 --> 02:34:37,000
return the author information rather it provides a reference to the author document but now how would we get only

1445
02:34:41,000 --> 02:34:43,000
the information that we need we don't necessarily need the updated ad property

1446
02:34:47,000 --> 02:34:49,000
the Rev and so on so how can we be a bit more specific about what do we return from a document well we can say give me

1447
02:34:55,000 --> 02:34:57,000
everything where type is equal to Startup and we can say defined slug doc

1448
02:35:02,000 --> 02:35:04,000
current which means it's not null this will go within the square bracket so we can just clean it here and put it right

1449
02:35:09,000 --> 02:35:11,000
here at the end I'll expand this a bit and then we can open up a new curly brace and within it say exactly what we

1450
02:35:15,000 --> 02:35:17,000
want to get back such as the ID title slot

1451
02:35:20,000 --> 02:35:22,000
undor created at we can also get the author let's also get views maybe the

1452
02:35:28,000 --> 02:35:30,000
description the category and the image and let's run fetch there we go so now

1453
02:35:34,000 --> 02:35:36,000
we get back only the information that we actually need but how do we also get additional information about the author

1454
02:35:40,000 --> 02:35:42,000
of that post in this same query well take a look at this I'll first space this all out so it's easier to see there

1455
02:35:48,000 --> 02:35:50,000
we go and now you can add an arrow pointing from the author and then you

1456
02:35:53,000 --> 02:35:55,000
can open up a new pair of curly braces there you can Define what do you want to get from the author such as the ID name

1457
02:36:01,000 --> 02:36:03,000
slug image and bio if I now run the fetch you'll see that the author will no

1458
02:36:07,000 --> 02:36:09,000
longer be just a reference rather we'll get all of the information about it I

1459
02:36:12,000 --> 02:36:14,000
don't think we have a slug for the author so we can just leave it like this great now of course we won't be making

1460
02:36:19,000 --> 02:36:21,000
calls that directly from sanity Vision right here rather I want to copy this query go back to our code specifically

1461
02:36:26,000 --> 02:36:28,000
to sanity lib and create a new file called queries.

1462
02:36:33,000 --> 02:36:35,000
TS here we can say export const startups query is equal to you can say

1463
02:36:40,000 --> 02:36:42,000
Define query which is coming from next sanity and then as a template string you

1464
02:36:46,000 --> 02:36:48,000
can pass the query right in and this will be the same as what we just wrote In The Vision part of Sanity Studio One

1465
02:36:53,000 --> 02:36:55,000
part that also would be good to add here is after this square bracket we can do some sorting by providing a straight

1466
02:37:00,000 --> 02:37:02,000
line and then saying order is equal toore created at and we'll set it as

1467
02:37:06,000 --> 02:37:08,000
descending which means that the newest one will appear on top that's going to look something like this now how can we

1468
02:37:13,000 --> 02:37:15,000
actually fetch this well let's go back to our home so that's going to be page.

1469
02:37:19,000 --> 02:37:21,000
TS in the root this one right here check how we currently have this fake post

1470
02:37:25,000 --> 02:37:27,000
right here well let's make it real I'll create a new variable const posts is

1471
02:37:31,000 --> 02:37:33,000
equal to await client coming from sanity client so you have to import it right

1472
02:37:36,000 --> 02:37:38,000
here at the top do Fetch and we're going to fetch what the startup squ this one

1473
02:37:43,000 --> 02:37:45,000
right here which we can import from queries now I will comment out the current posts

1474
02:37:50,000 --> 02:37:52,000
and before we go ahead and check them out on the homepage let's first add a conso log that's going to be json.

1475
02:37:58,000 --> 02:38:00,000
stringify posts and to style our output of the

1476
02:38:03,000 --> 02:38:05,000
console log a bit better we can say null and two this will just create some additional spacing so now if you go to

1477
02:38:10,000 --> 02:38:12,000
the terminal and open up a new Local Host window you'll see that we get an array of all the posts currently being

1478
02:38:17,000 --> 02:38:19,000
just a single post with all the information that we have about it and if you go back to Local Host 3000 check

1479
02:38:23,000 --> 02:38:25,000
this out the card with the real data just appeared and we can see it right here isn't that great that's pretty

1480
02:38:30,000 --> 02:38:32,000
simple right if you want to hand this app over to your clients that can use sanity Studio to add new posts in a nice

1481
02:38:37,000 --> 02:38:39,000
looking UI well you're good to go you can call it a day but soon enough we'll

1482
02:38:42,000 --> 02:38:44,000
also Implement our own create page so that other users can create additional startups directly from YC directory now

1483
02:38:49,000 --> 02:38:51,000
now we can remove this fake Post in the conso log because we have the new posts coming directly from sanity into our app

1484
02:38:56,000 --> 02:38:58,000
but remember that we don't yet have a startup card type it's going to be necessary for our startup card because

1485
02:39:03,000 --> 02:39:05,000
we're using typescript we need to be able to know exactly which properties does each startup have and typically

1486
02:39:10,000 --> 02:39:12,000
that's tedious work because you have to know the type of each one of these things you have to be precise in

1487
02:39:15,000 --> 02:39:17,000
defining it you have to know whether it's optional or not but instead of defining types manually sanity's new

1488
02:39:22,000 --> 02:39:24,000
tool generates types automatically it generates types both for sanity Studio

1489
02:39:28,000 --> 02:39:30,000
schema types and grock querying results to leverage that tool we need to add

1490
02:39:33,000 --> 02:39:35,000
sanity type gen there's a great documentation page with a video from sanity that teaches you how to generate

1491
02:39:40,000 --> 02:39:42,000
tab script types you can go through it but in this case you also have me so I'll explain it to you right here and

1492
02:39:46,000 --> 02:39:48,000
right now first things first is we have to extract the schemas we have already created you know I'm talking about this

1493
02:39:53,000 --> 02:39:55,000
ones here startup and author to extract those schemas we need to run an

1494
02:39:58,000 --> 02:40:00,000
additional command so let me expand this and let's run MPX sanity add latest

1495
02:40:06,000 --> 02:40:08,000
schema extract D- path equal

1496
02:40:12,000 --> 02:40:14,000
do/ sanity extract. Json and press enter

1497
02:40:18,000 --> 02:40:20,000
as you can see it's extracting schema and they have extracted it to extract. Json next we have to create a new file

1498
02:40:25,000 --> 02:40:27,000
in the root of our application called sanity dtype gen. Json and in here we

1499
02:40:30,000 --> 02:40:32,000
can add one configuration object I'll actually copy this object over from sanity learn and I'll make sure to

1500
02:40:37,000 --> 02:40:39,000
include this in the read me so you can copy this part as well this configuration will scan the application

1501
02:40:43,000 --> 02:40:45,000
for all Gro queries to create types additionally it'll also use the extract.

1502
02:40:48,000 --> 02:40:50,000
Json from the previous command we ran and it'll write a new types. TS file

1503
02:40:54,000 --> 02:40:56,000
with our other utilities and this generates command will create a new types. TS file I just noticed that in

1504
02:41:00,000 --> 02:41:02,000
here they were using the source folder which we're not using so we can remove that Source maybe it's already removed

1505
02:41:06,000 --> 02:41:08,000
for you if it's not just remove it and then run the command MPX sanity ad

1506
02:41:12,000 --> 02:41:14,000
latest type gen generate and press enter this just generated the typescript types

1507
02:41:18,000 --> 02:41:20,000
for 14 schema types and zero grw queries for now but later on as we add

1508
02:41:24,000 --> 02:41:26,000
additional queries and schemas we'll have to rerun this Command right well unless we automate it within our packet

1509
02:41:31,000 --> 02:41:33,000
Json so let's head over to Packa Json go under scripts and add a few new scripts

1510
02:41:37,000 --> 02:41:39,000
we can get those scripts right here from the learn but as I said I'll also provide this over to you in the read me

1511
02:41:44,000 --> 02:41:46,000
down below and paste those scripts once again I'll also remove the SRC from here

1512
02:41:49,000 --> 02:41:51,000
as we're not using that folder so it be just do/ sanity now you can just run mpm

1513
02:41:55,000 --> 02:41:57,000
run type gen so whenever we need to get new types you can just run this command and be good to go finally let's define

1514
02:42:02,000 --> 02:42:04,000
the type for the startup card to do that we can go to our startup card and create

1515
02:42:08,000 --> 02:42:10,000
a new type we can also export it export type startup type card which is equal to

1516
02:42:17,000 --> 02:42:19,000
we can use the omit property here for typescript which constructs a type without the properties of T which is the

1517
02:42:23,000 --> 02:42:25,000
first parameter we pass except for those in type K so what does this mean we'll want to use the startup type right here

1518
02:42:32,000 --> 02:42:34,000
from types. DS without the property of author for now and then we can say

1519
02:42:39,000 --> 02:42:41,000
and author is going to be optional and it'll be of a type author which we also

1520
02:42:45,000 --> 02:42:47,000
have to import from types you can also check those author and startup types

1521
02:42:51,000 --> 02:42:53,000
because they're all generated for you in the types. TS file pretty cool right no need to do this manually also I believe

1522
02:42:58,000 --> 02:43:00,000
we're using this in the home there we go startup card type so we can just import

1523
02:43:04,000 --> 02:43:06,000
it because we have exported it from the other file so we can just do this so we

1524
02:43:09,000 --> 02:43:11,000
can just import it right here by saying import startup type card from components

1525
02:43:17,000 --> 02:43:19,000
startup card oh looks like we we already have an import from the startup card so I can just add it right here by saying

1526
02:43:23,000 --> 02:43:25,000
comma and then get this as well and now if we Define this type we can say post

1527
02:43:28,000 --> 02:43:30,000
is of a type startup type card there we go you'll notice now that our typescript

1528
02:43:34,000 --> 02:43:36,000
is complaining just the tiny bit saying that property ID does not exist on type

1529
02:43:39,000 --> 02:43:41,000
author well let's check it out if I go to author we can see that ID is here as

1530
02:43:45,000 --> 02:43:47,000
a string but ID is optional so so instead of destructuring these

1531
02:43:50,000 --> 02:43:52,000
properties automatically what we can do is just destructure the author and then

1532
02:43:56,000 --> 02:43:58,000
here instead of author ID I think we're calling that in two places yep author ID

1533
02:44:02,000 --> 02:44:04,000
we can say author question mark dot uncore ID now we're good and here we can

1534
02:44:07,000 --> 02:44:09,000
use the author question mark. name to ensure that it will be there before we

1535
02:44:13,000 --> 02:44:15,000
call it finally it's complaining a bit about the category saying that category is possibly undefined so I will add a

1536
02:44:20,000 --> 02:44:22,000
question mark right here so it doesn't break her app if we don't have it great now you know how to fetch new posts from

1537
02:44:26,000 --> 02:44:28,000
the database through sanity's grck open- Source querying Language by first visualizing your queries in sanity

1538
02:44:33,000 --> 02:44:35,000
Studios Vision tab then creating them independently in our code calling them in a single line to see all of those

1539
02:44:40,000 --> 02:44:42,000
startups and even doing automatic type safety using santies type gen great work

1540
02:44:46,000 --> 02:44:48,000
in the next lesson we'll dive a bit deeper her into how next GS caches our data and how we can further optimize it

1541
02:44:53,000 --> 02:44:55,000
depending on the type of our application I'll show you specifically what's the best use case for the type of the

1542
02:44:59,000 --> 02:45:01,000
application where you want to get new posts shown immediately so let's do that Cache and Live API w/ Next.js

1543
02:45:05,000 --> 02:45:07,000
next do you remember when we were setting up sanity client and we set this use CDN to true well this means that

1544
02:45:13,000 --> 02:45:15,000
sanity will cash content for 60 seconds and then revalidate the content after every 60 seconds

1545
02:45:19,000 --> 02:45:21,000
this is ISR incremental static regeneration this diagram shows how next

1546
02:45:25,000 --> 02:45:27,000
GS cache is done but it works similarly for sanity first of all we make an uncashed request we try to fetch

1547
02:45:32,000 --> 02:45:34,000
something setting the revalidation for 60 seconds it first looks into the cache to see if it can find the existing data

1548
02:45:39,000 --> 02:45:41,000
but if it misses then it has to go to the actual data source to get the data and then it sets it to the cache if less

1549
02:45:47,000 --> 02:45:49,000
than 60 seconds have passed after the set then making the same request to this URL will result in a cached request

1550
02:45:54,000 --> 02:45:56,000
which means that we will not try to fetch the new data from The Source rather we'll just go to our cash data

1551
02:46:01,000 --> 02:46:03,000
and return it but if more than 60 seconds have passed then this data will have become stale we'll revalidate go

1552
02:46:08,000 --> 02:46:10,000
back to the data source set this new data source to cache and then bring us back the data but let me show you how

1553
02:46:15,000 --> 02:46:17,000
this works in action I'll split my window in two on the left side we have our existing Local Host 3000 application

1554
02:46:22,000 --> 02:46:24,000
and on the right we have sanity studio now what would happen if we tried to create a new startup let's say by maybe

1555
02:46:28,000 --> 02:46:30,000
copying this document and then creating a new one where we can paste everything we just copied and of course we have to

1556
02:46:34,000 --> 02:46:36,000
change this lug to so I'll add one to it and I'll click publish now if you go

1557
02:46:39,000 --> 02:46:41,000
back and reload it will not appear not live and not even after many many reloads as you

1558
02:46:46,000 --> 02:46:48,000
can see why is that happening well because it's cached and if you refer to this

1559
02:46:54,000 --> 02:46:56,000
diagram we made a request to fetch the first post or all the posts at that time

1560
02:47:00,000 --> 02:47:02,000
but when we did that fetch we got the data containing only one post because the second one hadn't yet been created

1561
02:47:07,000 --> 02:47:09,000
but then even after we have created the second post we still try to refetch the data within 60 seconds which means that

1562
02:47:14,000 --> 02:47:16,000
it will not go to the new data it'll go to the cache to get it immediately so

1563
02:47:20,000 --> 02:47:22,000
only if we reload the page after 60 seconds the post will have appeared now to always get new data live and in real

1564
02:47:27,000 --> 02:47:29,000
time we'll have to go back to code and set to false to always get the new data so why is it even set to True by default

1565
02:47:34,000 --> 02:47:36,000
well because when you're fetching from cash and in most cases that'll be good enough whenever you don't need real-time

1566
02:47:41,000 --> 02:47:43,000
data such as for Block post or you could even argue that for our existing application you don't need to see the

1567
02:47:47,000 --> 02:47:49,000
new submitted startups every minute right so it's much faster to get the data from a CDN or from

1568
02:47:54,000 --> 02:47:56,000
Cache but for the purposes of this video and to show you the latest and greatest of new nextjs and even sanity features

1569
02:48:02,000 --> 02:48:04,000
we'll set it to false this way we'll get the latest data on refresh immediately but even that is not enough why get it

1570
02:48:09,000 --> 02:48:11,000
on refresh when we can get it immediately without needing to refresh the page for that we'll use sanity's

1571
02:48:16,000 --> 02:48:18,000
live content API allowing you to deliver deliver live Dynamic experiences to your users without the complexity and

1572
02:48:22,000 --> 02:48:24,000
scalability of the challenges that typically come with building realtime functionality to implement it within our

1573
02:48:29,000 --> 02:48:31,000
application we can first clear our terminal run mpmi server only this is a

1574
02:48:35,000 --> 02:48:37,000
package that will help us ensure that a specific module can only be used in server components next we can create a

1575
02:48:41,000 --> 02:48:43,000
new utility file within sanity lib and we can call it live. TS

1576
02:48:49,000 --> 02:48:51,000
within here we can import the server only package that we just installed and

1577
02:48:55,000 --> 02:48:57,000
we can also import Define live coming from next

1578
02:49:02,000 --> 02:49:04,000
sanity as well as import the client which is going to come from at

1579
02:49:08,000 --> 02:49:10,000
sanity SL SL client and then we can export const sanity fetch as well as

1580
02:49:17,000 --> 02:49:19,000
sanity live by making it equal to Define live to which we pass an object

1581
02:49:24,000 --> 02:49:26,000
containing the client we also have to quickly go to env. loal and change the

1582
02:49:31,000 --> 02:49:33,000
sanity version to say next public sanity API version and in this case I'll set it

1583
02:49:39,000 --> 02:49:41,000
to VX as we're using the latest features if what you have to type in here changes

1584
02:49:44,000 --> 02:49:46,000
I'll let you know somewhere below this video now we can go back to the homepage which is the page in the root folder and

1585
02:49:51,000 --> 02:49:53,000
we'll just have to make one change to our sanity fetch instead of saying const posts is equal to client fetch now we'll

1586
02:50:00,000 --> 02:50:02,000
change the bit by saying const data which we can rename to posts

1587
02:50:05,000 --> 02:50:07,000
is equal to await sanity fetch coming from sanity lib live to

1588
02:50:12,000 --> 02:50:14,000
which we can pass the options and then the query equal to the startup query no longer do we need the old fetch

1589
02:50:19,000 --> 02:50:21,000
we can just use the new fetch this will ensure to revalidate this page whenever

1590
02:50:24,000 --> 02:50:26,000
new changes are made and with that everything is set we can remove this unused client

1591
02:50:31,000 --> 02:50:33,000
import and we can go back to live for just a second to see if we have specified the import properly oh I think

1592
02:50:37,000 --> 02:50:39,000
I'm missing a forward slash right here there we go that's better but you can see that we're still not using this

1593
02:50:43,000 --> 02:50:45,000
sanity live variable so let's go back to the page scroll all the the way down and

1594
02:50:49,000 --> 02:50:51,000
below the section let's just call a self-closing sanity live component we

1595
02:50:56,000 --> 02:50:58,000
can import it directly from sanity lib live that's going to look something like

1596
02:51:02,000 --> 02:51:04,000
this we can save it and we are ready to test it out of course the only way to truly test it out is to create a new

1597
02:51:09,000 --> 02:51:11,000
startup and see whether it'll show up instantly now sure we could have first created the create startup page and then

1598
02:51:15,000 --> 02:51:17,000
you will be able to see the live changes but I just couldn't wait to to show this to you so one more time I'll split the

1599
02:51:21,000 --> 02:51:23,000
screen with sanity studio and we'll create a new startup through there I'll go to startups and I will copy all of

1600
02:51:29,000 --> 02:51:31,000
the information about this document just to make the creation of the new one a bit easier I'll paste it and I'll rename

1601
02:51:36,000 --> 02:51:38,000
it to something like new document and regenerate the slug now the moment I

1602
02:51:42,000 --> 02:51:44,000
press publish we should be able to see it on the left side let's check it out

1603
02:51:47,000 --> 02:51:49,000
publishing published and there it is it appeared at the top how cool is that

1604
02:51:53,000 --> 02:51:55,000
well it was pretty simple to implement using sanity and it just works like it allows you to play with different nygs

1605
02:52:01,000 --> 02:52:03,000
rendering strategies giving you the full flexibility of how and where you want to

1606
02:52:06,000 --> 02:52:08,000
show your data now you can add new data immediately on the homepage without your users needing to reload to see the new

1607
02:52:13,000 --> 02:52:15,000
info and this was actually a pretty cool way to see exactly how nextjs do do

1608
02:52:18,000 --> 02:52:20,000
caching or incremental static regeneration and so on hopefully this diagram and this practical segment of

1609
02:52:25,000 --> 02:52:27,000
this video where we played a bit with trying to fetch data from the cache first and then making it real time made

1610
02:52:31,000 --> 02:52:33,000
you better understand different data fetching strategies in Real-time Search w/ URL Query Params

1611
02:52:37,000 --> 02:52:39,000
nextjs now that we have some posts in the homepage it is only natural to implement the search as well if I go

1612
02:52:45,000 --> 02:52:47,000
ahead and search for Adrien or even just JSM right here you'll notice that right now it's not

1613
02:52:51,000 --> 02:52:53,000
really working it's saying search results for JSM but it's showing us this one even though it doesn't contain JSM

1614
02:52:57,000 --> 02:52:59,000
in the title so let's make the search work as you can notice when you type something in it actually modifies the

1615
02:53:04,000 --> 02:53:06,000
query in the URL so first we need to retrieve that query within our application and then further filter the

1616
02:53:11,000 --> 02:53:13,000
fetch that we're trying to make we can do that at the top of the page. TSX

1617
02:53:16,000 --> 02:53:18,000
using the search Rams we have already extracted the query right here so what

1618
02:53:22,000 --> 02:53:24,000
we can do now is make more sense of it by creating a new variable called params

1619
02:53:28,000 --> 02:53:30,000
which is equal to an object that says search is equal to query or null if it

1620
02:53:34,000 --> 02:53:36,000
doesn't exist and now we can pass those prams as the second key and value pair

1621
02:53:40,000 --> 02:53:42,000
to our options object into sanity fetch so let's go into the startups query and

1622
02:53:46,000 --> 02:53:48,000
modify the query in a way that if there is is a search it'll return the matching search otherwise it should return all

1623
02:53:53,000 --> 02:53:55,000
results in a descending order so I'll add an additional and sign right here

1624
02:53:58,000 --> 02:54:00,000
and we'll check if there is no defined dollar sign search we are referring to the search parameter right here if it's

1625
02:54:06,000 --> 02:54:08,000
undefined or if category match the search so we're not only going to Surge

1626
02:54:13,000 --> 02:54:15,000
by title but rather we're going to Surge by category to or if author

1627
02:54:19,000 --> 02:54:21,000
name matches the search as well sometimes some people might want to search by the author name so essentially

1628
02:54:26,000 --> 02:54:28,000
what this part is doing here is checking whether a search exists or if search matches the category or if search

1629
02:54:32,000 --> 02:54:34,000
matches the author name and of course I miss the most important part which is or

1630
02:54:38,000 --> 02:54:40,000
title match search we're going to search by the startup title so this will simply

1631
02:54:45,000 --> 02:54:47,000
filter the documents where the title category or Au name matches the search

1632
02:54:50,000 --> 02:54:52,000
string using the match operator now if we save this go back and you can see we

1633
02:54:55,000 --> 02:54:57,000
didn't even have to reload search results for JSM actually show us the two matching JSM results whereas the new

1634
02:55:02,000 --> 02:55:04,000
document is not included if I search for Adrien who is the author of all three

1635
02:55:08,000 --> 02:55:10,000
documents we still get all three and if I search for new I think you can assume

1636
02:55:13,000 --> 02:55:15,000
what's going to happen we only get one new document how simple was that

1637
02:55:18,000 --> 02:55:20,000
everything works so seamlessly and super fast and don't forget that we also have

1638
02:55:23,000 --> 02:55:25,000
this clear button which will clear the search term now another cool feature we can do

1639
02:55:29,000 --> 02:55:31,000
is also filter by category so if I click on a specific category right here it'll

1640
02:55:35,000 --> 02:55:37,000
automatically set the query and the search term to that category if I quickly head over to studio and change

1641
02:55:42,000 --> 02:55:44,000
one of these documents categories to something like travel

1642
02:55:49,000 --> 02:55:51,000
and click publish back here immediately it's no longer showing for travel but

1643
02:55:55,000 --> 02:55:57,000
you can see that it changed and I can only filter by travel as well everything works so seamlessly now that that is

1644
02:56:03,000 --> 02:56:05,000
done just before we go ahead and create the form through which we can create startups from within the application I

1645
02:56:10,000 --> 02:56:12,000
want to make sure to see The Details page of each one of these startups that's the page that shows up when you

1646
02:56:15,000 --> 02:56:17,000
click details right here right now it's just a blank 404 so let's turn that 404

1647
02:56:21,000 --> 02:56:23,000
into a beautiful startup Details page just like Understanding Partial Pre-rendering

1648
02:56:28,000 --> 02:56:30,000
this to get started with the details page let's open up our file explorer and

1649
02:56:34,000 --> 02:56:36,000
let's create a new page within app Root I'll create a new folder within the root

1650
02:56:41,000 --> 02:56:43,000
called startup and within startup we'll create another folder this will be a dynamic r

1651
02:56:48,000 --> 02:56:50,000
route so I'll give it a name of square brackets ID and within that folder I'll

1652
02:56:54,000 --> 02:56:56,000
create a new page. TSX now if you're doing this for the

1653
02:56:59,000 --> 02:57:01,000
first time this might seem like a lot of folders but trust me it'll all start

1654
02:57:04,000 --> 02:57:06,000
making sense very very soon the reason why we're doing this is to expose our

1655
02:57:09,000 --> 02:57:11,000
page on the URL slash startup SL2 or

1656
02:57:15,000 --> 02:57:17,000
three or whatever the ID of that startup is so we can show a new Dynamic startup

1657
02:57:21,000 --> 02:57:23,000
Details page for each different startup within this page let's run ource to

1658
02:57:26,000 --> 02:57:28,000
create a quick page and there we go it immediately appears under this URL so

1659
02:57:32,000 --> 02:57:34,000
now if you go back home and if you click on any one of these you can see that it automatically renates you to Startup and

1660
02:57:38,000 --> 02:57:40,000
then the ID of that startup now do you know how we can extract this ID from the URL and get it right here within our

1661
02:57:44,000 --> 02:57:46,000
code well we can get it through pramps so let's d structure the pams and let's also specify the type

1662
02:57:52,000 --> 02:57:54,000
I'll set the pams to be equal to a promise which will return an ID of a

1663
02:57:59,000 --> 02:58:01,000
type string that'll look something like this how do we know it's an ID because we name our folder that way then we can

1664
02:58:07,000 --> 02:58:09,000
say const ID is equal to in parenthesis

1665
02:58:12,000 --> 02:58:14,000
a weight for rams. ID and since we're using a weight we have to turn this into

1666
02:58:17,000 --> 02:58:19,000
an a sync function now we can return an empty react fragment which is going to look something like this and within it

1667
02:58:25,000 --> 02:58:27,000
we can return an H1 that will have a class name of something like text-

1668
02:58:32,000 --> 02:58:34,000
3XL and within it we can say something like this is a startup number and then

1669
02:58:39,000 --> 02:58:41,000
we can dynamically render it ID if you do that and go back you can see this is

1670
02:58:44,000 --> 02:58:46,000
a startup number and then we get the ID but this on its own is not super useful

1671
02:58:50,000 --> 02:58:52,000
we need to be able to take this ID and then fetch all of the details about that startup things like the date created the

1672
02:58:58,000 --> 02:59:00,000
title description the image the author all of that good stuff so how can we do

1673
02:59:04,000 --> 02:59:06,000
that well for a second let's create a new tab and go to localhost 3000 SL

1674
02:59:10,000 --> 02:59:12,000
Studio we can go to vision and we can modify our query a bit to now not fetch

1675
02:59:15,000 --> 02:59:17,000
all the startups but rather to fetch startup deta details the query will look something like this give me everything

1676
02:59:22,000 --> 02:59:24,000
where a type is equal to Startup and uncore ID is equal to dollar sign ID and

1677
02:59:30,000 --> 02:59:32,000
then here's the key part only give me element that matches that query then for

1678
02:59:36,000 --> 02:59:38,000
each one of these elements return the ID title slug created at author with it's

1679
02:59:42,000 --> 02:59:44,000
ID name username image and bio give me the views description C category image

1680
02:59:49,000 --> 02:59:51,000
and there's also the pitch which I think we're missing here we might also be missing it in all in the query for

1681
02:59:55,000 --> 02:59:57,000
fetching all startups now if you run fetch like this it'll say you provide

1682
03:00:01,000 --> 03:00:03,000
the pram ID but you didn't really give me the value for it so sanity Vision

1683
03:00:07,000 --> 03:00:09,000
allows you to pass the params right here so going back to our application we can copy this ID and we can now paste it

1684
03:00:14,000 --> 03:00:16,000
right here within a string so use single quotes right here to turn it into a

1685
03:00:19,000 --> 03:00:21,000
string and run fetch one more time we get null and I think that's because our

1686
03:00:25,000 --> 03:00:27,000
ID got parsed to show nicely in the URL most likely this was a character that

1687
03:00:30,000 --> 03:00:32,000
wasn't easy to parse as a URL so it's getting shown this way that's not a problem we can get a full URL from the

1688
03:00:36,000 --> 03:00:38,000
structure by going into startups and then we can inspect it right here if you do that you'll get the

1689
03:00:44,000 --> 03:00:46,000
entire thing along with its ID so here we have the correct one so if we go back

1690
03:00:49,000 --> 03:00:51,000
to Vision you can now pass the correct ID right here and now we get the complete startup

1691
03:00:56,000 --> 03:00:58,000
details so let's go ahead and copy this query and let's bring it back to our code we'll use it within sanity lib

1692
03:01:05,000 --> 03:01:07,000
queries and right below the startups query I'll create a new one by saying export const startup by ID query is

1693
03:01:14,000 --> 03:01:16,000
equal to Define query where we pass in a template string string and right in there we pass the full query oh and I

1694
03:01:21,000 --> 03:01:23,000
was partially right when I said that we're missing the pitch right here we indeed are missing it it's not like it

1695
03:01:27,000 --> 03:01:29,000
is here but we don't actually need it so this is the beauty of gr quering language in a sense that it allows you

1696
03:01:34,000 --> 03:01:36,000
to get only the data that you need on the homepage where we're showing not startup details but only the most

1697
03:01:40,000 --> 03:01:42,000
important information about the startup we don't necessarily need to show the pitch so we don't fetch it but here for

1698
03:01:47,000 --> 03:01:49,000
the details we definitely do fetch it so now that we are exporting this query we

1699
03:01:52,000 --> 03:01:54,000
can use it on the project Details page but before we do that I want to go over one thing with you we could have also

1700
03:02:00,000 --> 03:02:02,000
used sanity live fetch here but it's not like you're going to be on the details page and wait for the changes to happen

1701
03:02:07,000 --> 03:02:09,000
once you're there you wouldn't expect them to happen live right because you're viewing a specific version of that page

1702
03:02:13,000 --> 03:02:15,000
and I also wanted to show you how you can Implement different rendering strategies on the same page

1703
03:02:18,000 --> 03:02:20,000
and use one of which is the PPR strategy partial pre-rendering enables you to

1704
03:02:24,000 --> 03:02:26,000
combine static and dynamic components together in the same route it's pretty

1705
03:02:30,000 --> 03:02:32,000
crazy and it's completely new during the build nextjs pr- renders as much of the

1706
03:02:35,000 --> 03:02:37,000
route as possible and only if Dynamic code is detected like reading from the

1707
03:02:41,000 --> 03:02:43,000
incoming request you can wrap the relevant component with a react suspense boundary the suspense boundary Falls

1708
03:02:47,000 --> 03:02:49,000
fall back will be included in the pre-rendered HTML so nextjs here shows

1709
03:02:52,000 --> 03:02:54,000
an example of an e-commerce store where we have a Navar which is completely static or revalidated same thing for the

1710
03:02:59,000 --> 03:03:01,000
product information static or revalidated in some kind of a time frame like every 60 minutes seconds or

1711
03:03:06,000 --> 03:03:08,000
whatever it is but in general it's static but the cart and the recommended

1712
03:03:12,000 --> 03:03:14,000
products can be completely Dynamic only that part while the rest can be static

1713
03:03:17,000 --> 03:03:19,000
to to use all the benefits that I mentioned so far like speed efficiency

1714
03:03:22,000 --> 03:03:24,000
better developer experience and also SEO benefits that it offers and I would highly recommend watching this 11-minute

1715
03:03:29,000 --> 03:03:31,000
video by delba where she visually explains partial pre-rendering these are

1716
03:03:34,000 --> 03:03:36,000
some very nice Graphics that allow you to fully understand how this is working but for the time being I'll show you how

1717
03:03:41,000 --> 03:03:43,000
it works in a real example pink dots right here denote artificially delayed

1718
03:03:46,000 --> 03:03:48,000
responses for demo purposes like shipping estimates which you can see right here recommended products and

1719
03:03:53,000 --> 03:03:55,000
reviews these are always going to be dynamic because they have to make a request to some outside Source such as a

1720
03:04:00,000 --> 03:04:02,000
postal service to know when it can get shipped same things for recommended products because some algorithm has to

1721
03:04:06,000 --> 03:04:08,000
be ran to check out your preferences and shopping habits and finally there's the customer reviews which are always going

1722
03:04:12,000 --> 03:04:14,000
to be dynamic so now check this out if I reload see how this loaded immediately

1723
03:04:19,000 --> 03:04:21,000
because the product information doesn't really change that often and you have it right in front of you then this loads in

1724
03:04:26,000 --> 03:04:28,000
200 milliseconds and this one loads in 500 milliseconds pretty crazy stuff

1725
03:04:32,000 --> 03:04:34,000
right you can choose what you want to show dynamically and what will be there immediately for the users cached and

1726
03:04:38,000 --> 03:04:40,000
coming from a CDN next js's PPR really is the latest and greatest of rendering

1727
03:04:44,000 --> 03:04:46,000
strategies out there as it allows you to combine the best of both worlds so now let me teach you how to add it to your

1728
03:04:50,000 --> 03:04:52,000
apps first head over to next config TS and here we'll add an experimental tag

1729
03:04:57,000 --> 03:04:59,000
because it is experimental right now but soon enough it'll become stable and here you can say PPR and set it to

1730
03:05:04,000 --> 03:05:06,000
incremental we can also turn on some additional Dev indicators such as app

1731
03:05:10,000 --> 03:05:12,000
ISR status is set to True build activity is also set to true and build activity

1732
03:05:18,000 --> 03:05:20,000
position is set to bottom right these will help us visualize what is happening with PPR next back in the startup

1733
03:05:24,000 --> 03:05:26,000
Details page we have to export const a new flag called

1734
03:05:29,000 --> 03:05:31,000
experimental PPR is equal to true and now we can use sanity's client API to

1735
03:05:36,000 --> 03:05:38,000
perform incremental static regeneration or ISR to get the startup details we can

1736
03:05:42,000 --> 03:05:44,000
do that by fetching the post based on the provided ID const post is equal to

1737
03:05:48,000 --> 03:05:50,000
await client. fetch we pass in the startup byy

1738
03:05:55,000 --> 03:05:57,000
ID query and we pass in an object where we pass the ID as the first and only

1739
03:06:01,000 --> 03:06:03,000
parameter finally if there is no post we can return a not found this is coming

1740
03:06:08,000 --> 03:06:10,000
directly from next navigation else we can return something else from the post now for example we can render a post.

1741
03:06:16,000 --> 03:06:18,000
tile see how typescript immediately knows that we actually do have a title on the post going back to Local Host and

1742
03:06:23,000 --> 03:06:25,000
clicking on one of these posts opens up a 404 this page could not be found oh

1743
03:06:29,000 --> 03:06:31,000
that's happening because no post was returned so we redirected to a 4 or4 but why is that could it be that our query

1744
03:06:36,000 --> 03:06:38,000
is good but it actually cannot find a post under that ID similarly to what happened when we were trying to query it

1745
03:06:42,000 --> 03:06:44,000
with Insanity Vision let's try to conso log it to see what we're getting back I'll cons log this ID right here save it

1746
03:06:50,000 --> 03:06:52,000
and click on one of these posts right here as you can see we get the full ID

1747
03:06:56,000 --> 03:06:58,000
but at the end we have this percentage sign character even though in the original ID it doesn't seem to be there

1748
03:07:03,000 --> 03:07:05,000
I also opened a second post that we created and would you take a look it ends with different numbers but then it

1749
03:07:11,000 --> 03:07:13,000
has the same percentage 7D appended to it at the end which makes me pretty sure

1750
03:07:17,000 --> 03:07:19,000
that I already know what the problem is can you catch it try to debug it with me when you click on the details of any one

1751
03:07:24,000 --> 03:07:26,000
of these cards it appends an additional character to the ID as you can see right

1752
03:07:30,000 --> 03:07:32,000
here so where's the issue let's try to pinpoint and centralize it is it in the

1753
03:07:36,000 --> 03:07:38,000
details well yes most likely so if we go to the code and if we go to the startup

1754
03:07:42,000 --> 03:07:44,000
card take a look I made a mistake you most likely didn't have this mistake you most likely properly wrote it I hope you

1755
03:07:49,000 --> 03:07:51,000
did but I added an extra curly brace right at the end of this string so if I

1756
03:07:54,000 --> 03:07:56,000
remove it and click details perfect we get a title of each different document

1757
03:08:01,000 --> 03:08:03,000
even though you might not have had this issue on your end I hope this little debugging session was useful but with

1758
03:08:06,000 --> 03:08:08,000
that in mind the fact that we're now getting a title means that we're successfully fetching post details from

1759
03:08:13,000 --> 03:08:15,000
sanity with the PPR strategy enabled in the next lecture will code out the UI of

1760
03:08:20,000 --> 03:08:22,000
the startup Details page and I'll further explain which parts can we leave as static and which ones will make

1761
03:08:26,000 --> 03:08:28,000
Dynamic to utilize the full power of VPR great work so Startup Details

1762
03:08:31,000 --> 03:08:33,000
far let's get started with startup Details page by creating a section right

1763
03:08:37,000 --> 03:08:39,000
here at the top this section will have a class name

1764
03:08:42,000 --> 03:08:44,000
equal to pinkcore container we've seen that before and know exactly ly what it

1765
03:08:48,000 --> 03:08:50,000
does I'll also give it a exclamation mark m-h 230 pixels which will overwrite

1766
03:08:55,000 --> 03:08:57,000
it to a bit of a smaller value there we go that's looking good right within it I'll create a P tag that'll have a class

1767
03:09:03,000 --> 03:09:05,000
name equal to tag and it'll show a formatted date so let's call a format

1768
03:09:08,000 --> 03:09:10,000
date function coming from our lib utils and pass the post question mark doore

1769
03:09:14,000 --> 03:09:16,000
created at property right within it and there we go October 14th 2024 next

1770
03:09:21,000 --> 03:09:23,000
let's move this H1 right within it and we'll change the Styles just a tiny bit

1771
03:09:26,000 --> 03:09:28,000
by setting the class name to be equal to heading there we go that's already so much better right below it let's create

1772
03:09:33,000 --> 03:09:35,000
another P tag that will have a class name equal to subheading and it'll also have a Max W of 5 XL with an exclamation

1773
03:09:41,000 --> 03:09:43,000
mark at the start and that will render the post dot description there we go

1774
03:09:47,000 --> 03:09:49,000
look looking good right below this section we'll create another section and this section will have a class name

1775
03:09:53,000 --> 03:09:55,000
equal to section uncore container within which we can render an IMG tag with a

1776
03:10:00,000 --> 03:10:02,000
source equal to post. image there we go that's looking good we can also have an

1777
03:10:06,000 --> 03:10:08,000
ALT tag of thumbnail and a class name equal to w-o h-auto and rounded D excl looking

1778
03:10:16,000 --> 03:10:18,000
good right below it let's create a div and that div will have a class name

1779
03:10:23,000 --> 03:10:25,000
equal to space- y-5 margin top of 10 to divide it a bit

1780
03:10:28,000 --> 03:10:30,000
from the top Max W of 4 XEL and a margin

1781
03:10:33,000 --> 03:10:35,000
EXL Auto and right within it we can create another div to help us with positioning with a class name equal to

1782
03:10:41,000 --> 03:10:43,000
flex between and a gap of five in between the elements within there we can

1783
03:10:46,000 --> 03:10:48,000
render a link of course only after we import it from next link and give it an

1784
03:10:53,000 --> 03:10:55,000
hre of sluser slost do author question mark. ID so

1785
03:11:03,000 --> 03:11:05,000
we're creating a link to point to the author Details page which we'll soon create let's also give this link a class

1786
03:11:11,000 --> 03:11:13,000
name equal to flex gap of two items Das Center and the margin bottom of

1787
03:11:18,000 --> 03:11:20,000
three within it we can render an image with a source of post. author. image

1788
03:11:26,000 --> 03:11:28,000
with an Al tag equal to Avatar a width of 64 a height of 64 and a class name of

1789
03:11:35,000 --> 03:11:37,000
rounded daso to make it a full Avatar and drop shadow LG we have to import the image

1790
03:11:43,000 --> 03:11:45,000
tag from nextjs and if we save this now you'll see see a great looking profile photo right below this image let's

1791
03:11:50,000 --> 03:11:52,000
create a div within which we can have a P tag with a class name equal to text-

1792
03:11:57,000 --> 03:11:59,000
20-m medium within which we can render the post. author. name and we can also

1793
03:12:03,000 --> 03:12:05,000
duplicate this change the text to something like 16 and also give it text black of 300

1794
03:12:12,000 --> 03:12:14,000
with an exclamation mark within which we can render at post. author. username so

1795
03:12:20,000 --> 03:12:22,000
we can show both the name and the username right below it of course the author page doesn't yet exist but it

1796
03:12:26,000 --> 03:12:28,000
will soon let's go below this link and let's create another P tag that'll have

1797
03:12:32,000 --> 03:12:34,000
a class name equal to category dashtag so I think you know what it will render

1798
03:12:38,000 --> 03:12:40,000
the post. category here we go perfect now right below this div we can create

1799
03:12:44,000 --> 03:12:46,000
an H3 that'll have a class name equal to text D30 D bold and it can say something

1800
03:12:53,000 --> 03:12:55,000
like pitch details or startup details if you will and right below it we can

1801
03:12:58,000 --> 03:13:00,000
render the pitch details which come in a markdown format to parse and convert

1802
03:13:04,000 --> 03:13:06,000
markdown into an HTML string we need to install an additional package it's this one right here called markdown it and it

1803
03:13:11,000 --> 03:13:13,000
says it's a markdown parser done right fast and easy to extend you can just in

1804
03:13:17,000 --> 03:13:19,000
install it by running mpm install markdown-it and then you can use it very

1805
03:13:22,000 --> 03:13:24,000
simply so let's do it together I'll open up the terminal clear it and run mpm install

1806
03:13:30,000 --> 03:13:32,000
markdown-it once it gets installed we can get the pars markdown content right

1807
03:13:36,000 --> 03:13:38,000
here at the top by saying const pars content is equal to

1808
03:13:43,000 --> 03:13:45,000
MD which we have to import at the top by saying import markdown it from markdown it then right

1809
03:13:54,000 --> 03:13:56,000
here we can Define MD is equal to markdown it and finally on this pars

1810
03:14:00,000 --> 03:14:02,000
content we can say md. render post question mark. pitch or an

1811
03:14:07,000 --> 03:14:09,000
empty string in case it doesn't exist so this will properly pars the markdown content so we can display it as HTML and

1812
03:14:15,000 --> 03:14:17,000
you can see that markdown it is complaining a bit saying that we don't have the necessary types for it so if

1813
03:14:20,000 --> 03:14:22,000
you hover over it it's going to give you the command to install the type declarations for the library so just

1814
03:14:27,000 --> 03:14:29,000
copy it and paste it in the terminal then the warning will be gone

1815
03:14:33,000 --> 03:14:35,000
and you'll have all the necessary types great now that we have this parsed content we'll have to set it as

1816
03:14:40,000 --> 03:14:42,000
HTML so let's do that right here below this H3 by checking if we have access to

1817
03:14:47,000 --> 03:14:49,000
to the par content if we do we can render an HTML 5 semantic article tag

1818
03:14:53,000 --> 03:14:55,000
which can be self-closing in this case I think we should be good and on it we can use a dangerously set inner HTML

1819
03:15:01,000 --> 03:15:03,000
property now react normally escapes any HTML to prevent xss attacks cross side

1820
03:15:08,000 --> 03:15:10,000
scripting attacks rendering the content as plain text but when you want to insert raw HTML like the parsed markdown

1821
03:15:16,000 --> 03:15:18,000
you must use dangerously set inner HTML to tell react that the content is safe and should be rendered as HTML so right

1822
03:15:23,000 --> 03:15:25,000
here we can Define uncore uncore HTML to be equal to par content we also need the

1823
03:15:30,000 --> 03:15:32,000
second part of this stary and here we can say ptag with a class name of no

1824
03:15:38,000 --> 03:15:40,000
result which can say no details provided if we save it you can see Pitch

1825
03:15:45,000 --> 03:15:47,000
details and you can see all the testing markdown that we have passed using the sanity Studio markdown editor we can

1826
03:15:52,000 --> 03:15:54,000
style it further by giving this article a class name of pros this will allow

1827
03:15:57,000 --> 03:15:59,000
tailin CSS to automatically change a lot of different styles to make it more readable and to actually parse it there

1828
03:16:03,000 --> 03:16:05,000
we go this is looking so much better let's give it a Max W of 4 XEL so it

1829
03:16:09,000 --> 03:16:11,000
doesn't take the full width of the screen on larger devices font work sense

1830
03:16:15,000 --> 03:16:17,000
to match our application and let's give it a break-all which will apply the word

1831
03:16:21,000 --> 03:16:23,000
break property great now we can go below this div and we can create an HR a

1832
03:16:27,000 --> 03:16:29,000
horizontal rule with a class name equal to divider to divide the pitch details

1833
03:16:34,000 --> 03:16:36,000
from the next section later on right here we'll show editor selected startups

1834
03:16:40,000 --> 03:16:42,000
which are some recommended startups for us to check out since we checked out this current one we're viewing so we can

1835
03:16:46,000 --> 03:16:48,000
kind of continue checking out additional ones while staying on the app so for now I'll turn this into a to-do so we can

1836
03:16:53,000 --> 03:16:55,000
implement it later on but let's go below this section and let's create another very small but very very important

1837
03:17:00,000 --> 03:17:02,000
section and that one will make the fact that we're using PPR on this page makes sense because everything we have

1838
03:17:06,000 --> 03:17:08,000
rendered so far is static content whatever the pitch details we have the thumbnail the title we don't need to

1839
03:17:14,000 --> 03:17:16,000
constantly dynamically refetch or revalidate we're okay that sometimes this data is stale and can be changed

1840
03:17:20,000 --> 03:17:22,000
later on but we will Implement an additional piece of this page that we

1841
03:17:26,000 --> 03:17:28,000
need to update frequently basically in real time it'll be completely Dynamic so as you learned from the start of this

1842
03:17:32,000 --> 03:17:34,000
video whenever you want to make something dynamic in PPR you have to wrap it in a suspense coming from react

1843
03:17:40,000 --> 03:17:42,000
and that's actually a react feature allowing you to provide a fullback in case we cannot render something

1844
03:17:46,000 --> 03:17:48,000
something new or something to show while that something new hasn't yet rendered

1845
03:17:51,000 --> 03:17:53,000
or been fetched so if we cannot yet fetch it we can render a skeleton property coming from shaten so let's go

1846
03:17:59,000 --> 03:18:01,000
ahead and install it by running MPX shaten add latest add skeleton there we

1847
03:18:07,000 --> 03:18:09,000
go it has been added and we can now import it right here at the top coming from components UI skeleton and suspense

1848
03:18:15,000 --> 03:18:17,000
is of course coming from react so make sure to properly import it we can actually add it right here at the top to

1849
03:18:22,000 --> 03:18:24,000
this skeleton we can also provide a class name equal to view- skeleton and

1850
03:18:29,000 --> 03:18:31,000
within the suspense after you have given it a fallback you can choose to add the code that will be rendered dynamically

1851
03:18:37,000 --> 03:18:39,000
so for that piece of code let's actually create a new component in the components

1852
03:18:42,000 --> 03:18:44,000
folder I'll create a new file called view Dot TSX I'll run

1853
03:18:51,000 --> 03:18:53,000
rafc and I'll now render that component right here within the suspense by saying

1854
03:18:57,000 --> 03:18:59,000
view coming from add components SL viw and to it I'll just pass the ID equal to

1855
03:19:03,000 --> 03:19:05,000
the ID this is the ID of the post we are currently on so what kind of view am I

1856
03:19:09,000 --> 03:19:11,000
even talking about here well if you check out the final version of the application check out this little thing

1857
03:19:14,000 --> 03:19:16,000
at the bottom right I know it's it's super super small but once again I really wanted to show you how we can

1858
03:19:21,000 --> 03:19:23,000
make PPR truly shine this piece of data will be rendered dynamically whenever it

1859
03:19:27,000 --> 03:19:29,000
changes in real time thanks to sanity of course but the rest of the page will be completely static exactly as that nextjs

1860
03:19:35,000 --> 03:19:37,000
example where they had an e-commerce store where we had the product details which were render statically but then

1861
03:19:41,000 --> 03:19:43,000
some additional posts or views or whatever it was was rendered dynamically so now we can go into the view and we

1862
03:19:48,000 --> 03:19:50,000
can develop the dynamic part of our PPR page that's going to look something like this we can first destructure the ID

1863
03:19:54,000 --> 03:19:56,000
from props and say that it's ID of a type string then we can return a div

1864
03:20:00,000 --> 03:20:02,000
with a class name equal to view container within which we can render a

1865
03:20:06,000 --> 03:20:08,000
div that'll have a class name of absolute minus

1866
03:20:12,000 --> 03:20:14,000
top-2 and minus wr-2 can you guess what will go into this container well it'll

1867
03:20:18,000 --> 03:20:20,000
be that little ping that you can see right here this light indicating to us

1868
03:20:23,000 --> 03:20:25,000
that it is live so to implement it I'll actually create another component in the

1869
03:20:28,000 --> 03:20:30,000
components folder and I'll call it ping. TSX run rafc and I will import it right

1870
03:20:36,000 --> 03:20:38,000
here within the div by saying ping and calling it as a self-closing component

1871
03:20:42,000 --> 03:20:44,000
below this div we'll render another P tag with a class name of view text

1872
03:20:48,000 --> 03:20:50,000
within which I'll render a span that'll have a class name of font Das black

1873
03:20:53,000 --> 03:20:55,000
that'll render the total number of views so for now let's simply render 100 as a static number and say views if we go

1874
03:21:01,000 --> 03:21:03,000
back to application you can see 100 views and then ping right here at the top right that's good all good things

1875
03:21:07,000 --> 03:21:09,000
take time so now we can dive into ping and we can Implement that little pinging

1876
03:21:12,000 --> 03:21:14,000
light by giving this div a class name of relative with within which we have another div with a class name is equal

1877
03:21:20,000 --> 03:21:22,000
to Absolute minus left- 4 and top-1 so

1878
03:21:26,000 --> 03:21:28,000
we can properly position it within which we have a span that has a class name of

1879
03:21:31,000 --> 03:21:33,000
flex and size- 11 pixels within square brackets within which we have another

1880
03:21:38,000 --> 03:21:40,000
span with a class name equal to Absolute inline-flex

1881
03:21:45,000 --> 03:21:47,000
h- full w- fo animate dping rounded Das full BG

1882
03:21:53,000 --> 03:21:55,000
primary and opacity of 75 there we go you can kind of see it right now at the

1883
03:21:59,000 --> 03:22:01,000
bottom right and below this span we'll have another span that'll have a class name is equal

1884
03:22:07,000 --> 03:22:09,000
to relative inline-flex size-1 pixels same as before rounded Das

1885
03:22:15,000 --> 03:22:17,000
full and and BG primary so basically we'll have one that is always active and

1886
03:22:21,000 --> 03:22:23,000
then we'll have one that pings indicating it's live interactivity great this is now looking

1887
03:22:28,000 --> 03:22:30,000
good now we have to write a separate sanity query to get the total number of views for a post with the given ID to do

1888
03:22:37,000 --> 03:22:39,000
that you already know the drill we have to go into sanity queries where we currently have

1889
03:22:42,000 --> 03:22:44,000
two so we can create a third one by saying export const startup uncore views uncore query

1890
03:22:51,000 --> 03:22:53,000
is equal to theine query to which we pass the actual query this query will be

1891
03:22:56,000 --> 03:22:58,000
a bit simpler we'll say something like give me everything where off a type

1892
03:23:03,000 --> 03:23:05,000
double equal to Startup and if the underscore ID is equal to dollar sign ID

1893
03:23:10,000 --> 03:23:12,000
and give me only the first element and only return the ID and the views pretty

1894
03:23:16,000 --> 03:23:18,000
simple right now we can copy this query go back here and say const in

1895
03:23:24,000 --> 03:23:26,000
curly braces views which we can rename to Total

1896
03:23:30,000 --> 03:23:32,000
views is equal to a weit client coming from sanity do withth config to which

1897
03:23:38,000 --> 03:23:40,000
will pass use CDN is set to false so you can also manually define whether you

1898
03:23:43,000 --> 03:23:45,000
want to use CDN or not with inline configuration ation now let's turn this into async since we're using a weight

1899
03:23:49,000 --> 03:23:51,000
right here there we go and finally after the width config we also have to add dot

1900
03:23:57,000 --> 03:23:59,000
fetch so which Creer are we fetching we're fetching these startup views query

1901
03:24:04,000 --> 03:24:06,000
to which we have to pass params of ID now let's make sure to properly close

1902
03:24:09,000 --> 03:24:11,000
this right here looks like I had a typo and this is now looking so much better and it makes more sense we also have to

1903
03:24:15,000 --> 03:24:17,000
add the ID as a Pam perfect and now we can get access to the total number of

1904
03:24:21,000 --> 03:24:23,000
views and dynamically render it right here currently we have only one views we

1905
03:24:27,000 --> 03:24:29,000
can do some additional parsing to remove the letter s in case it's a singular number a quick trick is to just say

1906
03:24:33,000 --> 03:24:35,000
views and then say colon that way views one views two views no matter how many

1907
03:24:39,000 --> 03:24:41,000
it's all good that's if you want to be lazy but I challenge you to create a function called format number that

1908
03:24:46,000 --> 03:24:48,000
actually takes into consideration whether a number is singular or plural or whether it needs an S at the end or

1909
03:24:52,000 --> 03:24:54,000
not and then adds it correspondingly with that in mind and considering the fact that we specifi the UCD into false

1910
03:24:59,000 --> 03:25:01,000
the number of views whenever it changes will automatically be reflected on this page later on I'll also add a little

1911
03:25:06,000 --> 03:25:08,000
to-do right here to modify or update the number of views whenever somebody sees

1912
03:25:14,000 --> 03:25:16,000
this post more and that soon with that said we have successfully implemented the dynamic part of the startup Details

1913
03:25:21,000 --> 03:25:23,000
page and the static part has been implemented too which leaves us with the completed startup Details page of course

1914
03:25:29,000 --> 03:25:31,000
we have to still update the views and then show other relevant posts similar to this one we'll do that soon but for

1915
03:25:36,000 --> 03:25:38,000
now this is great so next St we'll tap into sanity right client functionalities

1916
03:25:42,000 --> 03:25:44,000
meaning being able to modify some data directly within our application this will allow us to create new startups but

1917
03:25:50,000 --> 03:25:52,000
even sooner than that it'll allow us to update the number of views so that we can see the full benefits of Sanity Write Client

1918
03:25:58,000 --> 03:26:00,000
PPR so far we've implemented PPR partial pre-rendering on the startup Details

1919
03:26:04,000 --> 03:26:06,000
page but we can't really see any difference yet as everything seems static as we're not updating any kind of

1920
03:26:11,000 --> 03:26:13,000
data to increase the number of views in our database at the exact moment somebody visits the page we'll have to

1921
03:26:18,000 --> 03:26:20,000
set up a new sanity right client that allows users to perform right operations

1922
03:26:23,000 --> 03:26:25,000
so far we only performed read operations now to set up a right client in sanity

1923
03:26:29,000 --> 03:26:31,000
we need to generate a token with right permissions through the sanity manage website so visit your dashboard navigate

1924
03:26:36,000 --> 03:26:38,000
to the sanity project you've created head over to API go to tokens and add a

1925
03:26:42,000 --> 03:26:44,000
new API token specify the name something like create and update startups and give

1926
03:26:49,000 --> 03:26:51,000
it the editor access the ability to write access to all data sets and click save copy the token info you were given

1927
03:26:57,000 --> 03:26:59,000
and head over to env. loal there you can add sanity write token and make it equal

1928
03:27:06,000 --> 03:27:08,000
to the Token you just copied notice how this one doesn't have the next public well that's because this is a more

1929
03:27:12,000 --> 03:27:14,000
serious action which not everybody should be able to perform and and it can only happen from the server side nextjs

1930
03:27:19,000 --> 03:27:21,000
will automatically reload all the envs as soon as this happens now head over to

1931
03:27:25,000 --> 03:27:27,000
sanity env. DS that's this file right here and below the project ID also

1932
03:27:32,000 --> 03:27:34,000
export const token and make it equal to process.

1933
03:27:38,000 --> 03:27:40,000
env. sanity wror token next we have to create a new

1934
03:27:44,000 --> 03:27:46,000
file under sanity lib and as we have created client. TS

1935
03:27:50,000 --> 03:27:52,000
now we need to create a new file called Write client. TS to create it we can

1936
03:27:56,000 --> 03:27:58,000
copy what we have here in the client and paste it for the right client at the top

1937
03:28:03,000 --> 03:28:05,000
as I have already mentioned this code can only be run on the server so we're going to import server only all of the

1938
03:28:10,000 --> 03:28:12,000
other things which we're importing are going to be here such as the API version data set project ID

1939
03:28:16,000 --> 03:28:18,000
and in this case we also need to get the token so we can say export con write

1940
03:28:25,000 --> 03:28:27,000
client create a new client with the project ID data set API version use CDN

1941
03:28:32,000 --> 03:28:34,000
set to false and finally we also have to give it a token we can also add one fail

1942
03:28:39,000 --> 03:28:41,000
save to say if there is no bright clientconfig and then. token after dot

1943
03:28:46,000 --> 03:28:48,000
in that case we can throw a new error saying something like write token

1944
03:28:53,000 --> 03:28:55,000
not found just so we know what's wrong and now that we have access to this right

1945
03:28:59,000 --> 03:29:01,000
token we can actually finally update the number of views by going to the view

1946
03:29:06,000 --> 03:29:08,000
component we can remove this to-do and say await right

1947
03:29:12,000 --> 03:29:14,000
client Dot and we can call a DOT patch on it patch is used for updates we want

1948
03:29:19,000 --> 03:29:21,000
to patch a document with this specific ID and we want to set the number of

1949
03:29:25,000 --> 03:29:27,000
views to be equal to Total views + one and we want to commit that action by

1950
03:29:33,000 --> 03:29:35,000
saying do commit and that's it with this approach these two requests will execute

1951
03:29:39,000 --> 03:29:41,000
sequentially and you won't see anything on the UI until they are executed instead you'll see the skeleton to to

1952
03:29:46,000 --> 03:29:48,000
avoid that and to run this update view in the background while we see the rest of the results immediately we can use

1953
03:29:53,000 --> 03:29:55,000
the unstable after functionality allowing you to schedule work to be executed after another response is

1954
03:30:00,000 --> 03:30:02,000
finished this is useful for tasks and other side effects that should not block the response such as logging and

1955
03:30:06,000 --> 03:30:08,000
analytics or a perfect case updating the number of views it can be used in server

1956
03:30:12,000 --> 03:30:14,000
components server actions route handlers and more and it looks something like this import unstable after as after and

1957
03:30:21,000 --> 03:30:23,000
then you call it in this case we want to schedule the work after our response to getting views is done we'll then update

1958
03:30:28,000 --> 03:30:30,000
the views in the background without blocking the UI to do that we just have to do this import unstable after as

1959
03:30:36,000 --> 03:30:38,000
after from next server and then wrap this await into after close it like this

1960
03:30:42,000 --> 03:30:44,000
and set that into its own async function that is it now if you go back

1961
03:30:51,000 --> 03:30:53,000
to your application you'll notice that unstable after must be explicitly enabled by setting the experimental that

1962
03:30:57,000 --> 03:30:59,000
after to true in our next config so let's head over to next config and here

1963
03:31:03,000 --> 03:31:05,000
along with PPR we can also set after the true if you do that and reload the error

1964
03:31:09,000 --> 03:31:11,000
is gone and the number of views switched to two check this out I'll reload a couple more times

1965
03:31:17,000 --> 03:31:19,000
check how gray this is the rest of the content isn't even changing and it's

1966
03:31:23,000 --> 03:31:25,000
here immediately doesn't feel like anything is happening like if I go back

1967
03:31:28,000 --> 03:31:30,000
and if I go to this document I mean it is just super quick the only part of the website that

1968
03:31:36,000 --> 03:31:38,000
updates is this little part at the bottom right which is the number of views super cool I think I'll continue

1969
03:31:42,000 --> 03:31:44,000
reloading it a few more times but even at this point it still may not be clear that this is PPR right so I will

1970
03:31:50,000 --> 03:31:52,000
actually demonstrate it to you I'll open up sanity Studio on the right side and keep looking at the project details on

1971
03:31:56,000 --> 03:31:58,000
the left I'll head over to startups and I'll find this last startup that I

1972
03:32:02,000 --> 03:32:04,000
updated we can see the number of views is 22 now I'm going to change the title of this startup in sanity studio and

1973
03:32:09,000 --> 03:32:11,000
reload the page check this out I'll change it to something like new JS mastery. proo platform yep

1974
03:32:20,000 --> 03:32:22,000
that's a cool new startup we're working on so let me click publish and even if I

1975
03:32:27,000 --> 03:32:29,000
reload well it changed immediately it's possible that I hit just the right reload time but if I change it again to

1976
03:32:34,000 --> 03:32:36,000
something like new new new Js Mastery

1977
03:32:39,000 --> 03:32:41,000
Pro platform and click publish if I reload well it changed the

1978
03:32:45,000 --> 03:32:47,000
immediately looks like the news about the new upcoming platform can't wait to get leaked but let's see why is that

1979
03:32:52,000 --> 03:32:54,000
because right now it seems that everything is live and not cashed at all we are fetching the number of views

1980
03:32:58,000 --> 03:33:00,000
right here using the client and we specifically said the UCD and fals

1981
03:33:03,000 --> 03:33:05,000
that's okay but what about these startup details so if we go to Startup details

1982
03:33:09,000 --> 03:33:11,000
here we're using the regular client and this client oh it has a UC and set to false

1983
03:33:17,000 --> 03:33:19,000
when we were testing something we set it back to false just to show it but for now I can set it to true so it'll

1984
03:33:24,000 --> 03:33:26,000
actually cache things so now if I go back and change

1985
03:33:29,000 --> 03:33:31,000
this to something like brand new Js Mastery Pro platform and click

1986
03:33:36,000 --> 03:33:38,000
publish and then reload here you can notice that this will not actually

1987
03:33:41,000 --> 03:33:43,000
update for another 60 seconds that's because the data is cached it's coming

1988
03:33:46,000 --> 03:33:48,000
from a CDN the views are indeed updating the title stays the same and that my

1989
03:33:53,000 --> 03:33:55,000
friends is PPR for you hopefully now you understand how this is working behind the scenes the startup details use ISR

1990
03:34:01,000 --> 03:34:03,000
incremental static regeneration which revalidates the page every 60 seconds so

1991
03:34:08,000 --> 03:34:10,000
any change made in stti studio or editing the database will make the changes appear on the website once the

1992
03:34:15,000 --> 03:34:17,000
cach is refreshed meanwhile views use SSR service side rendering providing

1993
03:34:21,000 --> 03:34:23,000
fresh data with each user request so if I reload 60 seconds have passed we get

1994
03:34:27,000 --> 03:34:29,000
the new data and now it's going to be cached until it changes perfect that was

1995
03:34:33,000 --> 03:34:35,000
a good one now you truly understand how to use PPR next we will revisit the

1996
03:34:39,000 --> 03:34:41,000
author authentication flow so we not only log in using Google allo but we

1997
03:34:44,000 --> 03:34:46,000
actually create a real author in our database that will then be capable of

1998
03:34:50,000 --> 03:34:52,000
creating new startups directly within the YC directory app let's do that Author Authentication Flow

1999
03:34:57,000 --> 03:34:59,000
next I've shown this graph to you before right and basically what it says is

2000
03:35:03,000 --> 03:35:05,000
depending if there is a session or not we have to make sure that the user that

2001
03:35:08,000 --> 03:35:10,000
is authenticated also is created as an author within our database and if they're not we need to create one in

2002
03:35:14,000 --> 03:35:16,000
their name so to do that we'll have to create a sanity query to see whether an author with a specific GitHub ID exists

2003
03:35:23,000 --> 03:35:25,000
let's head over to queries and let's create a new query by saying export

2004
03:35:28,000 --> 03:35:30,000
const author by GitHub ID query is equal

2005
03:35:34,000 --> 03:35:36,000
to Define query and we can say something along the lines of give me everything

2006
03:35:40,000 --> 03:35:42,000
where underscore type is double equal to author and the I ID of the author is

2007
03:35:47,000 --> 03:35:49,000
equal to dollar sign ID then give me only the first element that matches and

2008
03:35:52,000 --> 03:35:54,000
for that first element return the following things an underscore ID the ID

2009
03:35:59,000 --> 03:36:01,000
name username email email image and bio now

2010
03:36:06,000 --> 03:36:08,000
let's go over to o. TS and we have to write some call backs these are

2011
03:36:12,000 --> 03:36:14,000
functions that are executed after successful authentication by next off in this graph that callback would be

2012
03:36:20,000 --> 03:36:22,000
somewhere right here where we're authenticating and when we get the successful information about the user

2013
03:36:27,000 --> 03:36:29,000
currently we just create a session and return it but now whenever we create a

2014
03:36:32,000 --> 03:36:34,000
session we also want to do this check that we just created the query for so alongside providers create callbacks

2015
03:36:40,000 --> 03:36:42,000
which is an object and create a first call back async sign in to check whether

2016
03:36:46,000 --> 03:36:48,000
our user already exists in our database or not and then depending on that created right here we get access to the

2017
03:36:54,000 --> 03:36:56,000
newly authenticated user their account and their profile we can check whether this is an already existing user by

2018
03:37:00,000 --> 03:37:02,000
saying con existing user is equal to await client. fetch author by GitHub ID

2019
03:37:11,000 --> 03:37:13,000
query to which we pass params as ID and of course this

2020
03:37:17,000 --> 03:37:19,000
client has to come from Sandy specifically this ID is going to be

2021
03:37:22,000 --> 03:37:24,000
referring to the profile question mark. ID coming from GitHub ooth now we can

2022
03:37:28,000 --> 03:37:30,000
check if there is no existing user then we can use sanity right client

2023
03:37:36,000 --> 03:37:38,000
to create a new user document or new author document by saying await write client which we have to

2024
03:37:43,000 --> 03:37:45,000
import from sanity create where the type is equal to

2025
03:37:50,000 --> 03:37:52,000
author ID is set to profile question mark. ID name is set to user question

2026
03:38:00,000 --> 03:38:02,000
mark. name username is set to profile

2027
03:38:05,000 --> 03:38:07,000
question mark di login email is set to user questionmark

2028
03:38:11,000 --> 03:38:13,000
doil image is set to user mark. image and bio is set to profile question mark.

2029
03:38:18,000 --> 03:38:20,000
bio or an empty string if it doesn't exist now you can notice how I had to

2030
03:38:24,000 --> 03:38:26,000
actually repeat user and profile many times what would have been better is to Simply extract information from this

2031
03:38:31,000 --> 03:38:33,000
user or profile by destructuring it so we can destructure from user the name

2032
03:38:37,000 --> 03:38:39,000
the email and the image and from profile we can destructure what ID login

2033
03:38:46,000 --> 03:38:48,000
and bio now if we do that we can remove all instances where we mention those things

2034
03:38:54,000 --> 03:38:56,000
and we can just refer to those things themselves and if you have the same name of the key and the value that means that

2035
03:39:00,000 --> 03:39:02,000
you can just refer to it like this without specifying the name it's just

2036
03:39:06,000 --> 03:39:08,000
like this but for username it's going to be login so we have to specify it still

2037
03:39:11,000 --> 03:39:13,000
still much cleaner than it used to be finally we can go below this if statement and then return true

2038
03:39:19,000 --> 03:39:21,000
to continue the sign-in process after a successful signin we'll need to create an author ID from sanity to use it for

2039
03:39:27,000 --> 03:39:29,000
our profile or when creating a new startup so let's modify the default JWT

2040
03:39:33,000 --> 03:39:35,000
token and add the author ID to it we can do that by creating a second call back

2041
03:39:39,000 --> 03:39:41,000
right here right below the async sign in we can create async

2042
03:39:46,000 --> 03:39:48,000
JWT where we get the token the account and the profile there we can check if

2043
03:39:52,000 --> 03:39:54,000
account exists and if profile exists then we can get the user from

2044
03:39:58,000 --> 03:40:00,000
sanity by saying const user is equal to a weit client. fetch author by GitHub ID

2045
03:40:06,000 --> 03:40:08,000
query where we specify the ID to be equal to profile question mark. ID oh

2046
03:40:13,000 --> 03:40:15,000
and I just noticed above we destructure the ID from profile so we don't have to

2047
03:40:19,000 --> 03:40:21,000
explicitly mention it here we can just say ID now we can extend this ID with

2048
03:40:24,000 --> 03:40:26,000
the user ID by saying token. ID is equal to user doore ID and finally we can exit

2049
03:40:32,000 --> 03:40:34,000
out of that if and return the token this will allow us to connect a specific

2050
03:40:37,000 --> 03:40:39,000
GitHub user with a sanity author that can then create a startup finally in

2051
03:40:42,000 --> 03:40:44,000
order to use the ID we need to create a third callback function called session where we get

2052
03:40:50,000 --> 03:40:52,000
access to a session and a token and we need to pass the profile ID

2053
03:40:57,000 --> 03:40:59,000
from the token to the session by saying object. assign

2054
03:41:02,000 --> 03:41:04,000
session where we set the ID to be equal to token. ID and then we return the

2055
03:41:09,000 --> 03:41:11,000
modified session great now we can go to any page

2056
03:41:15,000 --> 03:41:17,000
for example we can go to our homepage and here we can extract a session and

2057
03:41:22,000 --> 03:41:24,000
from it we can get the sanity ID of the author for that user so let's do it by

2058
03:41:28,000 --> 03:41:30,000
saying const session is equal to await off coming from at SLO and if you try to

2059
03:41:37,000 --> 03:41:39,000
console.log session do ID you'll see that typescript will

2060
03:41:43,000 --> 03:41:45,000
complain a bit say saying that session is possibly null we can easily fix that

2061
03:41:48,000 --> 03:41:50,000
by creating a new file right here in the root of our directory and call it next o

2062
03:41:56,000 --> 03:41:58,000
or next- o.d. TS within it we can declare a new

2063
03:42:03,000 --> 03:42:05,000
typescript module called Next o which will have two interfaces

2064
03:42:10,000 --> 03:42:12,000
interface session that'll have an ID of string

2065
03:42:16,000 --> 03:42:18,000
and it'll also have an interface

2066
03:42:21,000 --> 03:42:23,000
JWT which will have an ID of string as well if you do that the session now

2067
03:42:28,000 --> 03:42:30,000
knows that it has an ID so let's give it a shot now if you go back to the homepage

2068
03:42:35,000 --> 03:42:37,000
you'll notice that the only thing you have to do to get rid of this warning is to add a question mark right here and

2069
03:42:41,000 --> 03:42:43,000
you might have noticed that on my screen there was an error right there 5 Seconds ago but now there's no error well

2070
03:42:48,000 --> 03:42:50,000
sometimes nextjs will throw some random errors as I'm still working on the experimental version of nextjs so just

2071
03:42:54,000 --> 03:42:56,000
so you know if something weird is happening for you too and you cannot find where the error is originating from

2072
03:43:00,000 --> 03:43:02,000
just try to reload your terminal and then run it one more time it might help just to fix things you know turn it off

2073
03:43:07,000 --> 03:43:09,000
and then turn it on again type of situation but with that in mind if we do that and you reload on the homepage you

2074
03:43:14,000 --> 03:43:16,000
should see a conso log for this session initially the conso log should be

2075
03:43:20,000 --> 03:43:22,000
undefined and we can see undefined right here that's because we were left logged

2076
03:43:26,000 --> 03:43:28,000
in before we created all the functionality to create a new ID to hook

2077
03:43:31,000 --> 03:43:33,000
it up with the author so to fix that let's log out and let's log in one more

2078
03:43:37,000 --> 03:43:39,000
time and there you'll see a server error problem with server configuration if you open up the

2079
03:43:44,000 --> 03:43:46,000
terminal you'll see that it's coming from o and specifically it's complaining

2080
03:43:49,000 --> 03:43:51,000
about not being able to find the underscore ID so we might need to add a

2081
03:43:55,000 --> 03:43:57,000
question mark right here saying that sometimes the user might not be there but why would it not be there in

2082
03:44:02,000 --> 03:44:04,000
the first place let's check our query to be sure we are trying to fetch the

2083
03:44:07,000 --> 03:44:09,000
author by GitHub ID query by defining the query that gets everything of a type

2084
03:44:13,000 --> 03:44:15,000
author and the ID and the ID is equal to dollar

2085
03:44:19,000 --> 03:44:21,000
sign ID where we get the first element and then we return all of these properties for it this is looking good

2086
03:44:25,000 --> 03:44:27,000
to me so let's give it one more shot but before we do you have to make sure that the author hasn't been generated or if

2087
03:44:32,000 --> 03:44:34,000
it has we'll have to clear it by deleting it so now if we try to log in one more

2088
03:44:41,000 --> 03:44:43,000
time oh it's actually asking us whether we want to authorize it which is great

2089
03:44:46,000 --> 03:44:48,000
so let me authorize my user we're getting redirected which is good we get the same information right here at the

2090
03:44:53,000 --> 03:44:55,000
top as before but this time if you go to sanity Studio to authors you'll be able

2091
03:45:00,000 --> 03:45:02,000
to find a new user with complete oath data populated such as the name username

2092
03:45:06,000 --> 03:45:08,000
email image and the bio coming directly from GitHub but a bigger question is can we

2093
03:45:14,000 --> 03:45:16,000
see that session ID D in our console log and for the time being the answer is no

2094
03:45:20,000 --> 03:45:22,000
it is undefined so let's debug it further we're not getting the result we want we

2095
03:45:26,000 --> 03:45:28,000
create a new user on signin and that user indeed gets created in the database

2096
03:45:32,000 --> 03:45:34,000
but if we try to read that value within the JWT it returns undefined even though the user has been created successfully

2097
03:45:38,000 --> 03:45:40,000
in sanity studio and even though we've had an issue with this optional chaining operator that's not to blame even adding

2098
03:45:45,000 --> 03:45:47,000
some additional checks like if no user then do something else no that wouldn't

2099
03:45:51,000 --> 03:45:53,000
fix it this issue is rooted deeply in how sanity and more importantly nextjs

2100
03:45:57,000 --> 03:45:59,000
truly work behind the scenes specifically their caching mechanisms when we first created a new user after

2101
03:46:05,000 --> 03:46:07,000
confirming they didn't exist sanity successfully added the user however when

2102
03:46:10,000 --> 03:46:12,000
we immediately attempted to retrieve that user within 60 seconds of cre creation the query didn't return any

2103
03:46:17,000 --> 03:46:19,000
results this is because the read query was made too soon after the user creation and sanities and next js's

2104
03:46:24,000 --> 03:46:26,000
cache hadn't yet been updated this is a common challenge when working with Frameworks or libraries that cash data

2105
03:46:32,000 --> 03:46:34,000
and if you're not familiar with how and when caching occurs it can lead to confusion and frustration when queries

2106
03:46:39,000 --> 03:46:41,000
don't return the expected results and you know them for a fact that they're there without a proper understanding of

2107
03:46:45,000 --> 03:46:47,000
cash you might find yourself stuck and discouraged this is why learning about

2108
03:46:50,000 --> 03:46:52,000
cash management is crucial you cannot say you know next GS until you can for a

2109
03:46:56,000 --> 03:46:58,000
fact know exactly how its caching mechanism works and within the ultimate nextjs course we dive deep into how

2110
03:47:03,000 --> 03:47:05,000
caching works because I know how big of a problem it was for me the developers

2111
03:47:09,000 --> 03:47:11,000
that work alongside me on all of these projects and all the other developers out there which are simply saying that

2112
03:47:15,000 --> 03:47:17,000
nextjs obscures and abstracts everything and just doesn't work well it's not that

2113
03:47:20,000 --> 03:47:22,000
it doesn't work it's that they don't understand it yet so if you're having trouble understanding cash and you want

2114
03:47:27,000 --> 03:47:29,000
to dive deeper into its inner workings pause this video and check out the ultimate nextjs Course once you do that

2115
03:47:33,000 --> 03:47:35,000
let's go ahead and fix this issue back in our callbacks we have to add use CDN false to both sign in and JWT callbacks

2116
03:47:42,000 --> 03:47:44,000
so here where we're calling for existing user we can say say client dot with

2117
03:47:49,000 --> 03:47:51,000
config where we can pass the used CDN is set to false and then call a fetch on it

2118
03:47:57,000 --> 03:47:59,000
similarly we can pass it when fetching the user right here client dot with

2119
03:48:03,000 --> 03:48:05,000
config where we pass in the UCD and false and only then do we fetch if we

2120
03:48:09,000 --> 03:48:11,000
now save this close everything because we're expecting it to work go back to San and delete the existing

2121
03:48:17,000 --> 03:48:19,000
user log out and give it one final shot let's see what we come up with and

2122
03:48:23,000 --> 03:48:25,000
before I log in I'll make sure to clear the cash I'll do it right here clear

2123
03:48:28,000 --> 03:48:30,000
cash and clear cookies and all that good stuff you can also do it via inspect element by going to

2124
03:48:35,000 --> 03:48:37,000
app and cache finally let's log in okay it

2125
03:48:41,000 --> 03:48:43,000
automatically logged Us in which is great the sanity user has been created with all of its great oo GitHub data

2126
03:48:48,000 --> 03:48:50,000
that's great but now for the Moment of Truth do we have the session ID within

2127
03:48:54,000 --> 03:48:56,000
our terminal and the answer is yes here it is if you didn't know about nextjs

2128
03:49:00,000 --> 03:49:02,000
caching you can spend hours on issues just like this because you can see the data for a fact it is here but your

2129
03:49:07,000 --> 03:49:09,000
nextjs is telling you that it's not no it's not that nygs is just trying to make sure that your app is as efficient

2130
03:49:14,000 --> 03:49:16,000
and as optimized as possible but it's up to you to control the Beast so once

2131
03:49:20,000 --> 03:49:22,000
again if this is still a bit unclear and you want a deep under the hood dive into NEX gs's inner workings check out the

2132
03:49:27,000 --> 03:49:29,000
ultimate nextjs course more than 4,000 developers have learned from it so far and love it and I'll always continue

2133
03:49:34,000 --> 03:49:36,000
updating it with the latest versions of nextjs the link will of course be in the description but with that said even by

2134
03:49:40,000 --> 03:49:42,000
watching this video you might already understand some of the intricacies of caching thankfully we have fixed this

2135
03:49:47,000 --> 03:49:49,000
issue and we are ready to proceed in the next chapter we'll focus on creating the

2136
03:49:53,000 --> 03:49:55,000
create startup page allowing us to create new startups directly from YC directory app not necessarily needing to

2137
03:50:01,000 --> 03:50:03,000
go to sanity Studio to start creating the create Create Startup Form

2138
03:50:06,000 --> 03:50:08,000
startup page we have to create a new route in our application for that we'll go to app rout and then Within startup

2139
03:50:15,000 --> 03:50:17,000
we'll create a new folder called create and within the create folder we'll create a new file called page. TSX you

2140
03:50:24,000 --> 03:50:26,000
know the drill I'll run rafc in there to quickly spin up a simple react

2141
03:50:30,000 --> 03:50:32,000
functional component and then I'll head over to create which will bring me to the page that we just created within

2142
03:50:37,000 --> 03:50:39,000
here I'll turn this div into an empty react fragment and within it I'll create

2143
03:50:42,000 --> 03:50:44,000
a new section this section will have a class name

2144
03:50:47,000 --> 03:50:49,000
equal to pinkcore container and m-h Das in square brackets

2145
03:50:54,000 --> 03:50:56,000
230 pixels within it we can create a new H1 and give it a class name equal to

2146
03:51:02,000 --> 03:51:04,000
heading and within it say submit your startup pitch there we go

2147
03:51:10,000 --> 03:51:12,000
that's looking better or we can say submit your startup now right below it we want to have a new component which is

2148
03:51:17,000 --> 03:51:19,000
going to be a form so let's go ahead and create that form by creating a new

2149
03:51:23,000 --> 03:51:25,000
component in the components folder which is going to be called startup form.

2150
03:51:30,000 --> 03:51:32,000
TSX run rafc and then import this form right

2151
03:51:35,000 --> 03:51:37,000
below the section as a self-closing component startup

2152
03:51:42,000 --> 03:51:44,000
form there we go and of course make make sure to properly

2153
03:51:47,000 --> 03:51:49,000
imported perfect there we go it's looking good and we only want to be able to visit this page if we are logged in

2154
03:51:54,000 --> 03:51:56,000
so let's add one more fail save by saying const session is equal to await o

2155
03:52:01,000 --> 03:52:03,000
coming from next o like this we have to turn this into a sync and then we can

2156
03:52:06,000 --> 03:52:08,000
make a check and say if there is no session then we can redirect and this redirect will be imported from next

2157
03:52:13,000 --> 03:52:15,000
navigation and it's going to point to just home forward slash

2158
03:52:20,000 --> 03:52:22,000
perfect so now if somebody's unauthenticated and they try to manually go to Startup create it'll actually just

2159
03:52:26,000 --> 03:52:28,000
bump them up to the homepage because they can view but not create different startups great so now let's dive into

2160
03:52:34,000 --> 03:52:36,000
the startup form and let's start implementing it our form will use quite a few different shat CN components so

2161
03:52:40,000 --> 03:52:42,000
let's go ahead and install them one by one we can do that by running MPX

2162
03:52:46,000 --> 03:52:48,000
shaten add latest add and we can add the

2163
03:52:51,000 --> 03:52:53,000
input the text area the toast component which is going to be for little alert

2164
03:52:56,000 --> 03:52:58,000
once we submit or once we have an error and we'll add other ones as we go

2165
03:53:02,000 --> 03:53:04,000
if we remember to add something else as well now we can develop the UI of the form let's start by turning this entire

2166
03:53:09,000 --> 03:53:11,000
div into a form component like this this form will have an action which for now

2167
03:53:14,000 --> 03:53:16,000
I'll set to be an empty callback function let's also give it a class name

2168
03:53:20,000 --> 03:53:22,000
equal to Startup D form and you notice that as soon as we Define some kind of an action it's going to ask us to turn

2169
03:53:27,000 --> 03:53:29,000
this into a client component so let's actually add use client right here at

2170
03:53:33,000 --> 03:53:35,000
the top right within the form we'll have a div and we'll use that div just for structuring our elements within the div

2171
03:53:40,000 --> 03:53:42,000
we'll have a label with an HTML 4 property equal to title so this will be

2172
03:53:45,000 --> 03:53:47,000
a label for the title with a class name of startup D formore label and it's going to say

2173
03:53:53,000 --> 03:53:55,000
title right below the label I'll render an input which is going to come directly from shaten meaning add components UI

2174
03:54:01,000 --> 03:54:03,000
input like this it's going to be a self-closing component that will have an ID equal to title a name equal to title

2175
03:54:10,000 --> 03:54:12,000
a class name equal to Startup Das form on _ input it'll be required and it'll

2176
03:54:18,000 --> 03:54:20,000
have a placeholder equal to Startup title there we go that's looking good

2177
03:54:23,000 --> 03:54:25,000
right below it we can check whether we have any errors on our form so let's create a new use state right here use

2178
03:54:31,000 --> 03:54:33,000
State snippet which we need to import from react and we'll say const errors

2179
03:54:37,000 --> 03:54:39,000
and set errors is equal to use State at the

2180
03:54:42,000 --> 03:54:44,000
start equal to just an empty object so now if we have any errors so if errors.

2181
03:54:49,000 --> 03:54:51,000
tile exist then we'll render a P tag with a class name equal to Startup D

2182
03:54:57,000 --> 03:54:59,000
formore error and it'll render errors. tile perfect right now our

2183
03:55:04,000 --> 03:55:06,000
typescript is not sure whether title exists on this errors object so what we

2184
03:55:10,000 --> 03:55:12,000
can do is specify the type of this Ed state right here before the opening

2185
03:55:16,000 --> 03:55:18,000
parentheses and we can set it as record string string so then it'll know that it

2186
03:55:22,000 --> 03:55:24,000
contains Different Strings within this object now this is the field for the

2187
03:55:27,000 --> 03:55:29,000
title and we might want to replicate this for other fields as well we want to do it for the description we want to do

2188
03:55:34,000 --> 03:55:36,000
it for the category image link and then the pitch itself will be the actual markdown but for now let's duplicate

2189
03:55:41,000 --> 03:55:43,000
this entire div at least three times so I'll copy this one two

2190
03:55:48,000 --> 03:55:50,000
3 there we go let's divide them a bit with some space and the second one will have the HTML 4 description and it'll

2191
03:55:55,000 --> 03:55:57,000
say description the input itself will actually be a text

2192
03:56:01,000 --> 03:56:03,000
area so let's import it from components text area the ID and the name will of

2193
03:56:08,000 --> 03:56:10,000
course be description instead of startup form input it'll be startup form text

2194
03:56:13,000 --> 03:56:15,000
area required and placeholder can be something like startup

2195
03:56:19,000 --> 03:56:21,000
description there we go for the errors you know the drill it's going to be errors.

2196
03:56:26,000 --> 03:56:28,000
description and at the end we will render the errors. description as well

2197
03:56:32,000 --> 03:56:34,000
great two inputs done two more to go below description we'll render a label

2198
03:56:39,000 --> 03:56:41,000
HTML 4 category startup form label that's going to say

2199
03:56:45,000 --> 03:56:47,000
category the input for that category will be category the name will be category as well and we'll say something

2200
03:56:52,000 --> 03:56:54,000
like startup category we can give some examples so that they know what they have to enter like Tech health education

2201
03:57:00,000 --> 03:57:02,000
and so on and we'll render errors. category and

2202
03:57:07,000 --> 03:57:09,000
errors. category here as well and after that we'll have our image link so let's render the HTML 4 Link

2203
03:57:15,000 --> 03:57:17,000
and say image URL change the ID to

2204
03:57:20,000 --> 03:57:22,000
link the name to link as well and we can say something like startup image

2205
03:57:28,000 --> 03:57:30,000
URL and finally we'll render the errors. Link and errors. Link right here as well

2206
03:57:36,000 --> 03:57:38,000
and we have four different inputs great now below these we'll need

2207
03:57:41,000 --> 03:57:43,000
to have a pitch and this will be the actual markdown which will give us a lot

2208
03:57:46,000 --> 03:57:48,000
of different capabilities so we can further optimize and style how we want to portray the pitch of our startup you

2209
03:57:54,000 --> 03:57:56,000
can see it in real time how it looks like you can enter different code blocks and you can even enter inline images

2210
03:58:00,000 --> 03:58:02,000
which is pretty cool so it gives you a lot of flexibility in how you want to present your startup so to create this

2211
03:58:07,000 --> 03:58:09,000
markdown component we'll use UIW react MD editor which is a simple Mark done

2212
03:58:13,000 --> 03:58:15,000
editor with preview view implemented with reactjs and typescript let's go ahead and install it together by running

2213
03:58:20,000 --> 03:58:22,000
mpmi at UIW SL react D md- editor and

2214
03:58:27,000 --> 03:58:29,000
here we can see how it can be used we can import it right here at the top of the file we need to Define its state or

2215
03:58:35,000 --> 03:58:37,000
the value in this case I'll rename it from value to pitch and set

2216
03:58:42,000 --> 03:58:44,000
pitch that's going to be used State and finally we'll be able to render it like

2217
03:58:47,000 --> 03:58:49,000
so so let's scroll a bit down and let's actually duplicate the entire div one

2218
03:58:52,000 --> 03:58:54,000
final time for this pitch element but this time we'll give this div a data

2219
03:59:00,000 --> 03:59:02,000
color mode and set it to light so it always must be light give it HTML for pitch change this

2220
03:59:09,000 --> 03:59:11,000
to pitch we'll remove this input and instead of the input we'll use this empd

2221
03:59:15,000 --> 03:59:17,000
editor that we have here we can change the value to pitch and set the onchange to set pitch and for the errors that's

2222
03:59:23,000 --> 03:59:25,000
going to be errors. pitch as well as errors. pitch right here in this case I

2223
03:59:29,000 --> 03:59:31,000
believe we have to set it as a callback function that gets access to the value

2224
03:59:35,000 --> 03:59:37,000
and then we can call the value as string just to make sure that typescript is

2225
03:59:40,000 --> 03:59:42,000
happy in this case there we go now now we're good so

2226
03:59:45,000 --> 03:59:47,000
if you go back to the create page and reload you should be able to see a very simplistic but nice looking markdown

2227
03:59:52,000 --> 03:59:54,000
editor which has the preview mode enabled so you can see exactly what you're doing in real time now let's TI

2228
03:59:58,000 --> 04:00:00,000
it further and give it additional features we can give it an ID equal to pitch we can also give it a preview

2229
04:00:06,000 --> 04:00:08,000
equal to edit a height of about 300 pixels to give it some more space we can give it a

2230
04:00:13,000 --> 04:00:15,000
style of border radius of 20 to make it fit along our

2231
04:00:19,000 --> 04:00:21,000
other elements better and an overflow of hidden there we go now it's a bit more

2232
04:00:24,000 --> 04:00:26,000
organic we can give it a text area props

2233
04:00:30,000 --> 04:00:32,000
specifically change a placeholder to be briefly describe your idea and what

2234
04:00:38,000 --> 04:00:40,000
problem it solves and we can also give it a preview options which is an object

2235
04:00:44,000 --> 04:00:46,000
where we can set a this allowed elements and we can disallow The Styling so we're

2236
04:00:51,000 --> 04:00:53,000
only going to keep the base marked on properties so if we reload and remove this hello world you can see that it

2237
04:00:57,000 --> 04:00:59,000
says briefly describe your idea and what problem it solves finally at the bottom below this div let's render a button

2238
04:01:04,000 --> 04:01:06,000
coming from components UI button let's give it a type is equal to

2239
04:01:10,000 --> 04:01:12,000
submit as it will submit the entire form and a class name equal to Startup D

2240
04:01:15,000 --> 04:01:17,000
formore BTN there we go now when submitting this form it'll take some

2241
04:01:22,000 --> 04:01:24,000
time it won't be an instantaneous action so let's create a field const is pending

2242
04:01:28,000 --> 04:01:30,000
which for now I'll set it to false later on we'll extract this value dynamically

2243
04:01:33,000 --> 04:01:35,000
to know whether we're submitting the form or not I'll also remove this hello world from the pitch so we have a clean

2244
04:01:40,000 --> 04:01:42,000
and empty slate so going back to the button we can now make it disabled in case it is currently pending

2245
04:01:48,000 --> 04:01:50,000
meaning something is happening also if it is pending will change what it says

2246
04:01:54,000 --> 04:01:56,000
it'll say submitting dot dot dot else it'll say submit your startup or your

2247
04:02:01,000 --> 04:02:03,000
pitch and let's also render a send icon right here which will have a class name

2248
04:02:07,000 --> 04:02:09,000
equal to size-6 and margin left of two and we can also get it a text- white so

2249
04:02:16,000 --> 04:02:18,000
the contrast is a bit better there we go let's see why this startup form is

2250
04:02:21,000 --> 04:02:23,000
complaining it is saying that we have multiple default exports let's see if

2251
04:02:26,000 --> 04:02:28,000
that really is the case hm it seems to me like we only have one if I close the file and then reopen it looks like the

2252
04:02:33,000 --> 04:02:35,000
error is gone great and with that the UI of her form is looking great so now we

2253
04:02:39,000 --> 04:02:41,000
can focus on submitting the form and we'll submit it you using reacts latest

2254
04:02:46,000 --> 04:02:48,000
use action State hook a hook that allows you to update the state based on the

2255
04:02:51,000 --> 04:02:53,000
result of a form action it is a hook that simplifies the process of managing

2256
04:02:56,000 --> 04:02:58,000
form States and form submissions you don't have to write too many used states

2257
04:03:02,000 --> 04:03:04,000
it is designed to work seamlessly with server actions allowing you to update component State based on the result of

2258
04:03:08,000 --> 04:03:10,000
the form action it even exposes a special is pending state that can be used to show a loading indicator while

2259
04:03:15,000 --> 04:03:17,000
the action is being executed and this use action State Hook is even better and

2260
04:03:21,000 --> 04:03:23,000
it's aim to replace the react Dom's used form State hook as it caused some

2261
04:03:27,000 --> 04:03:29,000
confusion and limitations so this new hook fixes those issues by renaming use

2262
04:03:34,000 --> 04:03:36,000
form state to use action state it adds an additional pending State and it moves

2263
04:03:39,000 --> 04:03:41,000
the hook to the react package overall a very good update in my opinion so let's

2264
04:03:45,000 --> 04:03:47,000
explore it in a bit more detail we import use action State Hook from

2265
04:03:50,000 --> 04:03:52,000
react and you use it like you would typical use state but this time instead

2266
04:03:56,000 --> 04:03:58,000
of simply saying use State and then getting the value and the setter in this case you're getting the current state of

2267
04:04:02,000 --> 04:04:04,000
the form as state you're getting this patch which is the action that we

2268
04:04:08,000 --> 04:04:10,000
trigger to dispatch or trigger the form meaning update and then we get is

2269
04:04:13,000 --> 04:04:15,000
pending which is a Boolean indicating whether the action is currently pending to this hook you also provide the action

2270
04:04:20,000 --> 04:04:22,000
which is a function that is triggered when the form submit you can think of this as handle submit you get the

2271
04:04:27,000 --> 04:04:29,000
initial state of the form and then an optional Perma link containing the unique page URL that the form modifies

2272
04:04:35,000 --> 04:04:37,000
so with that in mind let's actually add the use action State hook to the code we

2273
04:04:40,000 --> 04:04:42,000
can do that right here at the top I'll remove this is pend and I'll say const we can get the state

2274
04:04:48,000 --> 04:04:50,000
the form action and the is pending state by saying is equal to use action state

2275
04:04:56,000 --> 04:04:58,000
which you call as a function of course we have to import this use action State

2276
04:05:01,000 --> 04:05:03,000
as we learned directly from react so we can get it right here to it we need to provide the actual action that'll happen

2277
04:05:09,000 --> 04:05:11,000
once we submit the form so let's create it const handle form submit is an arrow

2278
04:05:17,000 --> 04:05:19,000
function which we can call right here handle form submit that's the action and

2279
04:05:23,000 --> 04:05:25,000
we can also pass the initial state of the form which can be set to an error

2280
04:05:28,000 --> 04:05:30,000
which is set to an empty string as well as a status which can be set to initial

2281
04:05:34,000 --> 04:05:36,000
like this we can also declare this handle form right here above so we can use it here and we have to fix the typo

2282
04:05:41,000 --> 04:05:43,000
in the error right here we'll soon look into this tapescript warning but before that let's focus on the validation of

2283
04:05:48,000 --> 04:05:50,000
the form for validation we'll use Zod Zod is a simple typescript first schema

2284
04:05:54,000 --> 04:05:56,000
validation with static type inference and to implement it you can create a new

2285
04:06:00,000 --> 04:06:02,000
file in our lib folder that's going to be right here and let's call it

2286
04:06:06,000 --> 04:06:08,000
validation dots within it you can say export const form schema is equal to Z

2287
04:06:14,000 --> 04:06:16,000
doob and then you pass in all of the properties that you want your inputs to have and of course we have to import Z

2288
04:06:22,000 --> 04:06:24,000
from Zod so which kind of fields do we have well we have a title right here so

2289
04:06:29,000 --> 04:06:31,000
we can set that title to be a z. string with a Min so Min of three

2290
04:06:36,000 --> 04:06:38,000
characters and that Max of about let's do 100 characters let's add a

2291
04:06:42,000 --> 04:06:44,000
description Z that string. Min let's do something like 20 and 500 so that's

2292
04:06:49,000 --> 04:06:51,000
going to be a bit longer let's do a category which can be set to a z. string

2293
04:06:56,000 --> 04:06:58,000
as well with a Min three and Max 20 let's add a link which is going to be a

2294
04:07:02,000 --> 04:07:04,000
z. string. url. refine where we have a callback

2295
04:07:09,000 --> 04:07:11,000
function where you get the actual URL that the User submitted and then you can

2296
04:07:15,000 --> 04:07:17,000
do additional checks on it you can open up a new try and catch block which is going to look something like this and we

2297
04:07:22,000 --> 04:07:24,000
have to ensure that the URL provided is an actually valid image URL so we can

2298
04:07:28,000 --> 04:07:30,000
say constr is equal to await fetch.

2299
04:07:33,000 --> 04:07:35,000
URL with a method being set to head so we're not

2300
04:07:38,000 --> 04:07:40,000
fetching the actual contents the image we're just fetching the head to get access to its content type so we can say

2301
04:07:45,000 --> 04:07:47,000
const content type is equal to rest. headers

2302
04:07:50,000 --> 04:07:52,000
doget content-type once we get it we can check

2303
04:07:55,000 --> 04:07:57,000
if content type question mark. starts with image slash because it can be image

2304
04:08:03,000 --> 04:08:05,000
BNG JPEG and so on if it does we'll return true else will return false and

2305
04:08:12,000 --> 04:08:14,000
in the catch will also just return false because something went wrong so we're

2306
04:08:17,000 --> 04:08:19,000
doing some more complex validation to check whether the URL is correct and we

2307
04:08:22,000 --> 04:08:24,000
can make this function async because we're using a weight right here and it's saying that this if statement can be

2308
04:08:28,000 --> 04:08:30,000
simplified sure it can we can just return this because this function starts

2309
04:08:33,000 --> 04:08:35,000
with by itself returns true or false so check this out the same if statement can

2310
04:08:39,000 --> 04:08:41,000
be written just like this if it starts with it will return true else it will return false finally below the link we

2311
04:08:47,000 --> 04:08:49,000
have the pitch which is going to be a z. string of Min 10 characters and that Max

2312
04:08:57,000 --> 04:08:59,000
about let's think about it well we don't even have to provide a Max on that one it can be much longer so now we have our

2313
04:09:03,000 --> 04:09:05,000
form schema which we're exporting and we can use it back in the startup form so

2314
04:09:09,000 --> 04:09:11,000
let's dive into the handle form submit further by first making it accept a

2315
04:09:14,000 --> 04:09:16,000
previous state of the form which is going to be of a type any and form data

2316
04:09:20,000 --> 04:09:22,000
of a type form data then we can open up a new try and catch

2317
04:09:27,000 --> 04:09:29,000
blocks if there's an error we can return that error and we can also give it finally finally happens either way so

2318
04:09:34,000 --> 04:09:36,000
which code you want to run when either it fails or it succeeds so let's focus on the try first we can get access to

2319
04:09:41,000 --> 04:09:43,000
the form values by saying const form values is equal to an object or we can

2320
04:09:47,000 --> 04:09:49,000
specify how can our form data look like we'll get the title by saying form data.

2321
04:09:52,000 --> 04:09:54,000
getet title and we can say as string just to make sure that typescript is Happy next we can do a description and

2322
04:10:00,000 --> 04:10:02,000
set it to be equal to form data. getet description as a string we can repeat

2323
04:10:06,000 --> 04:10:08,000
the same thing for the category and we can repeat the same thing for the link link is form data. getet link as string

2324
04:10:15,000 --> 04:10:17,000
and finally we'll just set the pitch like this because we don't need to get it from the form as we're managing it as

2325
04:10:21,000 --> 04:10:23,000
a separate individual State now that we have the form values we want to validate those values by saying await form schema

2326
04:10:30,000 --> 04:10:32,000
which we just created which we're importing from validation parse

2327
04:10:36,000 --> 04:10:38,000
async form values okay so we want to take the form values and we want to

2328
04:10:42,000 --> 04:10:44,000
compare them with the form schema to see if they match if they do we can proceed by saying const result is equal to a

2329
04:10:50,000 --> 04:10:52,000
wait and here we can call a new mutation called create idea which right now

2330
04:10:57,000 --> 04:10:59,000
doesn't exist to which we can pass the pref state the form data and the pitch

2331
04:11:04,000 --> 04:11:06,000
for now I will comment it out and right below it we'll want to console log the result just to see how

2332
04:11:11,000 --> 04:11:13,000
well it works since we're using a weight here we have to turn this into a sync

2333
04:11:17,000 --> 04:11:19,000
and you can see that now tapescript is not complaining about the initial state but rather to use action State it'll fix

2334
04:11:23,000 --> 04:11:25,000
once we finish working on the handle form submit but for now we want to test out whether we actually get all of the

2335
04:11:29,000 --> 04:11:31,000
necessary values from the form when we submit it so let's actually consol log

2336
04:11:34,000 --> 04:11:36,000
the form values and save it we can give it a shot by filling all of these values

2337
04:11:39,000 --> 04:11:41,000
we'll have to sometimes use longer values because because we do have some validation put in place I'll enter test

2338
04:11:47,000 --> 04:11:49,000
right here and actually I'll enter htps colum test.com to see whether this will

2339
04:11:54,000 --> 04:11:56,000
succeed and we have some fake pitch so let's click submit it's

2340
04:12:01,000 --> 04:12:03,000
submitting okay check this out it cleared the form and said please check your input and try again pretty cool we

2341
04:12:09,000 --> 04:12:11,000
failed on the description and we failed because the URL wasn't a valid image

2342
04:12:15,000 --> 04:12:17,000
this was a pretty cool validation to be honest what we did for the image you can completely refine your validation and

2343
04:12:21,000 --> 04:12:23,000
you can do some more complex checking like the one we're doing here by checking whether this is an image or not

2344
04:12:27,000 --> 04:12:29,000
so now let's try to fill this properly by entering a few more characters here entering a category and I'll find some

2345
04:12:34,000 --> 04:12:36,000
image URL online such as by going to the deployed website and picking one from

2346
04:12:40,000 --> 04:12:42,000
here let me go with this one right here copy image address and I can paste it

2347
04:12:47,000 --> 04:12:49,000
and I'll enter just a test for the pitch right now and I'll make it a bit larger

2348
04:12:53,000 --> 04:12:55,000
there we go I'll bold it and give it a horizontal Rule and one horizontal rule

2349
04:12:58,000 --> 04:13:00,000
at the top okay let's submit our pitch submitting success your idea has been

2350
04:13:06,000 --> 04:13:08,000
created successfully oh this was not what we were supposed to take a look at I mean I mistakenly submitted the form

2351
04:13:13,000 --> 04:13:15,000
on the finished version of the YC directory app not the Local Host 3000 so

2352
04:13:19,000 --> 04:13:21,000
let's actually test it here but before that let's actually validate our inputs

2353
04:13:24,000 --> 04:13:26,000
we can do that by going into the catch right here and checking if error is an

2354
04:13:31,000 --> 04:13:33,000
instance of Z do Zod error like

2355
04:13:37,000 --> 04:13:39,000
this and we have to import Z coming from Zod there we go now this allow us to

2356
04:13:43,000 --> 04:13:45,000
check for the errors if it is an instance of that we then want to get

2357
04:13:49,000 --> 04:13:51,000
access to specific field Errors By setting that equal to error. flatten so

2358
04:13:56,000 --> 04:13:58,000
we'll flatten them all in a single array and say field

2359
04:14:02,000 --> 04:14:04,000
errors then we want to set errors to be equal to field errors as

2360
04:14:10,000 --> 04:14:12,000
unknown as record that'll have a string and string so this

2361
04:14:16,000 --> 04:14:18,000
is just for tab script to be happy and then we can return a previous state and

2362
04:14:23,000 --> 04:14:25,000
modify the error to say validation failed with a status equal

2363
04:14:32,000 --> 04:14:34,000
to error all uppercased like this so now we're properly throwing errors if it's

2364
04:14:39,000 --> 04:14:41,000
some other kind of error so not an instance off error right here then we

2365
04:14:44,000 --> 04:14:46,000
can just return the previous state the error saying something like an

2366
04:14:50,000 --> 04:14:52,000
unexpected error has occurred and then we can set the status to be set to error

2367
04:14:59,000 --> 04:15:01,000
great so now we're handling the catch and I don't even think we'll need the finally so I'll remove it for now so now

2368
04:15:06,000 --> 04:15:08,000
we can check whether the validation actually works I'll enter some things

2369
04:15:11,000 --> 04:15:13,000
right here category click submit okay we have to add a URL and if we click submit

2370
04:15:19,000 --> 04:15:21,000
nothing really happens it just clears the entire form oh and I think I know

2371
04:15:24,000 --> 04:15:26,000
why that is this function is never actually getting called because if you check the action of the form we're not

2372
04:15:32,000 --> 04:15:34,000
actually passing the form action which is the handle form submit so what we need to do is pass the form action right

2373
04:15:39,000 --> 04:15:41,000
here as the action that way when we submit the form this handle submit

2374
04:15:44,000 --> 04:15:46,000
function will actually be ran so let's one more time try to submit it with form

2375
04:15:49,000 --> 04:15:51,000
action like this and let's click submit it's submitting and there we go

2376
04:15:56,000 --> 04:15:58,000
now we get invalid URL input perfect that means that the validation is

2377
04:16:01,000 --> 04:16:03,000
actually working in case something goes wrong we can also show a shat CN toast

2378
04:16:07,000 --> 04:16:09,000
that'll be a little alert component saying that something went wrong to make that happen let's let's go to our

2379
04:16:15,000 --> 04:16:17,000
layout and this will be the layout not within the root but the general layout

2380
04:16:20,000 --> 04:16:22,000
this one right here and there right below the children we can add the

2381
04:16:25,000 --> 04:16:27,000
toaster component coming from components UI toaster and now back in the startup

2382
04:16:30,000 --> 04:16:32,000
form we can render a specific toast by first of all getting access to it at the top const toast is equal to use toast

2383
04:16:40,000 --> 04:16:42,000
which we have to import from hooks use toast and now we can trigger it at different point of our application such

2384
04:16:48,000 --> 04:16:50,000
as when there is an error when we set the errors we also want to show a toast that will have a title equal to

2385
04:16:56,000 --> 04:16:58,000
error it'll also have a description something like please check your inputs

2386
04:17:01,000 --> 04:17:03,000
and try again and we'll have a variant of destructive which means that it'll be a red error we can also copy it and

2387
04:17:09,000 --> 04:17:11,000
duplicate it right here below for or an unexpected error so that it can execute

2388
04:17:16,000 --> 04:17:18,000
before the return here we can just say an unexpected error has

2389
04:17:22,000 --> 04:17:24,000
occurred great finally we'll also do another toast if everything goes right

2390
04:17:28,000 --> 04:17:30,000
so right here below the Consol log of success we can say if result.

2391
04:17:35,000 --> 04:17:37,000
status is triple equal to success all uppercased then we can show a toast

2392
04:17:43,000 --> 04:17:45,000
that's going to say success with a description equal to your

2393
04:17:49,000 --> 04:17:51,000
startup pitch has been created successfully and below that once that

2394
04:17:54,000 --> 04:17:56,000
happens we actually want to reroute to that startup Details page so let's import the use router right here at the

2395
04:18:01,000 --> 04:18:03,000
top by saying const router is equal to use router coming from next navigation

2396
04:18:08,000 --> 04:18:10,000
and then right here below we can say router. push pointing to forward slash

2397
04:18:16,000 --> 04:18:18,000
startup SL result. ID because that's going to be the ID of our new startup

2398
04:18:23,000 --> 04:18:25,000
that's going to be within if result is Success so let's put it here and finally

2399
04:18:28,000 --> 04:18:30,000
we'll just return result to know that everything went right but for now we

2400
04:18:33,000 --> 04:18:35,000
want to comment this out because we don't yet have a function a mutation that will actually create the idea for

2401
04:18:39,000 --> 04:18:41,000
now we just want to see whether we get up to this point of the application where we actually get access to the form

2402
04:18:45,000 --> 04:18:47,000
values the user is trying to submit and I have to comment this part out so now

2403
04:18:51,000 --> 04:18:53,000
that we have the toaster and everything let's give it a shot I'll try to make it

2404
04:18:56,000 --> 04:18:58,000
fail One More Time by providing fake info and clicking submit yeah we can see

2405
04:19:02,000 --> 04:19:04,000
the description fails the image URL fails and the string must contain at least 10 characters fails as well so

2406
04:19:10,000 --> 04:19:12,000
let's now fix this I'll take in some some actual titles and descriptions like

2407
04:19:15,000 --> 04:19:17,000
skill Forge a platform that uses AI to create custom learning paths for individuals based on their

2408
04:19:22,000 --> 04:19:24,000
goals I'll also take a real image URL category can be something like edte

2409
04:19:30,000 --> 04:19:32,000
educational technology and for pitch details I will also take some prettier

2410
04:19:36,000 --> 04:19:38,000
looking markdown we can see how that looks like right here let's make sure to properly

2411
04:19:43,000 --> 04:19:45,000
bolded there we go this is looking better so let's click submit now and as

2412
04:19:49,000 --> 04:19:51,000
you can see we got a new conso log in the startup form that gave us all the information that we just filled in which

2413
04:19:55,000 --> 04:19:57,000
means that it's properly getting through we have a category description link pitch and a title everything needed to

2414
04:20:02,000 --> 04:20:04,000
actually submit a startup which means we are ready to take this form data and pass it into a new server action called

2415
04:20:09,000 --> 04:20:11,000
create idea which will submit that startup and we'll do that in the next lesson but for now let's sum up what

2416
04:20:16,000 --> 04:20:18,000
we've learned in this one you'll learn how to use the newest use action State hook that allows you to update the state

2417
04:20:23,000 --> 04:20:25,000
of the form based on the result of a form action it Returns the state the form action and the is pending State and

2418
04:20:30,000 --> 04:20:32,000
to it you have to pass the submit Handler the initial State and another optional parameter but as with anything

2419
04:20:37,000 --> 04:20:39,000
in life it has its good and bad sides L Rob one of the public developer ERS ad

2420
04:20:43,000 --> 04:20:45,000
verell who's teaching about react nijs and the web shared his views on the Ed

2421
04:20:49,000 --> 04:20:51,000
action State The Good The Bad and The Unknown react 19 is making data

2422
04:20:54,000 --> 04:20:56,000
mutations easier you can call an action on the client or server and have built in hooks for pending States handling

2423
04:21:01,000 --> 04:21:03,000
errors optimistic updates and more you're able to write less user code a lot of which was previously boilerplate

2424
04:21:08,000 --> 04:21:10,000
and hopefully can create better uis with these abstractions the good being that one of the hooks you can call is called

2425
04:21:14,000 --> 04:21:16,000
use action State and if you're using the nextjs app router you might have seen the use form state but now that is the

2426
04:21:21,000 --> 04:21:23,000
updated version of that as we've learned overall the hook works well as intended

2427
04:21:26,000 --> 04:21:28,000
and definitely contains less code than you would typically need for a form but there are also some downsides like it

2428
04:21:33,000 --> 04:21:35,000
feels like it's fighting typescript often when you move from calling a form directly to using use action State this

2429
04:21:39,000 --> 04:21:41,000
changes the function signature export Asing function save action to export async function save action with the

2430
04:21:46,000 --> 04:21:48,000
previous state and the new form data not a big deal right but something that is a bit of a bigger deal especially for me

2431
04:21:53,000 --> 04:21:55,000
is that I haven't yet figured out the most common use cases regarding the previous state but one of the bigger

2432
04:22:00,000 --> 04:22:02,000
downsides for me is that server actions will automatically reset the form on submission which is nice sometimes but

2433
04:22:08,000 --> 04:22:10,000
not always what you want which is what you were able to see in our case as soon as we submit it it actually cleared all

2434
04:22:15,000 --> 04:22:17,000
the fields exactly what he says next if there's an error in your action and you return some object you ideally don't

2435
04:22:21,000 --> 04:22:23,000
want to blow away the client side values in your form instead you want to retain those values and maybe show an error

2436
04:22:28,000 --> 04:22:30,000
message under the input since the default behavior is to reset the form you have to save all of the form input

2437
04:22:33,000 --> 04:22:35,000
values into use action State and then derive those values from that state in the component so with that in mind I'm

2438
04:22:40,000 --> 04:22:42,000
sure that the use action state will evolve and grow but for the time being it is definitely a welcomed Improvement

2439
04:22:47,000 --> 04:22:49,000
in how we're dealing with forms in the newest versions of react and Server Action

2440
04:22:52,000 --> 04:22:54,000
nextjs to submit our startup we'll have to do it through a mutation through a

2441
04:22:58,000 --> 04:23:00,000
server action server actions can be defined by using react use server

2442
04:23:03,000 --> 04:23:05,000
directive you can place them at the top of an async function or Mark the entire

2443
04:23:09,000 --> 04:23:11,000
file as use server something like this where you can have multiple server actions in a single file understanding

2444
04:23:15,000 --> 04:23:17,000
server actions is still incredibly relevant in all new versions of nextjs and if you don't really know what a

2445
04:23:22,000 --> 04:23:24,000
server action is I go into much more depth about them in this video which I'll link below teaching you how to

2446
04:23:28,000 --> 04:23:30,000
develop serers side applications with server actions and even teaching you how to build a simple application using them

2447
04:23:35,000 --> 04:23:37,000
so pause this video and watch this first if you don't really know what the heck are server actions but if you do know a

2448
04:23:42,000 --> 04:23:44,000
bit about them and you want to proceed right away that's totally okay we can do that let's go over to lib and create a

2449
04:23:49,000 --> 04:23:51,000
new file called actions. TS within there as you know you can

2450
04:23:57,000 --> 04:23:59,000
immediately put a use server directive at the top because all of these functions will be rendered on the server

2451
04:24:05,000 --> 04:24:07,000
so let's create our first server action by exporting it and declaring it as create idea or you can call it create

2452
04:24:13,000 --> 04:24:15,000
pitch I think that makes a bit more sense and let's set it equal to an async

2453
04:24:19,000 --> 04:24:21,000
function that looks something like this it'll accept a

2454
04:24:25,000 --> 04:24:27,000
state as any and form as form

2455
04:24:31,000 --> 04:24:33,000
data as well as a pitch itself of a type string next we also have to get info

2456
04:24:38,000 --> 04:24:40,000
about the user who is submitting it so let's get access to the active session by saying session is equal to await o

2457
04:24:46,000 --> 04:24:48,000
and we need to import o coming from next off or rather add for

2458
04:24:52,000 --> 04:24:54,000
SL off if there is no session we can just return an object with an error saying

2459
04:25:01,000 --> 04:25:03,000
not signed in and a status of error but you can just return objects like this

2460
04:25:09,000 --> 04:25:11,000
what you have to do is wrap them in json. pars but first they have to be

2461
04:25:15,000 --> 04:25:17,000
wrapped in json. stringify like this so just so we don't repeat this Json parse

2462
04:25:21,000 --> 04:25:23,000
Json stringify every time let's actually create a new utility function right

2463
04:25:27,000 --> 04:25:29,000
below the format date we can say export function parse server action response

2464
04:25:35,000 --> 04:25:37,000
which will be of a type T it'll take in a response of a type t as well and it'll

2465
04:25:43,000 --> 04:25:45,000
return json.parse json. stringify and then whatever

2466
04:25:48,000 --> 04:25:50,000
response we pass into it now this allows us to very easily call it and wrap any

2467
04:25:55,000 --> 04:25:57,000
object we want to call directly with this new utility function which we have created perfect now that we have covered

2468
04:26:02,000 --> 04:26:04,000
the edge case if our user is not authenticated let's try to destructure

2469
04:26:07,000 --> 04:26:09,000
all the values from the form by saying const title

2470
04:26:13,000 --> 04:26:15,000
description category and the link is equal to object Dot from entries because

2471
04:26:20,000 --> 04:26:22,000
it's all within an object and then out of that we can form array Dot from form

2472
04:26:28,000 --> 04:26:30,000
and we want to filter each property where key is not equal to pitch so we

2473
04:26:35,000 --> 04:26:37,000
only want to keep the pitch even though this might seem a bit complicated it's the simplest way that I found it that

2474
04:26:40,000 --> 04:26:42,000
works we keep the title The description category in the link and then we get the pitch from here finally we also have to

2475
04:26:47,000 --> 04:26:49,000
form a slug and a slug is basically a unique identifier for that specific

2476
04:26:53,000 --> 04:26:55,000
startup you could generate it randomly but I found this package called slugify

2477
04:26:58,000 --> 04:27:00,000
which is very minimal works very well it just basically creates a meaningful slug

2478
04:27:03,000 --> 04:27:05,000
for each post so let's simply install it by running mpm install slugify and we

2479
04:27:11,000 --> 04:27:13,000
can say con is equal to slugify to which we can pass title as string and we can

2480
04:27:18,000 --> 04:27:20,000
provide additional options as lower is true and strict is true as well finally

2481
04:27:25,000 --> 04:27:27,000
now that we have all the info such as the title description category link pitch and then the slug as well we can

2482
04:27:32,000 --> 04:27:34,000
open up a try and catch block let's first handle the catch where we're going

2483
04:27:38,000 --> 04:27:40,000
to consol log the error so we know that something went wrong and we'll also

2484
04:27:43,000 --> 04:27:45,000
return a parse server action response where the error will be equal

2485
04:27:50,000 --> 04:27:52,000
to json.stringify error and the status will be set to

2486
04:27:55,000 --> 04:27:57,000
error and now for the try we have everything needed to form a startup so

2487
04:28:01,000 --> 04:28:03,000
let's do that con startup is equal to an object that has a title a

2488
04:28:09,000 --> 04:28:11,000
description a category an image which is going to be a link a slug of a type Slug

2489
04:28:18,000 --> 04:28:20,000
and current value of slug make sure you put the underscore here for the type we

2490
04:28:23,000 --> 04:28:25,000
also have the author so we have to connect the startup to the author which is going to be underscore type is equal

2491
04:28:30,000 --> 04:28:32,000
to reference and the actual underscore ref will point to the session question mark.

2492
04:28:36,000 --> 04:28:38,000
ID which is the ID of our author and finally the pitch which is the mark.

2493
04:28:42,000 --> 04:28:44,000
content let's see if slugify has been imported properly we have to say import

2494
04:28:47,000 --> 04:28:49,000
slugify from slugify there we go and now we can write to

2495
04:28:55,000 --> 04:28:57,000
sanity client to create it by saying const result is equal to await write

2496
04:29:02,000 --> 04:29:04,000
client. create a document with an underscore type equal

2497
04:29:09,000 --> 04:29:11,000
to Startup and we will simply spread out all of the startup values directly

2498
04:29:15,000 --> 04:29:17,000
within this document which we're creating within the object once we get the result we can simply return a parse

2499
04:29:22,000 --> 04:29:24,000
server action response where we spread out the result error will be set to an

2500
04:29:28,000 --> 04:29:30,000
empty string and Status will be set to success there we go so basically what

2501
04:29:35,000 --> 04:29:37,000
we're doing is this we are getting the necessary params such as the form data

2502
04:29:41,000 --> 04:29:43,000
and the pitch which is also kind of like form data but it's in a bit of a different format in markdown or a string

2503
04:29:48,000 --> 04:29:50,000
in this case then we extract this session because we need to know who is

2504
04:29:53,000 --> 04:29:55,000
the author of the startup we check whether a session exists we extract all

2505
04:29:58,000 --> 04:30:00,000
the values from the form we create a slug we take all of those pieces of data

2506
04:30:04,000 --> 04:30:06,000
including the form data the generated slug the author and the pitch itself and

2507
04:30:10,000 --> 04:30:12,000
we write to sanity to actually create it in the database and then we return it

2508
04:30:15,000 --> 04:30:17,000
back and this is called create pitch so now we can go back to the startup form

2509
04:30:22,000 --> 04:30:24,000
and we can uncomment our lines right here but instead of create idea I'll

2510
04:30:28,000 --> 04:30:30,000
rename it to create pitch and there we go I don't think I even need to consol

2511
04:30:33,000 --> 04:30:35,000
log the result or the form values because we will see the toast hopefully

2512
04:30:39,000 --> 04:30:41,000
and we'll be redirected to that startup detail if the creation is successful so let's

2513
04:30:44,000 --> 04:30:46,000
go ahead and test it together one more time I will use the values from a real startup skill Forge which is an AI

2514
04:30:52,000 --> 04:30:54,000
platform that uses AI to create learning paths I'll grab in the image address and

2515
04:30:58,000 --> 04:31:00,000
the category can be set to something like edtech and finally I will add the pitch

2516
04:31:04,000 --> 04:31:06,000
details right here and maybe make this skill Forge a bit larger let's see there

2517
04:31:11,000 --> 04:31:13,000
we go this is looking good so let's submit our pitch it's

2518
04:31:18,000 --> 04:31:20,000
submitting and we got redirected to a 404 which is a good thing because for a

2519
04:31:24,000 --> 04:31:26,000
second there we saw your startup was created successfully if you head over to localhost 3000 Studio you should be able

2520
04:31:32,000 --> 04:31:34,000
to see skill Forge or in your case whatever title you used indicating that the new startup has been successfully

2521
04:31:39,000 --> 04:31:41,000
created from the form within our application and it should already be visible on the homepage but I'm

2522
04:31:45,000 --> 04:31:47,000
wondering why didn't redirect us to The Details page of that startup well it's because the URL says undefined that

2523
04:31:52,000 --> 04:31:54,000
means that this result ID was also undefined so why is that oh the result

2524
04:31:59,000 --> 04:32:01,000
has an underscore ID and not an ID so this little fix should actually make it

2525
04:32:04,000 --> 04:32:06,000
work great but for now let's manually navigate to homepage and hopefully the

2526
04:32:09,000 --> 04:32:11,000
new startup will appear right here there we go keep in mind that it can take up to 60 seconds and you might need to

2527
04:32:16,000 --> 04:32:18,000
clear the cache because it's pulling it from a CDN but once it actually updates you can see it here you can go to its

2528
04:32:23,000 --> 04:32:25,000
Details page and would you look at that we have successfully created a real

2529
04:32:29,000 --> 04:32:31,000
startup and if you reload you should be able to see that the number of views is one and it'll continue increasing great

2530
04:32:36,000 --> 04:32:38,000
I'll quickly head back over to sanity Studio to delete the fake startups we

2531
04:32:41,000 --> 04:32:43,000
had created with a fake user so it was just Adrien not a real user so let's go

2532
04:32:47,000 --> 04:32:49,000
ahead and delete these three documents because we now have the

2533
04:32:52,000 --> 04:32:54,000
possibility to create new ones coming directly from the platform there we go and I'll delete

2534
04:33:00,000 --> 04:33:02,000
this one as well finally we can go under authors and you can delete this fake author that we

2535
04:33:06,000 --> 04:33:08,000
have initially created because now we have real one authenticated with next author

2536
04:33:12,000 --> 04:33:14,000
using GitHub ooth and with that we only have one startup we have the ability to

2537
04:33:18,000 --> 04:33:20,000
search for startups skill Forge there we go or we can clear it and we can now

2538
04:33:23,000 --> 04:33:25,000
create startups the majority of the functionality has already been implemented but of course we'll continue

2539
04:33:30,000 --> 04:33:32,000
until this actually feels like a real SAS application that allows entrepreneurs to pitch their startups so

2540
04:33:37,000 --> 04:33:39,000
if you want to take a bit of a pause now would be a perfect time to do so you deserved it take a pause go for a walk

2541
04:33:45,000 --> 04:33:47,000
or go to sleep if watching this late at night and come back Performance & Bug Tracking in Next.js Apps w/ Sentry

2542
04:33:50,000 --> 04:33:52,000
soon now that some of our apps major functionalities have been successfully implemented it's time to make sure that

2543
04:33:57,000 --> 04:33:59,000
hundreds of thousands of users that will use them don't break them and to make sure that doesn't happen we'll use

2544
04:34:04,000 --> 04:34:06,000
Sentry the best application monitoring software considered not bad by more than

2545
04:34:10,000 --> 04:34:12,000
4 million Developers click the link in the description to follow along and see exactly what I'm seeing then create your

2546
04:34:17,000 --> 04:34:19,000
account once you do you'll be redirected either to the dashboard or to the onboarding if you're already using

2547
04:34:24,000 --> 04:34:26,000
sanity to track your production level applications like I am then you'll be in your dashboard but in this case we want

2548
04:34:30,000 --> 04:34:32,000
to start from scratch so in your url after your Sentry account name simply type on boarding which will open up this

2549
04:34:37,000 --> 04:34:39,000
nice welcome to Sentry your code is probably broken maybe not not let's find out on boarding process so let's go

2550
04:34:45,000 --> 04:34:47,000
ahead and click install Sentry choose nextjs as your framework of choice and

2551
04:34:51,000 --> 04:34:53,000
let's configure it together you'll have to copy this command and then head over to package Json and in the same way that

2552
04:35:00,000 --> 04:35:02,000
we have overrides for react and react Dom versions I'll add another override

2553
04:35:05,000 --> 04:35:07,000
for the version of nextjs so simply say next dollar sign next this will ensure

2554
04:35:12,000 --> 04:35:14,000
that Sentry uses the same version of nextjs that we're using in our project now you can open up the

2555
04:35:20,000 --> 04:35:22,000
terminal and paste the command we copy from sanity right here feel free to change the name of the project in our

2556
04:35:26,000 --> 04:35:28,000
case I'll use YC directory and press enter then press y or enter say that we

2557
04:35:34,000 --> 04:35:36,000
do have a Sentry account and you can choose this project right here and click continue There we go you can select the

2558
04:35:41,000 --> 04:35:43,000
existing project and Sentry is being installed with mpm it'll then ask you

2559
04:35:47,000 --> 04:35:49,000
whether you want to Route Sentry requests in the browser through an xgs server in this case I'll say no as this

2560
04:35:53,000 --> 04:35:55,000
can increase the server bill it's not like we're going to get charged or anything as Sentry has a very generous

2561
04:35:59,000 --> 04:36:01,000
completely free tier but it's nice how they said we'll leave this option commented for later just in case I swear

2562
04:36:06,000 --> 04:36:08,000
Sentry has one of the best developer experiences out there do you want to enable react and an notations in this

2563
04:36:12,000 --> 04:36:14,000
case we can say sure yeah do it do you want to enable tracing yep why not

2564
04:36:18,000 --> 04:36:20,000
Sentry session replay yep let's enable it do you want to create an example page

2565
04:36:24,000 --> 04:36:26,000
yes let's do it are you using cicd tool yeah we'll be using versell later on so

2566
04:36:29,000 --> 04:36:31,000
let's say yes and it's giving us a Sentry o token which you can copy now and press yes continue and there we go

2567
04:36:37,000 --> 04:36:39,000
successfully installed the Sentry nextjs SDK you can validate your setup by

2568
04:36:42,000 --> 04:36:44,000
restarting your Dev environment and then visiting Sentry example page so let's do

2569
04:36:47,000 --> 04:36:49,000
just that I'll head over to Local Host 3000 SL centy Das example- page and there we go

2570
04:36:55,000 --> 04:36:57,000
this is a page that was added to our application by Sentry and for the first time ever I'm going to purposefully

2571
04:37:01,000 --> 04:37:03,000
throw an error just to make sure that Sentry is actually watching over us and alerting us about those errors there we

2572
04:37:09,000 --> 04:37:11,000
go error has been thrown and now at the bottom you can see error received so let's check out the error in our project

2573
04:37:15,000 --> 04:37:17,000
dashboard and there we go it might take up to a minute for this error to appear but there we go sentury example error

2574
04:37:23,000 --> 04:37:25,000
four events priority high and you can now get into it to see more details

2575
04:37:28,000 --> 04:37:30,000
first of all you're getting additional information on where this error happened unhandled Sentry example API route error

2576
04:37:36,000 --> 04:37:38,000
and here's what's cool about it right now sure we could debug this error they directly within our browser or dive into

2577
04:37:43,000 --> 04:37:45,000
code and fix it super simple right but the problem occurs when a user breaks

2578
04:37:50,000 --> 04:37:52,000
your application and typically no matter how much you test users will always end

2579
04:37:56,000 --> 04:37:58,000
up breaking it so when they do break it imagine how painful it is to ask them to

2580
04:38:01,000 --> 04:38:03,000
open up the console and send out a screenshot of what they're seeing then they're not going to copy and paste it

2581
04:38:07,000 --> 04:38:09,000
they're going to take a photo of it with their phone and debugging it will be super hard so for that reason Sentry

2582
04:38:15,000 --> 04:38:17,000
simplifies tracking and resolution of those errors by giving you event highlights of how the error has happened

2583
04:38:22,000 --> 04:38:24,000
it happened in the development environment on this specific URL by doing this specific transaction on this

2584
04:38:30,000 --> 04:38:32,000
specific browser we can also see the line of code pointing to that error and even the version of the operating system

2585
04:38:37,000 --> 04:38:39,000
and the device that a user was using it also gives some additional information such as as the browser version device

2586
04:38:44,000 --> 04:38:46,000
architecture I mean this is pretty crazy stuff that's going to allow you to debug

2587
04:38:49,000 --> 04:38:51,000
your applications much more simply and think about it 100 users are going to have 100 different devices and 100

2588
04:38:55,000 --> 04:38:57,000
different browsers so being able to track first of all and then debug just

2589
04:39:00,000 --> 04:39:02,000
makes your applications so much more scalable you can also view the full Trace right here and see exactly how the

2590
04:39:07,000 --> 04:39:09,000
error has happened and for some types of issues like this Cent example frontend

2591
04:39:13,000 --> 04:39:15,000
error you can actually check out the replay there it is so if I play it first of all you can see that all the

2592
04:39:19,000 --> 04:39:21,000
characters are just asterisks because Sentry wants to protect the privacy of the user breaking your site but you can

2593
04:39:26,000 --> 04:39:28,000
still see what they were doing at the moment when they actually broke it you can see exactly which pieces of UI they

2594
04:39:33,000 --> 04:39:35,000
were clicking with which headers and on which URL that allows you to go back to

2595
04:39:38,000 --> 04:39:40,000
the code and fix it once you deploy a hot fix just go ahead and click resolve

2596
04:39:44,000 --> 04:39:46,000
but of course as the application grows and gets more users as we can see right here you'll get so many monitoring and

2597
04:39:50,000 --> 04:39:52,000
tracking features provided to you by Sentry simply put you can see which Pages your users are breaking the most

2598
04:39:57,000 --> 04:39:59,000
this Trace view is super useful of course I don't even have to mention how useful the replays are for example let's

2599
04:40:04,000 --> 04:40:06,000
check out the user that had most dead clicks and let's set the time span to last 30 days let's check out this user

2600
04:40:11,000 --> 04:40:13,000
for example this one is a bit crazy Windows 10 plus on the Opera browser they were actually exploring the

2601
04:40:17,000 --> 04:40:19,000
healthcare application that I created not that long ago you can see exactly what they were doing even though

2602
04:40:23,000 --> 04:40:25,000
everything is completely blurred so if the error has occurred we would have known we can see exactly which elements

2603
04:40:30,000 --> 04:40:32,000
they were clicking and and we can also see what was happening in the console and the network tab of their browser

2604
04:40:36,000 --> 04:40:38,000
this makes the debugging process super simple along replays there's also performance that allows you to track how

2605
04:40:43,000 --> 04:40:45,000
quickly certain pages are loading for your users so that way you can figure out if some pages are loading slowly for

2606
04:40:50,000 --> 04:40:52,000
whatever reason you can also very quickly add a user feedback model so that good users that don't break your

2607
04:40:56,000 --> 04:40:58,000
application can report bugs on their own as a matter of fact let's go ahead and add it together right now I'll simply

2608
04:41:02,000 --> 04:41:04,000
click setup now and we just have to add this part to the Sentry client config so

2609
04:41:08,000 --> 04:41:10,000
let's copy this entire thing head over to Sentry client config and under

2610
04:41:13,000 --> 04:41:15,000
Integrations along replay we can also add this one here Sentry do feedback

2611
04:41:21,000 --> 04:41:23,000
integration if you do that and go back to your application check this out a new report a buug floating button appeared

2612
04:41:28,000 --> 04:41:30,000
at the bottom right you can click it enter your name and email add a screenshot of the bug and then say the

2613
04:41:36,000 --> 04:41:38,000
search isn't working for me just an example and we can send the bug report

2614
04:41:41,000 --> 04:41:43,000
in an instant then if you go back to the user feedback part of your dashboard and reload you can immediately see a new

2615
04:41:48,000 --> 04:41:50,000
ticket raised right here the search isn't working for me but it's not like you're only getting this text or a

2616
04:41:54,000 --> 04:41:56,000
screenshot you're getting much more like the URL they were on the replay that was happening before they actually sent the

2617
04:42:01,000 --> 04:42:03,000
message and all of the things that we have explored previously such as browser and more information and you can also

2618
04:42:07,000 --> 04:42:09,000
immediately track this issue in jira GitHub or any other platform there's also some generic stats so you can see

2619
04:42:14,000 --> 04:42:16,000
how good your app is behaving but in general that is it I don't want to bore you with a lot of other details what I

2620
04:42:20,000 --> 04:42:22,000
really wanted to say is that if you only add Sentry to your app for which the setup literally took like 10 presses of

2621
04:42:27,000 --> 04:42:29,000
the enter key and 3 minutes already you're making your app so much more secure less error prone and more bug

2622
04:42:35,000 --> 04:42:37,000
free and if this is looking too good to be true I mean let's check out their pricing for s devs working on small

2623
04:42:42,000 --> 04:42:44,000
projects it is completely free you're one user and you get all the error monitoring and tracing that we talked

2624
04:42:49,000 --> 04:42:51,000
about if you're going to be the only Dev using it that's more than enough so great job implementing Sentry and making

2625
04:42:56,000 --> 04:42:58,000
our app that much more bug-free for our users to enjoy I was planning to end this chapter here but then I stopped

2626
04:43:02,000 --> 04:43:04,000
recording and went to check out my email and I just had to show this to you as well while we were testing and our users

2627
04:43:10,000 --> 04:43:12,000
were breaking the app Sentry actually sent out an email alerting us about

2628
04:43:15,000 --> 04:43:17,000
those issues in real time so as soon as the error happened we immediately got

2629
04:43:21,000 --> 04:43:23,000
all the important information about the error including the tags we talked about earlier letting us know exactly what

2630
04:43:27,000 --> 04:43:29,000
broke so this is the type of thing that if you're running a serious SAS application and there's a breaking bug

2631
04:43:34,000 --> 04:43:36,000
you want to be able to fix it as soon as possible so it's good to know that this is offered too now onto the next chapter User Profile

2632
04:43:43,000 --> 04:43:45,000
next let's create a user profile route we can do that by opening the file

2633
04:43:49,000 --> 04:43:51,000
explorer going to root and creating a new folder called user within it create

2634
04:43:56,000 --> 04:43:58,000
another folder called ID within the square brackets this is a dynamic route

2635
04:44:01,000 --> 04:44:03,000
as you already know and then create a new file called page. DSX run RFC inside

2636
04:44:09,000 --> 04:44:11,000
of there and as soon as you save it you'll be able to click on your profile to actually navigate you to a profile

2637
04:44:16,000 --> 04:44:18,000
page there we go so before we start with the UI let's actually fetch the user

2638
04:44:21,000 --> 04:44:23,000
details right here at the top I will destructure the params of this page and

2639
04:44:27,000 --> 04:44:29,000
I'll specify the type perams is going to be of a type perams which is a promise

2640
04:44:34,000 --> 04:44:36,000
that contains an ID of a type string something like this then we we can extract the ID from

2641
04:44:42,000 --> 04:44:44,000
it by saying ID is equal to await per

2642
04:44:48,000 --> 04:44:50,000
rams. ID and since we're using a weight we have to add a sync right here next we

2643
04:44:54,000 --> 04:44:56,000
can get the session by saying con session is equal to a wait o and we also

2644
04:45:00,000 --> 04:45:02,000
have to import o from add SLO next we can fetch the user by saying

2645
04:45:07,000 --> 04:45:09,000
const user is await client. not fetch and this client of course is referring

2646
04:45:14,000 --> 04:45:16,000
to a sanity client and we have author by GitHub ID query to which we're going to

2647
04:45:21,000 --> 04:45:23,000
pass the ID finally we can check if a user doesn't exist we can return a not

2648
04:45:28,000 --> 04:45:30,000
found which is going to navigate us to a404 but as you can see here we get a404

2649
04:45:34,000 --> 04:45:36,000
this query isn't really going to cut it it's getting the author by GitHub ID which is called ID but in here we have

2650
04:45:42,000 --> 04:45:44,000
to get a user by its own ID by the author ID so let's duplicate this entire

2651
04:45:48,000 --> 04:45:50,000
query and let's just rename it a bit to getting the author by ID query and we're

2652
04:45:58,000 --> 04:46:00,000
going to refer to the underscore ID property so the only thing we have to change is this underscore ID once you do

2653
04:46:06,000 --> 04:46:08,000
that and replace this query and remove the one that we just imported

2654
04:46:11,000 --> 04:46:13,000
you'll see that now we'll still be on the same page without getting redirected to a

2655
04:46:16,000 --> 04:46:18,000
404 that means that we actually have the user and we can start creating the UI

2656
04:46:21,000 --> 04:46:23,000
for the user Details page let's start by turning everything into a react fragment

2657
04:46:27,000 --> 04:46:29,000
within which we will have a section this section will have a class name equal to

2658
04:46:34,000 --> 04:46:36,000
profile uncore container and within this section we'll have another div with a

2659
04:46:40,000 --> 04:46:42,000
class CL name equal to profile card and within it we'll have

2660
04:46:46,000 --> 04:46:48,000
another div with a class name equal to profile undor title within which we will

2661
04:46:54,000 --> 04:46:56,000
have an H3 element that'll have a class name equal

2662
04:46:59,000 --> 04:47:01,000
to text- 24- Black uppercase and text- center and ending it

2663
04:47:07,000 --> 04:47:09,000
with line clamp one so it doesn't go into multiple rows within there we can render the user.name

2664
04:47:14,000 --> 04:47:16,000
if I save this we get this funky UI that says Adrian JS Mastery for you it's

2665
04:47:20,000 --> 04:47:22,000
going to be something different and if you're wondering how did we accomplish the styles to achieve this funky UI you

2666
04:47:26,000 --> 04:47:28,000
can just search for profile title or profile card and see exactly which styles are getting applied now let's go

2667
04:47:33,000 --> 04:47:35,000
below the H3 and below the div and create a next GS image this image will

2668
04:47:39,000 --> 04:47:41,000
have a source equal to user. image with an ALT tag of user.name

2669
04:47:45,000 --> 04:47:47,000
a width of 220 a height of 220 and a

2670
04:47:51,000 --> 04:47:53,000
class name of profile uncore image and there we go this one got pulled directly

2671
04:47:57,000 --> 04:47:59,000
from my GitHub this is kind of a face reveal I'm standing right here next to my GitHub star at the GitHub Universe

2672
04:48:04,000 --> 04:48:06,000
conference going below this image let's render a P tag with a class name equal

2673
04:48:10,000 --> 04:48:12,000
to text- 30 extra bold margin top of

2674
04:48:16,000 --> 04:48:18,000
seven and text- Center we can render at and then user question mark. username

2675
04:48:22,000 --> 04:48:24,000
perfect right below this P tag let's create another P tag with a class name

2676
04:48:27,000 --> 04:48:29,000
of margin top of one text- Center and text -4- normal within which we can render

2677
04:48:35,000 --> 04:48:37,000
user question mark. bio in this case you should be able to see nextjs and iast

2678
04:48:41,000 --> 04:48:43,000
and educator for you it's going to be something else let's go below this div and let's create another div with a

2679
04:48:49,000 --> 04:48:51,000
class name equal to flex D1 Flex

2680
04:48:56,000 --> 04:48:58,000
flex-all gap of five and then extra large devices minus margin top of five

2681
04:49:03,000 --> 04:49:05,000
within which we can render a P tag with a class name equal to text D30 - bold

2682
04:49:11,000 --> 04:49:13,000
and there if the session question mark. ID is equal to the ID of the currently

2683
04:49:17,000 --> 04:49:19,000
logged in user then we can say your else we can say all and then we can render

2684
04:49:25,000 --> 04:49:27,000
the word startups So currently I am on my profile

2685
04:49:30,000 --> 04:49:32,000
and you'll be able to see your startups but if we were on somebody else's profile you would be able to see other

2686
04:49:37,000 --> 04:49:39,000
startups or rather all startups next we can render a UL which is an unordered

2687
04:49:43,000 --> 04:49:45,000
list with a class name of cardor grid

2688
04:49:48,000 --> 04:49:50,000
DSM and here we'll render a list of this user's startups so user startups and

2689
04:49:57,000 --> 04:49:59,000
we'll do that very soon but before we do I want to explain that this is the

2690
04:50:02,000 --> 04:50:04,000
perfect use case for PPR all the user info you're seeing here such as the name

2691
04:50:09,000 --> 04:50:11,000
username bu and profile photo can be statically rendered for a longer time

2692
04:50:15,000 --> 04:50:17,000
but the user created startups have to be dynamic so here we'll want to enable PPR

2693
04:50:22,000 --> 04:50:24,000
I'm going to go right at the top and say export const experimental undor PPR is set to true

2694
04:50:30,000 --> 04:50:32,000
and I think you can slowly start seeing the exact use cases where PPR might come

2695
04:50:35,000 --> 04:50:37,000
in handy whenever you have some static data like we have explored the the product

2696
04:50:41,000 --> 04:50:43,000
details before but recommended products because they have to be recommended by some kind of dynamic algorithm or maybe

2697
04:50:48,000 --> 04:50:50,000
Dynamic shipping those things have to be dynamic same thing here the new user startups have to be

2698
04:50:56,000 --> 04:50:58,000
dynamic so now let's create a new component in the components folder and I'll call it user

2699
04:51:05,000 --> 04:51:07,000
startups do DSX I'll run rafc

2700
04:51:12,000 --> 04:51:14,000
and I'll import it right here in this unordered list I'll render user startups

2701
04:51:19,000 --> 04:51:21,000
as a self-closing component and you can see it appear right here now that we have this component we also have to

2702
04:51:25,000 --> 04:51:27,000
create a query that would allow us to fetch all the startups created specifically by that user so let's copy

2703
04:51:33,000 --> 04:51:35,000
one of the startup queries it can be this one here startup squarey the first one we have ever created copy it

2704
04:51:41,000 --> 04:51:43,000
paste it right here below rename it to

2705
04:51:46,000 --> 04:51:48,000
startups by author query here we're searching for a startup but now we're

2706
04:51:53,000 --> 04:51:55,000
going to remove this part all the way up to here yeah we're going to remove this

2707
04:51:59,000 --> 04:52:01,000
entire part we're just going to keep the order okay so we're going to say and author

2708
04:52:07,000 --> 04:52:09,000
doore ref is equal to do sign ID so we're comparing it to the author we're

2709
04:52:14,000 --> 04:52:16,000
searching for and we will still order it created at descending and then we want

2710
04:52:19,000 --> 04:52:21,000
to return all of the information that we previously returned great so now we can

2711
04:52:25,000 --> 04:52:27,000
copy the name of that and go back and we can import it right here by saying const

2712
04:52:31,000 --> 04:52:33,000
startups is equal to await client referring to sanity client.

2713
04:52:38,000 --> 04:52:40,000
fetch startups by query and then we pass the ID of the

2714
04:52:44,000 --> 04:52:46,000
author we're searching for and how do we get the ID into this component well we

2715
04:52:49,000 --> 04:52:51,000
can pass it as a prop ID is equal to ID so we can very quickly get it right here

2716
04:52:55,000 --> 04:52:57,000
through props by saying ID and specifying that this ID is of a type

2717
04:53:01,000 --> 04:53:03,000
string since we're using a weight we have to turn this into a synchronous

2718
04:53:07,000 --> 04:53:09,000
function and we get access to startups right here finally we can return an empty react

2719
04:53:15,000 --> 04:53:17,000
fragment where we're checking if startups that length is greater than

2720
04:53:22,000 --> 04:53:24,000
zero then we can return posts or startups do map where we get each

2721
04:53:29,000 --> 04:53:31,000
individual startup of a type startup card type which we'll have to import and

2722
04:53:36,000 --> 04:53:38,000
for each one we automatically return just by using parenthesis is a startup

2723
04:53:43,000 --> 04:53:45,000
card a startup card has to get a key because we're mapping over it of post do

2724
04:53:49,000 --> 04:53:51,000
dollar Sun ID and the post itself which will be equal to Startup now let's

2725
04:53:55,000 --> 04:53:57,000
properly import the startup card type which can come right here from startup

2726
04:54:00,000 --> 04:54:02,000
card let's see how did we call it in there startup type card there we go I fixed it and here I'm going to also

2727
04:54:07,000 --> 04:54:09,000
refer to this as a startup doore ID and of course we have to have the

2728
04:54:13,000 --> 04:54:15,000
second part of the turnery which is going to just render a P tag with a class name of no result and it'll say no

2729
04:54:22,000 --> 04:54:24,000
posts yet let's make sure that we properly indented right here there we go

2730
04:54:28,000 --> 04:54:30,000
I got it let's see why is it complaining I'll try to reload the server to see if that fixes it oh but

2731
04:54:36,000 --> 04:54:38,000
the error is still there and you know what this might be

2732
04:54:41,000 --> 04:54:43,000
we missed one thing we're doing a fetch right here and we're using it within a PPR component but we might need to wrap

2733
04:54:48,000 --> 04:54:50,000
this newly created component into react suspense because this will take some

2734
04:54:53,000 --> 04:54:55,000
time to load so first we need to show a fullback for it so let's create a suspense

2735
04:55:00,000 --> 04:55:02,000
component with a fullback equal to a P tag off loading dot dot dot and now we

2736
04:55:08,000 --> 04:55:10,000
can put user startups within it and there we go that fixed it but it

2737
04:55:13,000 --> 04:55:15,000
brought back the issue so that means the issue is still somewhere here within user startups maybe we messed up the

2738
04:55:20,000 --> 04:55:22,000
query while copying it we're starting with this square bracket here but we're

2739
04:55:25,000 --> 04:55:27,000
never actually ending it so let's end it here and save it and there we go we

2740
04:55:32,000 --> 04:55:34,000
immediately get back our startup and as you reload you'll see that the top part loads immediately but right here at the

2741
04:55:38,000 --> 04:55:40,000
bottom there's a quick loading that appears and instead of Simply showing the text that says loading let's

2742
04:55:45,000 --> 04:55:47,000
actually install a shaten skeleton component a skeleton component is a

2743
04:55:50,000 --> 04:55:52,000
grade out rectangle that makes it appear like the entire div is

2744
04:55:55,000 --> 04:55:57,000
loading it looks so much better it makes the user wait a bit longer for it to load so let's run

2745
04:56:01,000 --> 04:56:03,000
MPX shaten at latest add skeleton looks

2746
04:56:07,000 --> 04:56:09,000
like we have already added it before so let's head over to the startup card and

2747
04:56:13,000 --> 04:56:15,000
right at the bottom of it we can say export con startup card

2748
04:56:19,000 --> 04:56:21,000
skeleton and we can have an instant return where we return a react fragment

2749
04:56:26,000 --> 04:56:28,000
where we map over let's say 1 2 3 4 five

2750
04:56:31,000 --> 04:56:33,000
maybe different cards by saying that map we get the first element and the index

2751
04:56:38,000 --> 04:56:40,000
of that element which is a number and for each number we return An Li of

2752
04:56:44,000 --> 04:56:46,000
key is equal to CN which we have to import from utils

2753
04:56:49,000 --> 04:56:51,000
skeleton and then the index as a matter of fact our numbers are actually indices so we can just use the first parameter

2754
04:56:57,000 --> 04:56:59,000
of the map as an index and we can pass it here that's going to be of a type number and then within it we can render

2755
04:57:04,000 --> 04:57:06,000
a skeleton component coming from components UI skeleton with a a class

2756
04:57:11,000 --> 04:57:13,000
name equal to Startup Das cardor skeleton now we're exporting it

2757
04:57:18,000 --> 04:57:20,000
and we can go back to our user Details page and we can use it right here

2758
04:57:24,000 --> 04:57:26,000
instead of the loading startup card skeleton it's going to look like this so

2759
04:57:29,000 --> 04:57:31,000
now if you reload you should be able to see something that resembles a card appear

2760
04:57:35,000 --> 04:57:37,000
before the card actually appears maybe if I go to inspect element and I go to

2761
04:57:41,000 --> 04:57:43,000
network and I turn on slow 4G maybe we can see the loading appear now that was

2762
04:57:48,000 --> 04:57:50,000
still too fast well what if I do command shift R which is going to clear the cache as well it's super fast maybe even

2763
04:57:54,000 --> 04:57:56,000
too fast to be able to see it but there we go for a second there as I reloaded or a millisecond while the card was

2764
04:58:01,000 --> 04:58:03,000
loading you were able to see this one right here now I can notice that we forgot to replace the Avatar right here

2765
04:58:08,000 --> 04:58:10,000
because this one was created by the the new Avatar so let's actually fix it by

2766
04:58:13,000 --> 04:58:15,000
going over to Startup card and we'll search for where we show the Avatar

2767
04:58:18,000 --> 04:58:20,000
image right here instead of this Source we can rather render author question mark. image and now we can see a real

2768
04:58:25,000 --> 04:58:27,000
image appear right here that's much better and we can render the author name as the AL tag for it perfect this is

2769
04:58:34,000 --> 04:58:36,000
great so would you look at that this is our second page where we used partial

2770
04:58:40,000 --> 04:58:42,000
pre-rendering to show user details statically and then to dynamically render new startups that that user has

2771
04:58:48,000 --> 04:58:50,000
posted looking great now one thing that I think we forgot to do at the start was

2772
04:58:54,000 --> 04:58:56,000
to update the navigation bar to be a bit more mobile responsive so if I go to

2773
04:59:00,000 --> 04:59:02,000
mobile view or rather collapse it like this you'll see that it doesn't really fit

2774
04:59:06,000 --> 04:59:08,000
all the way like it does in tablets but not on smaller mobile devices so let's quickly go back to the Navar

2775
04:59:13,000 --> 04:59:15,000
and let's find the button where it says create right here let's give it a class name on Max SM it'll be completely

2776
04:59:21,000 --> 04:59:23,000
hidden so you can see it will disappear but now below it we can show a

2777
04:59:27,000 --> 04:59:29,000
log out icon which will have the exact opposite

2778
04:59:32,000 --> 04:59:34,000
class it'll be a size of six but on small devices it'll be hidden

2779
04:59:40,000 --> 04:59:42,000
and it'll have a text red 500 so now we'll have a little logout icon this

2780
04:59:47,000 --> 04:59:49,000
doesn't go under create this actually goes under log out so let me put it right here below this logout button and

2781
04:59:55,000 --> 04:59:57,000
for it we have to do the same thing as we have done above turn it into a span so I'll copy this create and I'll just

2782
05:00:02,000 --> 05:00:04,000
make it say log out there we go below the create span we can create a

2783
05:00:07,000 --> 05:00:09,000
different icon this time it'll be a badge plus

2784
05:00:12,000 --> 05:00:14,000
icon once again with a class name is equal to size of six and then SP devices

2785
05:00:20,000 --> 05:00:22,000
hidden and finally we can also replace the user Avatar here where we show the user avator name instead of the full

2786
05:00:27,000 --> 05:00:29,000
name let's rather render the image shat CN has a perfect component for that so

2787
05:00:33,000 --> 05:00:35,000
let's run MPX shat and latest add

2788
05:00:38,000 --> 05:00:40,000
Avatar that'll allow us to remove this span and instead of it render avatar

2789
05:00:45,000 --> 05:00:47,000
coming from components UI Avatar with a class name equal to size is set to 10

2790
05:00:53,000 --> 05:00:55,000
within it we'll have an avatar image also coming from components UI Avatar

2791
05:00:58,000 --> 05:01:00,000
it'll be self-closing and it'll have a source equal to session question mark.

2792
05:01:03,000 --> 05:01:05,000
user question mark. image let's fix this class name spelling and and let's give

2793
05:01:10,000 --> 05:01:12,000
this Avatar an ALT tag of session question mark. user mark. name or an

2794
05:01:17,000 --> 05:01:19,000
empty string in case we don't have it same thing here or an empty

2795
05:01:23,000 --> 05:01:25,000
string and below it we can also render something known as an avatar

2796
05:01:28,000 --> 05:01:30,000
fullback coming from components UI Avatar which will allow us to render

2797
05:01:33,000 --> 05:01:35,000
some kind of a foldback if the image is not there we can say something like AV for Avatar let's fix this this class

2798
05:01:40,000 --> 05:01:42,000
name right here and there we go we have a great looking Avatar Photo and now if

2799
05:01:46,000 --> 05:01:48,000
you expand it a bit you can see now it's a bit different yes the Avatar is showing but now it says create log out

2800
05:01:53,000 --> 05:01:55,000
and then smaller devices we can see the icons great work coming this far into

2801
05:01:58,000 --> 05:02:00,000
the video in the next lesson I'll show you how to add another great Final Feature, Parallel Fetching and Deployment

2802
05:02:04,000 --> 05:02:06,000
feature do you know about the website called Awards the one that recognizes and promot great websites well I'll

2803
05:02:11,000 --> 05:02:13,000
teach you how to implement a feature to our YC directory app similar to what awards has if you head over to explore

2804
05:02:19,000 --> 05:02:21,000
you'll notice that there are many different categories like honorable mentions nominees site of the DAT site

2805
05:02:25,000 --> 05:02:27,000
of the Year side of the month and more well these are in simple words playlists

2806
05:02:30,000 --> 05:02:32,000
or some kind of categories of different startups or different designs whatever it may be so let's Implement that into

2807
05:02:37,000 --> 05:02:39,000
our app as well different kind categories of startups we can do that by first creating a new schema in sanity

2808
05:02:46,000 --> 05:02:48,000
schema types and create a new file and call it playlist. TS to create it we can

2809
05:02:53,000 --> 05:02:55,000
copy what we have in startup there we go and then paste it in the playlist and

2810
05:02:59,000 --> 05:03:01,000
make the necessary adjustments such as let's name it playlist give it a name of

2811
05:03:06,000 --> 05:03:08,000
playlist a title of playlists it'll be of a type document and then we can

2812
05:03:12,000 --> 05:03:14,000
Define different fields I'll delete a few of these as we only need three in this case the first one will be a title

2813
05:03:20,000 --> 05:03:22,000
string the title of the playlist the second one will be a slug and the third one will be a select which is a type of

2814
05:03:30,000 --> 05:03:32,000
array like this and it is going to be an array of different references so we can say

2815
05:03:38,000 --> 05:03:40,000
type is reference and a reference to what you may ask well

2816
05:03:43,000 --> 05:03:45,000
a reference to a type of startup that's going to look something like this so

2817
05:03:50,000 --> 05:03:52,000
what do I mean by this well each playlist will refer to multiple startups

2818
05:03:56,000 --> 05:03:58,000
and it'll have its own title like startups of the day or startups of the year so as soon as you do that let's

2819
05:04:02,000 --> 05:04:04,000
head over to index.ts and let's add playlists or

2820
05:04:07,000 --> 05:04:09,000
playlist right here as the third type importing

2821
05:04:13,000 --> 05:04:15,000
playlist from schema types playlist if you save it you can rerun your

2822
05:04:18,000 --> 05:04:20,000
application and then head over to sanity Studio once you're there you can click this create button and create a new

2823
05:04:25,000 --> 05:04:27,000
playlist you can give it any name you like such as best pitches or startup of

2824
05:04:31,000 --> 05:04:33,000
the day or something like editor picks so startups that YC directory admins

2825
05:04:37,000 --> 05:04:39,000
have liked the most we can generate cre a slug and now you can select different startups you want to add to this

2826
05:04:44,000 --> 05:04:46,000
playlist and see how simple this is you can just refer to different ones like skill Forge in this

2827
05:04:50,000 --> 05:04:52,000
case and that's it it'll automatically be saved I'll pause the video for a second to create a few more startups

2828
05:04:57,000 --> 05:04:59,000
just so we have some more startups to choose from and while I'm adding startups you can also add some additional pitches too there we go I

2829
05:05:04,000 --> 05:05:06,000
went ahead and added a few more startups now typically it'll take 60 second for

2830
05:05:10,000 --> 05:05:12,000
the cache to reload or you can just hard reload it and there we go so now I can

2831
05:05:15,000 --> 05:05:17,000
actually add a few more startups right here to editor picks I'll add JS Mastery

2832
05:05:21,000 --> 05:05:23,000
Pro and I'll add events sphere and I'll click save at the bottom

2833
05:05:28,000 --> 05:05:30,000
right there we go our editor picks have been published now we have to write a query that fetches the playlists by the

2834
05:05:35,000 --> 05:05:37,000
slug so let's head over to queries and let's write one last query

2835
05:05:42,000 --> 05:05:44,000
considering that we already wrote quite a couple I'll actually provide this one to you in the read me of this

2836
05:05:48,000 --> 05:05:50,000
video so you can just paste it here the name will be playlist by slag

2837
05:05:54,000 --> 05:05:56,000
query and it'll search for documents of theore type playlist where a slug exists

2838
05:06:02,000 --> 05:06:04,000
and then it's going to return everything including all the necessary info for the startups within that playlist

2839
05:06:10,000 --> 05:06:12,000
great we want to show these editor picks on the startup Details page but you can really put it anywhere you could also

2840
05:06:16,000 --> 05:06:18,000
render it right here below the all startups but for the time being I'll render them below the details of a

2841
05:06:23,000 --> 05:06:25,000
specific startup so right here below so let's copy the name of the

2842
05:06:28,000 --> 05:06:30,000
query and let's head over to Startup details so that is going to be this page

2843
05:06:33,000 --> 05:06:35,000
right here which is under app Root startup ID and the reason why

2844
05:06:40,000 --> 05:06:42,000
we're doing this here is because I want to show you a special feature so first things first let's say const the

2845
05:06:48,000 --> 05:06:50,000
structure select as editor posts or editor startups is equal to await

2846
05:06:56,000 --> 05:06:58,000
client. fetch where we pass in the query and then we can also pass the slug that

2847
05:07:02,000 --> 05:07:04,000
you're trying to fetch in this case I called it editor pick new for you most

2848
05:07:08,000 --> 05:07:10,000
likely it's going to be editor pick once you do that you can go below to where we

2849
05:07:13,000 --> 05:07:15,000
left are to do right here and you can check if editor posts question mark.

2850
05:07:20,000 --> 05:07:22,000
length is greater than zero then we want to render a div with a class name equal

2851
05:07:28,000 --> 05:07:30,000
to Max dw- 4XL and margin X of

2852
05:07:33,000 --> 05:07:35,000
Auto A P tag that'll have a class name equal to text D30 - semi bold and it'll

2853
05:07:41,000 --> 05:07:43,000
say editor piix right here we can render a UL an

2854
05:07:46,000 --> 05:07:48,000
unordered list with a class name of margin top of seven and a cardor grid of

2855
05:07:54,000 --> 05:07:56,000
small like this within it we want to map over editor posts by saying that map

2856
05:08:00,000 --> 05:08:02,000
where we get each individual post which is of a type startup type card and we

2857
05:08:07,000 --> 05:08:09,000
also get the index of a type number and for each one we want to Simply return a

2858
05:08:12,000 --> 05:08:14,000
startup card that's going to look something like this with a key equal to index and a post equal to post but make

2859
05:08:19,000 --> 05:08:21,000
sure to First import the startup card and we can just call index I there we go

2860
05:08:26,000 --> 05:08:28,000
and immediately you should be able to see however many posts you have chosen as editor picks this is great as now

2861
05:08:33,000 --> 05:08:35,000
editors can go directly in sanity studio and choose their favorite startups now allthough this works and it is fine we

2862
05:08:41,000 --> 05:08:43,000
have a little issue and that is that we have to be aware of two different data

2863
05:08:47,000 --> 05:08:49,000
fetching patterns parallel and sequential when fetching data inside components you need to be aware of those

2864
05:08:54,000 --> 05:08:56,000
two patterns so as you can see in sequential one is happening after the

2865
05:09:00,000 --> 05:09:02,000
other one two one 2 one2 so it's trying to load both of the things first for the

2866
05:09:08,000 --> 05:09:10,000
root layout then for the second page and then for the third page one by one but

2867
05:09:13,000 --> 05:09:15,000
in parallel it's actually loading one thing for all the pages and then it's slowly loading the other which takes

2868
05:09:20,000 --> 05:09:22,000
much less time as you can see here in sequential requests in a component tree are dependent on each other which can

2869
05:09:28,000 --> 05:09:30,000
lead to longer loading times but in parallel requests in a route are eagerly

2870
05:09:33,000 --> 05:09:35,000
initiated and will load data at the same time which reduces the total time it takes to load data

2871
05:09:39,000 --> 05:09:41,000
what we have done just now is sequential we're first fetching the data about the post and only then we're fetching the

2872
05:09:46,000 --> 05:09:48,000
editor posts so what does this mean well this means that we first fetch the post data and only after that is complete

2873
05:09:54,000 --> 05:09:56,000
then we fetch the editor picks but the time to fetch both will increase as it

2874
05:09:59,000 --> 05:10:01,000
will be the sum of both of these requests this approach is great if the second request depends on the first one

2875
05:10:06,000 --> 05:10:08,000
but in this case they're completely independent so we can take advantage of these modern

2876
05:10:12,000 --> 05:10:14,000
systems that are capable of handling multiple requests concurrently so let me teach you how to

2877
05:10:19,000 --> 05:10:21,000
implement parallel requests it's going to look something like this you'll say const and then do array D structuring

2878
05:10:27,000 --> 05:10:29,000
and say this is equal to await promise.all promise that all allows you

2879
05:10:34,000 --> 05:10:36,000
to pass two different calls and then for each one you get the result right here D

2880
05:10:40,000 --> 05:10:42,000
structured so the first call is going to be this one client fetch startup by ID

2881
05:10:46,000 --> 05:10:48,000
query so let's copy it and let's add it as the first element in the array the

2882
05:10:52,000 --> 05:10:54,000
second one will be this one client fetch playlist by slug so let's copy it and

2883
05:10:58,000 --> 05:11:00,000
add it as the second one great and now we can just get the result of both of

2884
05:11:03,000 --> 05:11:05,000
these at the start we first get the post and then for the second one we can these

2885
05:11:09,000 --> 05:11:11,000
structure this select editor posts and now we can remove both of

2886
05:11:15,000 --> 05:11:17,000
these two independent ones as we have just one that does everything this way

2887
05:11:20,000 --> 05:11:22,000
by using promise that all the code makes two independent requests concurrently

2888
05:11:26,000 --> 05:11:28,000
and as a result the total time is roughly equal to the duration of the longest request not the sum of

2889
05:11:34,000 --> 05:11:36,000
both by doing this your application's performance will increase and low times

2890
05:11:40,000 --> 05:11:42,000
will be even faster compared to making sequential requests as you can see it is

2891
05:11:46,000 --> 05:11:48,000
super fast I cannot even see something is loading so now you know a bit about a difference between parallel and

2892
05:11:52,000 --> 05:11:54,000
sequential rendering in xjs understanding the basics can make a big difference when you know how to fetch

2893
05:11:59,000 --> 05:12:01,000
data in parallel or use PPR to handle both Dynamic and static content on the

2894
05:12:05,000 --> 05:12:07,000
same page you don't just make your website faster and better you also grow

2895
05:12:10,000 --> 05:12:12,000
from a beginner to a senior developer you'll develop the decision-making skills every company wants knowing which

2896
05:12:18,000 --> 05:12:20,000
technology to use when to use it and most importantly why and that's why I've

2897
05:12:23,000 --> 05:12:25,000
included many theoretical Concepts tips tricks and things I wish I knew when I

2898
05:12:28,000 --> 05:12:30,000
was first learning nextjs in the ultimate nextjs course you'll dive deep

2899
05:12:34,000 --> 05:12:36,000
into strategies like caching revalidation backend routes serverless functions Edge run times react server

2900
05:12:41,000 --> 05:12:43,000
components inner workings handling parallel and sequential requests and using the latest features from react 19

2901
05:12:49,000 --> 05:12:51,000
and NEX 15 I've made sure to cover everything along with a build and deploy

2902
05:12:54,000 --> 05:12:56,000
of a modern stack Overflow clone covering all of these features so today

2903
05:13:00,000 --> 05:13:02,000
I'm publishing the nextjs 15 version of the ultimate nextjs course loved by over

2904
05:13:07,000 --> 05:13:09,000
4,100 Developers who keep messaging me about how this course help them become

2905
05:13:13,000 --> 05:13:15,000
the best nextg developer in their team at work or get them freelance opportunities and no it's not just a few

2906
05:13:20,000 --> 05:13:22,000
new lessons of next 15 it's an entirely new course fully re-recorded packed with

2907
05:13:26,000 --> 05:13:28,000
even more features such as next off for authentication Deep dive into the new

2908
05:13:31,000 --> 05:13:33,000
PPR strategy improved database architecture more secure server actions

2909
05:13:37,000 --> 05:13:39,000
testing using playwright email notifications search engine optimization tips and tricks and much more with a

2910
05:13:44,000 --> 05:13:46,000
special dedicated Discord Channel where we answered every single one of the answers from all 4,000 developers see it

2911
05:13:52,000 --> 05:13:54,000
for yourself so don't delay your nextjs dreams and become the best nextjs developer by taking the ultimate nextjs

2912
05:13:59,000 --> 05:14:01,000
course we have a super sale going on right now which only happens about once a year so visit jm.pro

2913
05:14:09,000 --> 05:14:11,000
SL nextjs and join more than 4,000 developers on this journey I hope I'll

2914
05:14:14,000 --> 05:14:16,000
see you in the course but for now let's go ahead and finalize this application I noticed that when creating

2915
05:14:20,000 --> 05:14:22,000
a startup we are issuing a toast a toast notification so let me show you how that

2916
05:14:26,000 --> 05:14:28,000
looks like if we go to the startup form we are sending this success toast

2917
05:14:35,000 --> 05:14:37,000
specifically this one but I noticed that sometimes it lacks the background ground so let's try to initiate it by default

2918
05:14:42,000 --> 05:14:44,000
by simply adding it right here at the top and of course closing it properly if

2919
05:14:48,000 --> 05:14:50,000
you reload you can see it at the top it's missing the background so let's go

2920
05:14:53,000 --> 05:14:55,000
to a toast component which you can find by going to the components

2921
05:14:58,000 --> 05:15:00,000
folder and then UI and then toast I'm actually glad this

2922
05:15:05,000 --> 05:15:07,000
happened because I can show you how we can further modify chatsi and component onon let's head over to this line right

2923
05:15:12,000 --> 05:15:14,000
here let's give it a BG white text- slate

2924
05:15:18,000 --> 05:15:20,000
d950 on dark mode BG slate 950 and on dark mode text slate 50 so

2925
05:15:27,000 --> 05:15:29,000
we're just changing the text color and the background color if I reload this fixes it and it's looking so much better

2926
05:15:35,000 --> 05:15:37,000
so now we can go back and remove this fake toast and and with that in mind I

2927
05:15:40,000 --> 05:15:42,000
believe our application is done I can go ahead and test it a bit by checking the

2928
05:15:45,000 --> 05:15:47,000
search Yep this works do we have a word that is shared amongst all of these well

2929
05:15:52,000 --> 05:15:54,000
I guess just the author is shared so if I go for Adrian y we can see that it finds all of them if I go for

2930
05:15:59,000 --> 05:16:01,000
event no nothing but event sphere yeah this is good what if I

2931
05:16:06,000 --> 05:16:08,000
search for Pro yep that works so search is working

2932
05:16:12,000 --> 05:16:14,000
everything is working and this app is utilizing the latest and greatest of what react and next GS have to

2933
05:16:19,000 --> 05:16:21,000
offer so the last step in every single JavaScript Mastery video is deployment

2934
05:16:25,000 --> 05:16:27,000
so let's go ahead and deploy it to the internet together to deploy it you can head over to your GitHub and create a

2935
05:16:31,000 --> 05:16:33,000
new repository call it something like YC directory either make it public or

2936
05:16:37,000 --> 05:16:39,000
private and click create then let's stop it from running and let's follow all of

2937
05:16:43,000 --> 05:16:45,000
these steps get init get add dot git commit DM first

2938
05:16:51,000 --> 05:16:53,000
commit git Branch dasm main get remote add

2939
05:16:57,000 --> 05:16:59,000
origin oh in this case I already have one so I'll rename it to origin one and

2940
05:17:03,000 --> 05:17:05,000
get push U origin main once you do that the code will be

2941
05:17:09,000 --> 05:17:11,000
live on your repo which means that we can head over to versell and create a new project out of this new repo that we

2942
05:17:16,000 --> 05:17:18,000
just added so let's go to import don't forget to add environment variables so

2943
05:17:23,000 --> 05:17:25,000
back in our code we have our env. loal copy all of these variables and then

2944
05:17:31,000 --> 05:17:33,000
paste them right here and we also have the Sentry o token as well so let's copy

2945
05:17:37,000 --> 05:17:39,000
it and add it as well not to forget it so let's click deploy now when deploying

2946
05:17:43,000 --> 05:17:45,000
big applications such as this one especially after doing so many changes it is highly likely and actually

2947
05:17:51,000 --> 05:17:53,000
probable and expected that something will go wrong and that it won't be deployed on the first time so we can

2948
05:17:57,000 --> 05:17:59,000
make additional changes later but that's not a problem if it breaks we'll fix it

2949
05:18:02,000 --> 05:18:04,000
so let's give it some time and I'll be right back and after 2 minutes and 50 seconds it broke thankfully it is just a

2950
05:18:11,000 --> 05:18:13,000
couple of typescript warnings which is not a big deal you can go ahead and fix those typescript issues in your project

2951
05:18:18,000 --> 05:18:20,000
or it's also totally okay to disable them for production builds so that's exactly what we'll do in this case to

2952
05:18:25,000 --> 05:18:27,000
get our project deployed the only thing you have to do is say tab script ignore build errors to

2953
05:18:31,000 --> 05:18:33,000
true and you can do that within next config so let's head over to next config

2954
05:18:37,000 --> 05:18:39,000
and let's add script ignore build errors is set to

2955
05:18:43,000 --> 05:18:45,000
True similarly we can do the same thing for eslint by saying ignore during builds is

2956
05:18:50,000 --> 05:18:52,000
set to true now you can open up the terminal run

2957
05:18:55,000 --> 05:18:57,000
git add dot git commit DM update next

2958
05:19:01,000 --> 05:19:03,000
config and then run git push as soon as you do that and go back to your resell

2959
05:19:07,000 --> 05:19:09,000
dashboard if you go to your project and go to deployments you should be able to see that the update next config push is

2960
05:19:15,000 --> 05:19:17,000
building fingers crossed and there we go the deployment succeeded so if you go to project and click visit you can see that

2961
05:19:22,000 --> 05:19:24,000
our application loads but there is a slight error a client side exception

2962
05:19:27,000 --> 05:19:29,000
error specifically so if you go to the console you can see that sanity is being

2963
05:19:33,000 --> 05:19:35,000
blocked by the Court's policy so let's head over to our project dashboard go to

2964
05:19:40,000 --> 05:19:42,000
API go to course origin and add a course origin for our newly deployed URL we can

2965
05:19:48,000 --> 05:19:50,000
do that by copying the URL from the app and let's allow credentials and click

2966
05:19:54,000 --> 05:19:56,000
save now if you go back and reload it all works you might have thought that we broke something else but no we just had

2967
05:20:01,000 --> 05:20:03,000
to allow it another thing which you'll have to allow is GitHub oath remember to

2968
05:20:07,000 --> 05:20:09,000
redirect URI you'll have to take the URL of the current application head back to

2969
05:20:12,000 --> 05:20:14,000
the O settings for this app and then update the homepage URL as well as this

2970
05:20:19,000 --> 05:20:21,000
URL right here htps YC directory. L.A or

2971
05:20:25,000 --> 05:20:27,000
whatever your url is and then leave the rest the same click update application

2972
05:20:31,000 --> 05:20:33,000
go back reload and click log in one more time and would you look at that it

2973
05:20:36,000 --> 05:20:38,000
logged Us in automatically so to finish this great video off let's create one

2974
05:20:42,000 --> 05:20:44,000
final startup actually the startup title will be the YC directory

2975
05:20:48,000 --> 05:20:50,000
itself we're so proud of it so let's say that this is a

2976
05:20:54,000 --> 05:20:56,000
directory of great startup pitches created by the

2977
05:21:01,000 --> 05:21:03,000
community category is going to be something like business we can take some

2978
05:21:07,000 --> 05:21:09,000
kind of an image from May YC combinator so I'll just grab the image

2979
05:21:12,000 --> 05:21:14,000
address and paste it and we can say something like no pitch needed right

2980
05:21:20,000 --> 05:21:22,000
here this app speaks for itself and let's submit the pitch oh it

2981
05:21:27,000 --> 05:21:29,000
looks like the image wasn't valid and it cleared our form that's actually One

2982
05:21:33,000 --> 05:21:35,000
update that I would like you to make play with the new react hook that we used to submit the form and try to

2983
05:21:39,000 --> 05:21:41,000
repopulate the fields if the submission fails but no worries I've took another

2984
05:21:44,000 --> 05:21:46,000
image and I'll say YC directory hopefully this time it works and I'll

2985
05:21:51,000 --> 05:21:53,000
click submit there we go your startup pitch has been submitted we can see it

2986
05:21:56,000 --> 05:21:58,000
right here which means that all of our apps functionalities are

2987
05:22:01,000 --> 05:22:03,000
working and it still didn't appear on the homepage because these results are cached and it can take up to 60 seconds

2988
05:22:09,000 --> 05:22:11,000
to appear right here beautiful this was such a wonderful build in which we

2989
05:22:15,000 --> 05:22:17,000
explored the latest and greatest of what react NEX GS and Sanity have to offer

2990
05:22:21,000 --> 05:22:23,000
and if you came to the end of this video and you still didn't take the ultimate next GS course I really think you're

2991
05:22:27,000 --> 05:22:29,000
going to love it considering that you watched all the way until the end of this amazing crash course as I already

2992
05:22:34,000 --> 05:22:36,000
told you in this ultimate course we dive much deeper into the intricacies of how

2993
05:22:40,000 --> 05:22:42,000
nygs truly works under the hood we optimize performance to this and we do a

2994
05:22:46,000 --> 05:22:48,000
lot of deep Dives to truly understand how things work behind the scenes as well as build an app that is much more

2995
05:22:53,000 --> 05:22:55,000
complex than the app you've built in this video so considering that you're watching here after a couple of hours of

2996
05:22:59,000 --> 05:23:01,000
content and you're still here I really think it's a good fit for you I'll leave the link down in the description with

2997
05:23:04,000 --> 05:23:06,000
that said thank you so much for watching and I'll see you in the next one have a wonderful day 

